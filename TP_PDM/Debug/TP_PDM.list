
TP_PDM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000527c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800574c  0800574c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000002ec  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011c28  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002f3f  00000000  00000000  00031d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001228  00000000  00000000  00034c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e1b  00000000  00000000  00035e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028c43  00000000  00000000  00036c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00019da9  00000000  00000000  0005f8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eda1a  00000000  00000000  00079687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052f0  00000000  00000000  001670a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  0016c394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005414 	.word	0x08005414

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08005414 	.word	0x08005414

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Error_Handler>:


#include "stm32f4xx_nucleo_144.h"
#include "API_Delay.h"

static void Error_Handler(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 fb4f 	bl	8000c44 <BSP_LED_On>
	while (1){}
 80005a6:	e7fe      	b.n	80005a6 <Error_Handler+0xa>

080005a8 <delayInit>:
}

void delayInit(delay_t *delay, tick_t duration) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]

	if (duration <= 0){
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <delayInit+0x16>
		Error_Handler();
 80005b8:	f7ff fff0 	bl	800059c <Error_Handler>
	}
	else{
		delay->duration = duration;
		delay->running = false;
	}
}
 80005bc:	e005      	b.n	80005ca <delayInit+0x22>
		delay->duration = duration;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	605a      	str	r2, [r3, #4]
		delay->running = false;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	721a      	strb	r2, [r3, #8]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <delayRead>:

bool_t delayRead(delay_t *delay) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]

	bool state = false;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d020      	beq.n	8000626 <delayRead+0x54>
		tick_t currentTime = HAL_GetTick();
 80005e4:	f000 fcca 	bl	8000f7c <HAL_GetTick>
 80005e8:	60b8      	str	r0, [r7, #8]

		if (!delay->running) {
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	7a1b      	ldrb	r3, [r3, #8]
 80005ee:	f083 0301 	eor.w	r3, r3, #1
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d008      	beq.n	800060a <delayRead+0x38>
			delay->startTime = HAL_GetTick();
 80005f8:	f000 fcc0 	bl	8000f7c <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
			delay->running = true;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2201      	movs	r2, #1
 8000606:	721a      	strb	r2, [r3, #8]
 8000608:	e00f      	b.n	800062a <delayRead+0x58>
		}

		else {


			if (currentTime - delay->startTime >= delay->duration) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d307      	bcc.n	800062a <delayRead+0x58>
				delay->running = false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	721a      	strb	r2, [r3, #8]
				state = true;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e001      	b.n	800062a <delayRead+0x58>
			}
		}

	}
	else{
		Error_Handler();
 8000626:	f7ff ffb9 	bl	800059c <Error_Handler>
	}


	return state;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <Timer_Init>:
 * Esta función inicializa el temporizador TIM5 para generar retardos en microsegundos. Configura el temporizador
 * con una frecuencia de reloj interna y lo inicia.
 *
 * @return true si la inicialización es exitosa, false en caso contrario.
 */
bool_t Timer_Init(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0308 	add.w	r3, r7, #8
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]

    htim5.Instance = TIM5;
 8000650:	4b1d      	ldr	r3, [pc, #116]	; (80006c8 <Timer_Init+0x94>)
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <Timer_Init+0x98>)
 8000654:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler =  90 - 1;
 8000656:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <Timer_Init+0x94>)
 8000658:	2259      	movs	r2, #89	; 0x59
 800065a:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b1a      	ldr	r3, [pc, #104]	; (80006c8 <Timer_Init+0x94>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = BITS8_LIMIT;
 8000662:	4b19      	ldr	r3, [pc, #100]	; (80006c8 <Timer_Init+0x94>)
 8000664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000668:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <Timer_Init+0x94>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]

    if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000670:	4815      	ldr	r0, [pc, #84]	; (80006c8 <Timer_Init+0x94>)
 8000672:	f002 f961 	bl	8002938 <HAL_TIM_Base_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <Timer_Init+0x4c>
    {
        Error_Handler();
 800067c:	f000 f8d1 	bl	8000822 <Error_Handler>
    }

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000684:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	4619      	mov	r1, r3
 800068c:	480e      	ldr	r0, [pc, #56]	; (80006c8 <Timer_Init+0x94>)
 800068e:	f002 fa13 	bl	8002ab8 <HAL_TIM_ConfigClockSource>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <Timer_Init+0x68>
    {
        Error_Handler();
 8000698:	f000 f8c3 	bl	8000822 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <Timer_Init+0x94>)
 80006aa:	f002 fc07 	bl	8002ebc <HAL_TIMEx_MasterConfigSynchronization>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <Timer_Init+0x84>
    {
        Error_Handler();
 80006b4:	f000 f8b5 	bl	8000822 <Error_Handler>
    }

    HAL_TIM_Base_Start_IT(&htim5);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <Timer_Init+0x94>)
 80006ba:	f002 f98d 	bl	80029d8 <HAL_TIM_Base_Start_IT>

    return true;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000094 	.word	0x20000094
 80006cc:	40000c00 	.word	0x40000c00

080006d0 <HAL_TIM_Base_MspInit>:
 * Esta función inicializa los recursos necesarios para el funcionamiento del temporizador TIM5.
 *
 * @param tim_baseHandle Estructura de manejo del temporizador TIM.
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    if(tim_baseHandle->Instance==TIM5)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <HAL_TIM_Base_MspInit+0x3c>)
 80006de:	4293      	cmp	r3, r2
 80006e0:	d10d      	bne.n	80006fe <HAL_TIM_Base_MspInit+0x2e>
    {
        __HAL_RCC_TIM5_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_TIM_Base_MspInit+0x40>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <HAL_TIM_Base_MspInit+0x40>)
 80006ec:	f043 0308 	orr.w	r3, r3, #8
 80006f0:	6413      	str	r3, [r2, #64]	; 0x40
 80006f2:	4b07      	ldr	r3, [pc, #28]	; (8000710 <HAL_TIM_Base_MspInit+0x40>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	f003 0308 	and.w	r3, r3, #8
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    }
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	40000c00 	.word	0x40000c00
 8000710:	40023800 	.word	0x40023800

08000714 <getUsTick>:
 *
 * Esta función devuelve el valor actual del contador del temporizador TIM5 en microsegundos.
 *
 * @return Valor actual del contador del temporizador TIM5 en microsegundos.
 */
uint32_t getUsTick(void) {
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim5);
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <getUsTick+0x14>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000094 	.word	0x20000094

0800072c <usDelay>:
 *
 * Esta función genera un retardo bloqueante en microsegundos utilizando ciclos NOP.
 *
 * @param delay Duración del retardo en microsegundos.
 */
void usDelay(uint32_t delay) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    uint32_t cycles = delay * (HAL_RCC_GetHCLKFreq() / 1000000)/14; // se calibró a prueba y error, denominador no puede ser impar
 8000734:	f002 f8cc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8000738:	4603      	mov	r3, r0
 800073a:	4a0e      	ldr	r2, [pc, #56]	; (8000774 <usDelay+0x48>)
 800073c:	fba2 2303 	umull	r2, r3, r2, r3
 8000740:	0c9b      	lsrs	r3, r3, #18
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	fb02 f303 	mul.w	r3, r2, r3
 8000748:	085b      	lsrs	r3, r3, #1
 800074a:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <usDelay+0x4c>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	089b      	lsrs	r3, r3, #2
 8000752:	60bb      	str	r3, [r7, #8]

    for (uint32_t i = 0; i < cycles; ++i) {
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e003      	b.n	8000762 <usDelay+0x36>
        __asm("NOP");
 800075a:	bf00      	nop
    for (uint32_t i = 0; i < cycles; ++i) {
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	3301      	adds	r3, #1
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	429a      	cmp	r2, r3
 8000768:	d3f7      	bcc.n	800075a <usDelay+0x2e>
    }
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	431bde83 	.word	0x431bde83
 8000778:	92492493 	.word	0x92492493

0800077c <usDelayInit>:
 * Esta función inicializa una estructura de retardo no bloqueante en microsegundos con la duración especificada.
 *
 * @param delay Puntero a la estructura de retardo no bloqueante.
 * @param duration Duración del retardo en microsegundos.
 */
void usDelayInit(usDelay_t *delay, uint32_t duration) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
    if (duration <= 0){
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <usDelayInit+0x16>
        Error_Handler();
 800078c:	f000 f849 	bl	8000822 <Error_Handler>
    }
    else{
        delay->duration = duration;
        delay->running = false;
    }
}
 8000790:	e005      	b.n	800079e <usDelayInit+0x22>
        delay->duration = duration;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	683a      	ldr	r2, [r7, #0]
 8000796:	605a      	str	r2, [r3, #4]
        delay->running = false;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2200      	movs	r2, #0
 800079c:	721a      	strb	r2, [r3, #8]
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <usDelayRead>:
 * false en caso contrario.
 *
 * @param delay Puntero a la estructura de retardo no bloqueante.
 * @return true si el retardo ha concluido, false en caso contrario.
 */
bool_t usDelayRead(usDelay_t *delay) {
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b084      	sub	sp, #16
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	6078      	str	r0, [r7, #4]
    bool state = false;
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
    if(delay != NULL){
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d020      	beq.n	80007fa <usDelayRead+0x54>

        uint32_t currentTime = getUsTick();
 80007b8:	f7ff ffac 	bl	8000714 <getUsTick>
 80007bc:	60b8      	str	r0, [r7, #8]

        if (!delay->running) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a1b      	ldrb	r3, [r3, #8]
 80007c2:	f083 0301 	eor.w	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <usDelayRead+0x38>
            delay->startTime = getUsTick();
 80007cc:	f7ff ffa2 	bl	8000714 <getUsTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
            delay->running = true;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2201      	movs	r2, #1
 80007da:	721a      	strb	r2, [r3, #8]
 80007dc:	e00f      	b.n	80007fe <usDelayRead+0x58>
        }

        else {

            if (currentTime - delay->startTime >= delay->duration) {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	1ad2      	subs	r2, r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d307      	bcc.n	80007fe <usDelayRead+0x58>
                delay->running = false;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	721a      	strb	r2, [r3, #8]
                state = true;
 80007f4:	2301      	movs	r3, #1
 80007f6:	73fb      	strb	r3, [r7, #15]
 80007f8:	e001      	b.n	80007fe <usDelayRead+0x58>
            }
        }

    }
    else{
        Error_Handler();
 80007fa:	f000 f812 	bl	8000822 <Error_Handler>
    }

    return state;
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <usResetDelay>:
 *
 * Esta función reinicia un retardo no bloqueante en microsegundos, estableciendo su estado a no corriendo.
 *
 * @param delay Puntero a la estructura de retardo no bloqueante.
 */
void usResetDelay(usDelay_t *delay){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
    delay->running = false;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	721a      	strb	r2, [r3, #8]
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <Error_Handler>:
 * @brief Manejador de errores genérico.
 *
 * Esta función se utiliza para manejar errores genéricos. En caso de error, enciende el LED2 y entra en un bucle infinito.
 */
static void Error_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
    /* Turn LED2 on */
    BSP_LED_On(LED2);
 8000826:	2001      	movs	r0, #1
 8000828:	f000 fa0c 	bl	8000c44 <BSP_LED_On>
    while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0xa>

0800082e <Error_Handler>:
static const uint8_t I2C_CHAR_SIZE = 4;

I2C_HandleTypeDef I2C1Handle;

static void Error_Handler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8000832:	2001      	movs	r0, #1
 8000834:	f000 fa06 	bl	8000c44 <BSP_LED_On>
	while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0xa>
	...

0800083c <I2C_Init>:
	{
	}
}

bool_t I2C_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	I2C1Handle.Instance = I2Cx;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <I2C_Init+0x54>)
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <I2C_Init+0x58>)
 8000844:	601a      	str	r2, [r3, #0]
	I2C1Handle.Init.ClockSpeed = 100000;
 8000846:	4b12      	ldr	r3, [pc, #72]	; (8000890 <I2C_Init+0x54>)
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <I2C_Init+0x5c>)
 800084a:	605a      	str	r2, [r3, #4]
	I2C1Handle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800084c:	4b10      	ldr	r3, [pc, #64]	; (8000890 <I2C_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	I2C1Handle.Init.OwnAddress1 = 0;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <I2C_Init+0x54>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
	I2C1Handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000858:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <I2C_Init+0x54>)
 800085a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085e:	611a      	str	r2, [r3, #16]
	I2C1Handle.Init.OwnAddress2 = 0;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <I2C_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	619a      	str	r2, [r3, #24]
	I2C1Handle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <I2C_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
	I2C1Handle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <I2C_Init+0x54>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
	I2C1Handle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <I2C_Init+0x54>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]

	if (HAL_I2C_Init(&I2C1Handle) != HAL_OK)
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <I2C_Init+0x54>)
 800087a:	f000 fe8d 	bl	8001598 <HAL_I2C_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <I2C_Init+0x4c>
	{
		Error_Handler();
 8000884:	f7ff ffd3 	bl	800082e <Error_Handler>
	}

	return true;
 8000888:	2301      	movs	r3, #1
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000dc 	.word	0x200000dc
 8000894:	40005400 	.word	0x40005400
 8000898:	000186a0 	.word	0x000186a0

0800089c <Lcd_Send_Cmd>:

void Lcd_Send_Cmd(char cmd)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af02      	add	r7, sp, #8
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	f023 030f 	bic.w	r3, r3, #15
 80008ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	011b      	lsls	r3, r3, #4
 80008b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	f043 030c 	orr.w	r3, r3, #12
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	f043 0308 	orr.w	r3, r3, #8
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 80008c8:	7bbb      	ldrb	r3, [r7, #14]
 80008ca:	f043 030c 	orr.w	r3, r3, #12
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 80008d2:	7bbb      	ldrb	r3, [r7, #14]
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&I2C1Handle, LCD_ADDRESS, (uint8_t *)data_t, I2C_CHAR_SIZE, I2C_TIMEOUT);
 80008dc:	2304      	movs	r3, #4
 80008de:	b29b      	uxth	r3, r3
 80008e0:	2264      	movs	r2, #100	; 0x64
 80008e2:	4611      	mov	r1, r2
 80008e4:	f107 0208 	add.w	r2, r7, #8
 80008e8:	9100      	str	r1, [sp, #0]
 80008ea:	214e      	movs	r1, #78	; 0x4e
 80008ec:	4803      	ldr	r0, [pc, #12]	; (80008fc <Lcd_Send_Cmd+0x60>)
 80008ee:	f000 ff97 	bl	8001820 <HAL_I2C_Master_Transmit>
}
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000dc 	.word	0x200000dc

08000900 <Lcd_Send_Char>:

void Lcd_Send_Char(char data)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	f023 030f 	bic.w	r3, r3, #15
 8000910:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	011b      	lsls	r3, r3, #4
 8000916:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	f043 030d 	orr.w	r3, r3, #13
 800091e:	b2db      	uxtb	r3, r3
 8000920:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	f043 0309 	orr.w	r3, r3, #9
 8000928:	b2db      	uxtb	r3, r3
 800092a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	f043 030d 	orr.w	r3, r3, #13
 8000932:	b2db      	uxtb	r3, r3
 8000934:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8000936:	7bbb      	ldrb	r3, [r7, #14]
 8000938:	f043 0309 	orr.w	r3, r3, #9
 800093c:	b2db      	uxtb	r3, r3
 800093e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&I2C1Handle, LCD_ADDRESS, (uint8_t *)data_t, I2C_CHAR_SIZE, I2C_TIMEOUT);
 8000940:	2304      	movs	r3, #4
 8000942:	b29b      	uxth	r3, r3
 8000944:	2264      	movs	r2, #100	; 0x64
 8000946:	4611      	mov	r1, r2
 8000948:	f107 0208 	add.w	r2, r7, #8
 800094c:	9100      	str	r1, [sp, #0]
 800094e:	214e      	movs	r1, #78	; 0x4e
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <Lcd_Send_Char+0x60>)
 8000952:	f000 ff65 	bl	8001820 <HAL_I2C_Master_Transmit>
}
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000dc 	.word	0x200000dc

08000964 <Lcd_Init>:

bool_t Lcd_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	HAL_Delay(60);
 8000968:	203c      	movs	r0, #60	; 0x3c
 800096a:	f000 fb13 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x30);
 800096e:	2030      	movs	r0, #48	; 0x30
 8000970:	f7ff ff94 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(5);
 8000974:	2005      	movs	r0, #5
 8000976:	f000 fb0d 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x30);
 800097a:	2030      	movs	r0, #48	; 0x30
 800097c:	f7ff ff8e 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(1);
 8000980:	2001      	movs	r0, #1
 8000982:	f000 fb07 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x30);
 8000986:	2030      	movs	r0, #48	; 0x30
 8000988:	f7ff ff88 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f000 fb01 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x20); // 4-bit mode
 8000992:	2020      	movs	r0, #32
 8000994:	f7ff ff82 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(10);
 8000998:	200a      	movs	r0, #10
 800099a:	f000 fafb 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x28); // 4-bit, 2 lines, 5x8 font
 800099e:	2028      	movs	r0, #40	; 0x28
 80009a0:	f7ff ff7c 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f000 faf5 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x08); // Display off
 80009aa:	2008      	movs	r0, #8
 80009ac:	f7ff ff76 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 faef 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x01); // Clear display
 80009b6:	2001      	movs	r0, #1
 80009b8:	f7ff ff70 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(2);
 80009bc:	2002      	movs	r0, #2
 80009be:	f000 fae9 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x06); // Increment cursor
 80009c2:	2006      	movs	r0, #6
 80009c4:	f7ff ff6a 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(1);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f000 fae3 	bl	8000f94 <HAL_Delay>
	Lcd_Send_Cmd(0x0C); // Display on
 80009ce:	200c      	movs	r0, #12
 80009d0:	f7ff ff64 	bl	800089c <Lcd_Send_Cmd>

	return true;
 80009d4:	2301      	movs	r3, #1
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}

080009da <Lcd_Clear>:

void Lcd_Clear(void){
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0

	Lcd_Send_Cmd(0x01);
 80009de:	2001      	movs	r0, #1
 80009e0:	f7ff ff5c 	bl	800089c <Lcd_Send_Cmd>
	HAL_Delay(2);
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 fad5 	bl	8000f94 <HAL_Delay>
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <Lcd_Set_Cursor>:

void Lcd_Set_Cursor(int row, int col){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
	uint8_t address;
	switch (row)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d81e      	bhi.n	8000a40 <Lcd_Set_Cursor+0x50>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <Lcd_Set_Cursor+0x18>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a19 	.word	0x08000a19
 8000a0c:	08000a23 	.word	0x08000a23
 8000a10:	08000a2d 	.word	0x08000a2d
 8000a14:	08000a37 	.word	0x08000a37
	{
	case 1:
		address = col - 1;
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
		break;
 8000a20:	e00e      	b.n	8000a40 <Lcd_Set_Cursor+0x50>
	case 2:
		address = 0x40 + col - 1;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	333f      	adds	r3, #63	; 0x3f
 8000a28:	73fb      	strb	r3, [r7, #15]
		break;
 8000a2a:	e009      	b.n	8000a40 <Lcd_Set_Cursor+0x50>
	case 3:
		address = 0x14 + col - 1;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	3313      	adds	r3, #19
 8000a32:	73fb      	strb	r3, [r7, #15]
		break;
 8000a34:	e004      	b.n	8000a40 <Lcd_Set_Cursor+0x50>
	case 4:
		address = 0x54 + col - 1;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	3353      	adds	r3, #83	; 0x53
 8000a3c:	73fb      	strb	r3, [r7, #15]
		break;
 8000a3e:	bf00      	nop
	}
	Lcd_Send_Cmd(0x80 | address);
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff27 	bl	800089c <Lcd_Send_Cmd>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop

08000a58 <Lcd_Send_String>:

void Lcd_Send_String(char *str){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	while (*str)
 8000a60:	e006      	b.n	8000a70 <Lcd_Send_String+0x18>
		Lcd_Send_Char(*str++);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff48 	bl	8000900 <Lcd_Send_Char>
	while (*str)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f4      	bne.n	8000a62 <Lcd_Send_String+0xa>
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <Lcd_CGRAM_CreateChar>:

void Lcd_NoBlink(void){
	Lcd_Send_Cmd(0x0C);
}

void Lcd_CGRAM_CreateChar(unsigned char pos, const char *msg){
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	6039      	str	r1, [r7, #0]
 8000a8c:	71fb      	strb	r3, [r7, #7]

	if (pos < 8){
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b07      	cmp	r3, #7
 8000a92:	d817      	bhi.n	8000ac4 <Lcd_CGRAM_CreateChar+0x42>

		Lcd_Send_Cmd(0x40 + (pos * 8));
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	3308      	adds	r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fefc 	bl	800089c <Lcd_Send_Cmd>

		for (unsigned char i = 0; i < 8; i++){
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e009      	b.n	8000abe <Lcd_CGRAM_CreateChar+0x3c>
			Lcd_Send_Char(msg[i]);
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff24 	bl	8000900 <Lcd_Send_Char>
		for (unsigned char i = 0; i < 8; i++){
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	3301      	adds	r3, #1
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
 8000ac0:	2b07      	cmp	r3, #7
 8000ac2:	d9f2      	bls.n	8000aaa <Lcd_CGRAM_CreateChar+0x28>
		}
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <Lcd_CGRAM_WriteChar>:

void Lcd_CGRAM_WriteChar(char pos){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	Lcd_Send_Char(pos);
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff11 	bl	8000900 <Lcd_Send_Char>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <uartInit>:

/**
  * @brief  Inicializa la UART.
  * @retval true si la inicialización es exitosa, false si ocurre un error.
  */
bool_t uartInit() {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0

	/* Configuración de la estructura de la UART */
	UartHandle.Instance = USARTx;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <uartInit+0x54>)
 8000aee:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <uartInit+0x58>)
 8000af0:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <uartInit+0x54>)
 8000af4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af8:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <uartInit+0x54>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <uartInit+0x54>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <uartInit+0x54>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <uartInit+0x54>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <uartInit+0x54>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <uartInit+0x54>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <uartInit+0x54>)
 8000b20:	f002 fa48 	bl	8002fb4 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <uartInit+0x46>
		Error_Handler();
 8000b2a:	f000 f835 	bl	8000b98 <Error_Handler>
	}


	printf("\n\r UART configured as follows:"
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <uartInit+0x5c>)
 8000b30:	f003 fc22 	bl	8004378 <iprintf>
			"\n\r\t Init.Mode     =   MODE_TX_RX"
			"\n\r\t HwFlowCtl      =   NONE"
			"\n\r\t OverSampling  =   16 \n\r"
	);

	return true;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000130 	.word	0x20000130
 8000b40:	40004800 	.word	0x40004800
 8000b44:	0800542c 	.word	0x0800542c

08000b48 <uartSendString>:
/**
  * @brief  Envía una cadena a través de la UART.
  * @param  pstring: Puntero a la cadena a enviar.
  * @retval None
  */
void uartSendString(uint8_t *pstring) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	uint16_t length = strlen((char *)pstring);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff fb4d 	bl	80001f0 <strlen>
 8000b56:	4603      	mov	r3, r0
 8000b58:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&UartHandle, pstring, length, UART_TIMEOUT_MS);
 8000b5a:	89fa      	ldrh	r2, [r7, #14]
 8000b5c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <uartSendString+0x28>)
 8000b64:	f002 fa73 	bl	800304e <HAL_UART_Transmit>
}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000130 	.word	0x20000130

08000b74 <__io_putchar>:
  * @brief  Implementación de fputc para redirigir la salida de printf a la UART.
  * @param  ch: Carácter a imprimir.
  * @param  stream: Puntero al flujo de salida (no utilizado).
  * @retval Carácter impreso.
  */
PUTCHAR_PROTOTYPE {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/* Transmitir el carácter a través de la UART */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) &ch, 1, UART_TIMEOUT_MS);
 8000b7c:	1d39      	adds	r1, r7, #4
 8000b7e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000b82:	2201      	movs	r2, #1
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <__io_putchar+0x20>)
 8000b86:	f002 fa62 	bl	800304e <HAL_UART_Transmit>

	return ch;
 8000b8a:	687b      	ldr	r3, [r7, #4]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000130 	.word	0x20000130

08000b98 <Error_Handler>:
/**
  * @brief  Manejador de errores.
  * @note   Esta función se llama en caso de error y entra en un bucle infinito.
  * @retval None
  */
static void Error_Handler(void){
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	while(1){
		BSP_LED_On(LED2); /**< Enciende el LED2 en caso de error */
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f000 f851 	bl	8000c44 <BSP_LED_On>
 8000ba2:	e7fb      	b.n	8000b9c <Error_Handler+0x4>

08000ba4 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d10e      	bne.n	8000bd2 <BSP_LED_Init+0x2e>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <BSP_LED_Init+0x94>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbc:	4a1e      	ldr	r2, [pc, #120]	; (8000c38 <BSP_LED_Init+0x94>)
 8000bbe:	f043 0302 	orr.w	r3, r3, #2
 8000bc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <BSP_LED_Init+0x94>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	f003 0302 	and.w	r3, r3, #2
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	e00d      	b.n	8000bee <BSP_LED_Init+0x4a>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <BSP_LED_Init+0x94>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <BSP_LED_Init+0x94>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <BSP_LED_Init+0x94>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <BSP_LED_Init+0x98>)
 8000bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000c00:	2302      	movs	r3, #2
 8000c02:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <BSP_LED_Init+0x9c>)
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	f107 0214 	add.w	r2, r7, #20
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fac8 	bl	80011a8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <BSP_LED_Init+0x9c>)
 8000c1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <BSP_LED_Init+0x98>)
 8000c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f000 fc80 	bl	8001530 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3728      	adds	r7, #40	; 0x28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	08005634 	.word	0x08005634
 8000c40:	20000000 	.word	0x20000000

08000c44 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4a07      	ldr	r2, [pc, #28]	; (8000c70 <BSP_LED_On+0x2c>)
 8000c52:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <BSP_LED_On+0x30>)
 8000c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	4619      	mov	r1, r3
 8000c62:	f000 fc65 	bl	8001530 <HAL_GPIO_WritePin>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	08005634 	.word	0x08005634

08000c78 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <BSP_LED_Toggle+0x2c>)
 8000c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <BSP_LED_Toggle+0x30>)
 8000c8e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c92:	4619      	mov	r1, r3
 8000c94:	4610      	mov	r0, r2
 8000c96:	f000 fc64 	bl	8001562 <HAL_GPIO_TogglePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	08005634 	.word	0x08005634

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b16      	ldr	r3, [pc, #88]	; (8000d0c <SystemInit+0x60>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a15      	ldr	r2, [pc, #84]	; (8000d0c <SystemInit+0x60>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000cc0:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <SystemInit+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <SystemInit+0x64>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <SystemInit+0x64>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <SystemInit+0x64>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0e      	ldr	r2, [pc, #56]	; (8000d10 <SystemInit+0x64>)
 8000cd8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <SystemInit+0x64>)
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <SystemInit+0x68>)
 8000ce6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <SystemInit+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a08      	ldr	r2, [pc, #32]	; (8000d10 <SystemInit+0x64>)
 8000cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <SystemInit+0x64>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cfa:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <SystemInit+0x60>)
 8000cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d00:	609a      	str	r2, [r3, #8]
#endif
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00
 8000d10:	40023800 	.word	0x40023800
 8000d14:	24003010 	.word	0x24003010

08000d18 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <MemManage_Handler+0x4>

08000d32 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <BusFault_Handler+0x4>

08000d38 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <UsageFault_Handler+0x4>

08000d3e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
}
 8000d42:	bf00      	nop
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000d6c:	f000 f8f2 	bl	8000f54 <HAL_IncTick>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fed3 	bl	8000b74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
	}
	return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	; (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f003 fb3e 	bl	8004500 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20030000 	.word	0x20030000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	20000174 	.word	0x20000174
 8000eb8:	20000368 	.word	0x20000368

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x34>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x34>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x34>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x34>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f931 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f001 f838 	bl	8001f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f93b 	bl	800118e <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f30:	f000 f911 	bl	8001156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000014 	.word	0x20000014
 8000f50:	20000010 	.word	0x20000010

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000014 	.word	0x20000014
 8000f78:	20000178 	.word	0x20000178

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000178 	.word	0x20000178

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000014 	.word	0x20000014

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f7ff ff8e 	bl	8001040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff47 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001156:	b580      	push	{r7, lr}
 8001158:	b086      	sub	sp, #24
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001168:	f7ff ff5c 	bl	8001024 <__NVIC_GetPriorityGrouping>
 800116c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	6978      	ldr	r0, [r7, #20]
 8001174:	f7ff ff8e 	bl	8001094 <NVIC_EncodePriority>
 8001178:	4602      	mov	r2, r0
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	4611      	mov	r1, r2
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff ff5d 	bl	8001040 <__NVIC_SetPriority>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ffb0 	bl	80010fc <SysTick_Config>
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	; 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011b6:	2300      	movs	r3, #0
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e177      	b.n	80014b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8166 	bne.w	80014ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d005      	beq.n	80011fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d130      	bne.n	800125c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	2203      	movs	r2, #3
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001230:	2201      	movs	r2, #1
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	091b      	lsrs	r3, r3, #4
 8001246:	f003 0201 	and.w	r2, r3, #1
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b03      	cmp	r3, #3
 8001266:	d017      	beq.n	8001298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d123      	bne.n	80012ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	f003 0307 	and.w	r3, r3, #7
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	08da      	lsrs	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3208      	adds	r2, #8
 80012e6:	69b9      	ldr	r1, [r7, #24]
 80012e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	2203      	movs	r2, #3
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0203 	and.w	r2, r3, #3
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80c0 	beq.w	80014ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b66      	ldr	r3, [pc, #408]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a65      	ldr	r2, [pc, #404]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b63      	ldr	r3, [pc, #396]	; (80014cc <HAL_GPIO_Init+0x324>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800134a:	4a61      	ldr	r2, [pc, #388]	; (80014d0 <HAL_GPIO_Init+0x328>)
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3302      	adds	r3, #2
 8001352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	220f      	movs	r2, #15
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <HAL_GPIO_Init+0x32c>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d037      	beq.n	80013e6 <HAL_GPIO_Init+0x23e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_GPIO_Init+0x330>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d031      	beq.n	80013e2 <HAL_GPIO_Init+0x23a>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a56      	ldr	r2, [pc, #344]	; (80014dc <HAL_GPIO_Init+0x334>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d02b      	beq.n	80013de <HAL_GPIO_Init+0x236>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a55      	ldr	r2, [pc, #340]	; (80014e0 <HAL_GPIO_Init+0x338>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d025      	beq.n	80013da <HAL_GPIO_Init+0x232>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a54      	ldr	r2, [pc, #336]	; (80014e4 <HAL_GPIO_Init+0x33c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d01f      	beq.n	80013d6 <HAL_GPIO_Init+0x22e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a53      	ldr	r2, [pc, #332]	; (80014e8 <HAL_GPIO_Init+0x340>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d019      	beq.n	80013d2 <HAL_GPIO_Init+0x22a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <HAL_GPIO_Init+0x344>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d013      	beq.n	80013ce <HAL_GPIO_Init+0x226>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <HAL_GPIO_Init+0x348>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00d      	beq.n	80013ca <HAL_GPIO_Init+0x222>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a50      	ldr	r2, [pc, #320]	; (80014f4 <HAL_GPIO_Init+0x34c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d007      	beq.n	80013c6 <HAL_GPIO_Init+0x21e>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_GPIO_Init+0x350>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d101      	bne.n	80013c2 <HAL_GPIO_Init+0x21a>
 80013be:	2309      	movs	r3, #9
 80013c0:	e012      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013c2:	230a      	movs	r3, #10
 80013c4:	e010      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013c6:	2308      	movs	r3, #8
 80013c8:	e00e      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013ca:	2307      	movs	r3, #7
 80013cc:	e00c      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e00a      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e008      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013d6:	2304      	movs	r3, #4
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013da:	2303      	movs	r3, #3
 80013dc:	e004      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013de:	2302      	movs	r3, #2
 80013e0:	e002      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x240>
 80013e6:	2300      	movs	r3, #0
 80013e8:	69fa      	ldr	r2, [r7, #28]
 80013ea:	f002 0203 	and.w	r2, r2, #3
 80013ee:	0092      	lsls	r2, r2, #2
 80013f0:	4093      	lsls	r3, r2
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013f8:	4935      	ldr	r1, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x328>)
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	3302      	adds	r3, #2
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_GPIO_Init+0x354>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800142a:	4a34      	ldr	r2, [pc, #208]	; (80014fc <HAL_GPIO_Init+0x354>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_GPIO_Init+0x354>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001454:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_GPIO_Init+0x354>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_GPIO_Init+0x354>)
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800147e:	4a1f      	ldr	r2, [pc, #124]	; (80014fc <HAL_GPIO_Init+0x354>)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001484:	4b1d      	ldr	r3, [pc, #116]	; (80014fc <HAL_GPIO_Init+0x354>)
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014a8:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_GPIO_Init+0x354>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	f67f ae84 	bls.w	80011c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40020000 	.word	0x40020000
 80014d8:	40020400 	.word	0x40020400
 80014dc:	40020800 	.word	0x40020800
 80014e0:	40020c00 	.word	0x40020c00
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40021400 	.word	0x40021400
 80014ec:	40021800 	.word	0x40021800
 80014f0:	40021c00 	.word	0x40021c00
 80014f4:	40022000 	.word	0x40022000
 80014f8:	40022400 	.word	0x40022400
 80014fc:	40013c00 	.word	0x40013c00

08001500 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691a      	ldr	r2, [r3, #16]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	4013      	ands	r3, r2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d002      	beq.n	800151e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001518:	2301      	movs	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	e001      	b.n	8001522 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001522:	7bfb      	ldrb	r3, [r7, #15]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43d9      	mvns	r1, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e12b      	b.n	8001802 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d106      	bne.n	80015c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 fc88 	bl	8001ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015fc:	f001 f974 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8001600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4a81      	ldr	r2, [pc, #516]	; (800180c <HAL_I2C_Init+0x274>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d807      	bhi.n	800161c <HAL_I2C_Init+0x84>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4a80      	ldr	r2, [pc, #512]	; (8001810 <HAL_I2C_Init+0x278>)
 8001610:	4293      	cmp	r3, r2
 8001612:	bf94      	ite	ls
 8001614:	2301      	movls	r3, #1
 8001616:	2300      	movhi	r3, #0
 8001618:	b2db      	uxtb	r3, r3
 800161a:	e006      	b.n	800162a <HAL_I2C_Init+0x92>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a7d      	ldr	r2, [pc, #500]	; (8001814 <HAL_I2C_Init+0x27c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	bf94      	ite	ls
 8001624:	2301      	movls	r3, #1
 8001626:	2300      	movhi	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0e7      	b.n	8001802 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4a78      	ldr	r2, [pc, #480]	; (8001818 <HAL_I2C_Init+0x280>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	430a      	orrs	r2, r1
 8001650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a6a      	ldr	r2, [pc, #424]	; (800180c <HAL_I2C_Init+0x274>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d802      	bhi.n	800166c <HAL_I2C_Init+0xd4>
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	3301      	adds	r3, #1
 800166a:	e009      	b.n	8001680 <HAL_I2C_Init+0xe8>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	4a69      	ldr	r2, [pc, #420]	; (800181c <HAL_I2C_Init+0x284>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	099b      	lsrs	r3, r3, #6
 800167e:	3301      	adds	r3, #1
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	430b      	orrs	r3, r1
 8001686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001692:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	495c      	ldr	r1, [pc, #368]	; (800180c <HAL_I2C_Init+0x274>)
 800169c:	428b      	cmp	r3, r1
 800169e:	d819      	bhi.n	80016d4 <HAL_I2C_Init+0x13c>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e59      	subs	r1, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ae:	1c59      	adds	r1, r3, #1
 80016b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80016b4:	400b      	ands	r3, r1
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d00a      	beq.n	80016d0 <HAL_I2C_Init+0x138>
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1e59      	subs	r1, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016ce:	e051      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 80016d0:	2304      	movs	r3, #4
 80016d2:	e04f      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d111      	bne.n	8001700 <HAL_I2C_Init+0x168>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	1e58      	subs	r0, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	2301      	moveq	r3, #1
 80016fa:	2300      	movne	r3, #0
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	e012      	b.n	8001726 <HAL_I2C_Init+0x18e>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_I2C_Init+0x196>
 800172a:	2301      	movs	r3, #1
 800172c:	e022      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10e      	bne.n	8001754 <HAL_I2C_Init+0x1bc>
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1e58      	subs	r0, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6859      	ldr	r1, [r3, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	440b      	add	r3, r1
 8001744:	fbb0 f3f3 	udiv	r3, r0, r3
 8001748:	3301      	adds	r3, #1
 800174a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800174e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001752:	e00f      	b.n	8001774 <HAL_I2C_Init+0x1dc>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	440b      	add	r3, r1
 8001762:	0099      	lsls	r1, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	fbb0 f3f3 	udiv	r3, r0, r3
 800176a:	3301      	adds	r3, #1
 800176c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001770:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001774:	6879      	ldr	r1, [r7, #4]
 8001776:	6809      	ldr	r1, [r1, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6911      	ldr	r1, [r2, #16]
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68d2      	ldr	r2, [r2, #12]
 80017ae:	4311      	orrs	r1, r2
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	430b      	orrs	r3, r1
 80017b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695a      	ldr	r2, [r3, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0201 	orr.w	r2, r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	000186a0 	.word	0x000186a0
 8001810:	001e847f 	.word	0x001e847f
 8001814:	003d08ff 	.word	0x003d08ff
 8001818:	431bde83 	.word	0x431bde83
 800181c:	10624dd3 	.word	0x10624dd3

08001820 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af02      	add	r7, sp, #8
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	461a      	mov	r2, r3
 800182c:	460b      	mov	r3, r1
 800182e:	817b      	strh	r3, [r7, #10]
 8001830:	4613      	mov	r3, r2
 8001832:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001834:	f7ff fba2 	bl	8000f7c <HAL_GetTick>
 8001838:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001840:	b2db      	uxtb	r3, r3
 8001842:	2b20      	cmp	r3, #32
 8001844:	f040 80e0 	bne.w	8001a08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2319      	movs	r3, #25
 800184e:	2201      	movs	r2, #1
 8001850:	4970      	ldr	r1, [pc, #448]	; (8001a14 <HAL_I2C_Master_Transmit+0x1f4>)
 8001852:	68f8      	ldr	r0, [r7, #12]
 8001854:	f000 f964 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800185e:	2302      	movs	r3, #2
 8001860:	e0d3      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_I2C_Master_Transmit+0x50>
 800186c:	2302      	movs	r3, #2
 800186e:	e0cc      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d007      	beq.n	8001896 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2221      	movs	r2, #33	; 0x21
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2210      	movs	r2, #16
 80018b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	893a      	ldrh	r2, [r7, #8]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4a50      	ldr	r2, [pc, #320]	; (8001a18 <HAL_I2C_Master_Transmit+0x1f8>)
 80018d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018d8:	8979      	ldrh	r1, [r7, #10]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	6a3a      	ldr	r2, [r7, #32]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f000 f89c 	bl	8001a1c <I2C_MasterRequestWrite>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e08d      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001904:	e066      	b.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	6a39      	ldr	r1, [r7, #32]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f000 f9de 	bl	8001ccc <I2C_WaitOnTXEFlagUntilTimeout>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00d      	beq.n	8001932 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	2b04      	cmp	r3, #4
 800191c:	d107      	bne.n	800192e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e06b      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b04      	cmp	r3, #4
 800196e:	d11b      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	6a39      	ldr	r1, [r7, #32]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f000 f9ce 	bl	8001d4e <I2C_WaitOnBTFFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00d      	beq.n	80019d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d107      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e01a      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d194      	bne.n	8001906 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	e000      	b.n	8001a0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a08:	2302      	movs	r3, #2
  }
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	00100002 	.word	0x00100002
 8001a18:	ffff0000 	.word	0xffff0000

08001a1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	607a      	str	r2, [r7, #4]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d006      	beq.n	8001a46 <I2C_MasterRequestWrite+0x2a>
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d003      	beq.n	8001a46 <I2C_MasterRequestWrite+0x2a>
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a44:	d108      	bne.n	8001a58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	e00b      	b.n	8001a70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	2b12      	cmp	r3, #18
 8001a5e:	d107      	bne.n	8001a70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f84f 	bl	8001b20 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a96:	d103      	bne.n	8001aa0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e035      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aac:	d108      	bne.n	8001ac0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aae:	897b      	ldrh	r3, [r7, #10]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	e01b      	b.n	8001af8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ac0:	897b      	ldrh	r3, [r7, #10]
 8001ac2:	11db      	asrs	r3, r3, #7
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 0306 	and.w	r3, r3, #6
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f063 030f 	orn	r3, r3, #15
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	490e      	ldr	r1, [pc, #56]	; (8001b18 <I2C_MasterRequestWrite+0xfc>)
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f875 	bl	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e010      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aee:	897b      	ldrh	r3, [r7, #10]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4907      	ldr	r1, [pc, #28]	; (8001b1c <I2C_MasterRequestWrite+0x100>)
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f865 	bl	8001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	00010008 	.word	0x00010008
 8001b1c:	00010002 	.word	0x00010002

08001b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b30:	e025      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b38:	d021      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7ff fa1f 	bl	8000f7c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d302      	bcc.n	8001b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d116      	bne.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2220      	movs	r2, #32
 8001b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f043 0220 	orr.w	r2, r3, #32
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e023      	b.n	8001bc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d10d      	bne.n	8001ba4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	43da      	mvns	r2, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4013      	ands	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	e00c      	b.n	8001bbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	43da      	mvns	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf0c      	ite	eq
 8001bb6:	2301      	moveq	r3, #1
 8001bb8:	2300      	movne	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d0b6      	beq.n	8001b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b084      	sub	sp, #16
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bdc:	e051      	b.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bec:	d123      	bne.n	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2220      	movs	r2, #32
 8001c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f043 0204 	orr.w	r2, r3, #4
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e046      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c3c:	d021      	beq.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3e:	f7ff f99d 	bl	8000f7c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d302      	bcc.n	8001c54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0220 	orr.w	r2, r3, #32
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e020      	b.n	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d10c      	bne.n	8001ca6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf14      	ite	ne
 8001c9e:	2301      	movne	r3, #1
 8001ca0:	2300      	moveq	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	e00b      	b.n	8001cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	43da      	mvns	r2, r3
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d18d      	bne.n	8001bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd8:	e02d      	b.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 f878 	bl	8001dd0 <I2C_IsAcknowledgeFailed>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e02d      	b.n	8001d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cf0:	d021      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf2:	f7ff f943 	bl	8000f7c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d302      	bcc.n	8001d08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d116      	bne.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f043 0220 	orr.w	r2, r3, #32
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e007      	b.n	8001d46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d40:	2b80      	cmp	r3, #128	; 0x80
 8001d42:	d1ca      	bne.n	8001cda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b084      	sub	sp, #16
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d5a:	e02d      	b.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d5c:	68f8      	ldr	r0, [r7, #12]
 8001d5e:	f000 f837 	bl	8001dd0 <I2C_IsAcknowledgeFailed>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e02d      	b.n	8001dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d72:	d021      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d74:	f7ff f902 	bl	8000f7c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d302      	bcc.n	8001d8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d116      	bne.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	f043 0220 	orr.w	r2, r3, #32
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e007      	b.n	8001dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0304 	and.w	r3, r3, #4
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d1ca      	bne.n	8001d5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de6:	d11b      	bne.n	8001e20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001df0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08a      	sub	sp, #40	; 0x28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e5e:	f043 0308 	orr.w	r3, r3, #8
 8001e62:	6313      	str	r3, [r2, #48]	; 0x30
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_UART_MspInit+0x9c>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e88:	60bb      	str	r3, [r7, #8]
 8001e8a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4809      	ldr	r0, [pc, #36]	; (8001ed0 <HAL_UART_MspInit+0xa0>)
 8001eaa:	f7ff f97d 	bl	80011a8 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8001eb8:	f107 0314 	add.w	r3, r7, #20
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <HAL_UART_MspInit+0xa0>)
 8001ec0:	f7ff f972 	bl	80011a8 <HAL_GPIO_Init>
}
 8001ec4:	bf00      	nop
 8001ec6:	3728      	adds	r7, #40	; 0x28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020c00 	.word	0x40020c00

08001ed4 <HAL_I2C_MspInit>:
}

/*

*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef gpio_I2C = {0};
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	6313      	str	r3, [r2, #48]	; 0x30
 8001efc:	4b14      	ldr	r3, [pc, #80]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	693b      	ldr	r3, [r7, #16]

	gpio_I2C.Pin = I2Cx_SCL_PIN | I2Cx_SDA_PIN;
 8001f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0c:	617b      	str	r3, [r7, #20]
	gpio_I2C.Mode = GPIO_MODE_AF_OD;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	61bb      	str	r3, [r7, #24]
	gpio_I2C.Pull= GPIO_PULLUP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61fb      	str	r3, [r7, #28]
	gpio_I2C.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
	gpio_I2C.Alternate = GPIO_AF4_I2C1;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_GPIO_Init(I2Cx_SDA_GPIO_PORT,&gpio_I2C);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	480b      	ldr	r0, [pc, #44]	; (8001f54 <HAL_I2C_MspInit+0x80>)
 8001f26:	f7ff f93f 	bl	80011a8 <HAL_GPIO_Init>

	__HAL_RCC_I2C1_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001f34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f38:	6413      	str	r3, [r2, #64]	; 0x40
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_I2C_MspInit+0x7c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
}
 8001f46:	bf00      	nop
 8001f48:	3728      	adds	r7, #40	; 0x28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020400 	.word	0x40020400

08001f58 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0

}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <HAL_PWREx_EnableOverDrive+0x94>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f94:	f7fe fff2 	bl	8000f7c <HAL_GetTick>
 8001f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f9a:	e009      	b.n	8001fb0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f9c:	f7fe ffee 	bl	8000f7c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001faa:	d901      	bls.n	8001fb0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e01f      	b.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fb0:	4b13      	ldr	r3, [pc, #76]	; (8002000 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fbc:	d1ee      	bne.n	8001f9c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fc4:	f7fe ffda 	bl	8000f7c <HAL_GetTick>
 8001fc8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fca:	e009      	b.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fcc:	f7fe ffd6 	bl	8000f7c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fda:	d901      	bls.n	8001fe0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e007      	b.n	8001ff0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001fec:	d1ee      	bne.n	8001fcc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	420e0040 	.word	0x420e0040
 8002000:	40007000 	.word	0x40007000
 8002004:	420e0044 	.word	0x420e0044

08002008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e267      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d075      	beq.n	8002112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002026:	4b88      	ldr	r3, [pc, #544]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b04      	cmp	r3, #4
 8002030:	d00c      	beq.n	800204c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800203a:	2b08      	cmp	r3, #8
 800203c:	d112      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203e:	4b82      	ldr	r3, [pc, #520]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800204a:	d10b      	bne.n	8002064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	4b7e      	ldr	r3, [pc, #504]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05b      	beq.n	8002110 <HAL_RCC_OscConfig+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d157      	bne.n	8002110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e242      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d106      	bne.n	800207c <HAL_RCC_OscConfig+0x74>
 800206e:	4b76      	ldr	r3, [pc, #472]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a75      	ldr	r2, [pc, #468]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e01d      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002084:	d10c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x98>
 8002086:	4b70      	ldr	r3, [pc, #448]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6f      	ldr	r2, [pc, #444]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800208c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b6d      	ldr	r3, [pc, #436]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a6c      	ldr	r2, [pc, #432]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_RCC_OscConfig+0xb0>
 80020a0:	4b69      	ldr	r3, [pc, #420]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a68      	ldr	r2, [pc, #416]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	4b66      	ldr	r3, [pc, #408]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a65      	ldr	r2, [pc, #404]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d013      	beq.n	80020e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c0:	f7fe ff5c 	bl	8000f7c <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c8:	f7fe ff58 	bl	8000f7c <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e207      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b5b      	ldr	r3, [pc, #364]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0xc0>
 80020e6:	e014      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe ff48 	bl	8000f7c <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020f0:	f7fe ff44 	bl	8000f7c <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e1f3      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002102:	4b51      	ldr	r3, [pc, #324]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_OscConfig+0xe8>
 800210e:	e000      	b.n	8002112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d063      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002132:	2b08      	cmp	r3, #8
 8002134:	d11c      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d116      	bne.n	8002170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002142:	4b41      	ldr	r3, [pc, #260]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d005      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d001      	beq.n	800215a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e1c7      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4937      	ldr	r1, [pc, #220]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800216e:	e03a      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <HAL_RCC_OscConfig+0x244>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217e:	f7fe fefd 	bl	8000f7c <HAL_GetTick>
 8002182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002186:	f7fe fef9 	bl	8000f7c <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e1a8      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0302 	and.w	r3, r3, #2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4925      	ldr	r1, [pc, #148]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	600b      	str	r3, [r1, #0]
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ba:	4b24      	ldr	r3, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x244>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7fe fedc 	bl	8000f7c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c8:	f7fe fed8 	bl	8000f7c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e187      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021da:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d036      	beq.n	8002260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d016      	beq.n	8002228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7fe febc 	bl	8000f7c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7fe feb8 	bl	8000f7c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e167      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <HAL_RCC_OscConfig+0x240>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x200>
 8002226:	e01b      	b.n	8002260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_OscConfig+0x248>)
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222e:	f7fe fea5 	bl	8000f7c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	e00e      	b.n	8002254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002236:	f7fe fea1 	bl	8000f7c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d907      	bls.n	8002254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e150      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002248:	40023800 	.word	0x40023800
 800224c:	42470000 	.word	0x42470000
 8002250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	4b88      	ldr	r3, [pc, #544]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1ea      	bne.n	8002236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 8097 	beq.w	800239c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002272:	4b81      	ldr	r3, [pc, #516]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d10f      	bne.n	800229e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	4a7c      	ldr	r2, [pc, #496]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	4b77      	ldr	r3, [pc, #476]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d118      	bne.n	80022dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022aa:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a73      	ldr	r2, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fe61 	bl	8000f7c <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022be:	f7fe fe5d 	bl	8000f7c <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e10c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x474>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0f0      	beq.n	80022be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x2ea>
 80022e4:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022e8:	4a63      	ldr	r2, [pc, #396]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6713      	str	r3, [r2, #112]	; 0x70
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x30c>
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	4a5e      	ldr	r2, [pc, #376]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6713      	str	r3, [r2, #112]	; 0x70
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	4a5b      	ldr	r2, [pc, #364]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6713      	str	r3, [r2, #112]	; 0x70
 8002312:	e00b      	b.n	800232c <HAL_RCC_OscConfig+0x324>
 8002314:	4b58      	ldr	r3, [pc, #352]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002318:	4a57      	ldr	r2, [pc, #348]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6713      	str	r3, [r2, #112]	; 0x70
 8002320:	4b55      	ldr	r3, [pc, #340]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a54      	ldr	r2, [pc, #336]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002326:	f023 0304 	bic.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fe22 	bl	8000f7c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fe1e 	bl	8000f7c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e0cb      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ee      	beq.n	800233c <HAL_RCC_OscConfig+0x334>
 800235e:	e014      	b.n	800238a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002360:	f7fe fe0c 	bl	8000f7c <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002366:	e00a      	b.n	800237e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002368:	f7fe fe08 	bl	8000f7c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	f241 3288 	movw	r2, #5000	; 0x1388
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e0b5      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1ee      	bne.n	8002368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002390:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4a38      	ldr	r2, [pc, #224]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f000 80a1 	beq.w	80024e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a6:	4b34      	ldr	r3, [pc, #208]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d05c      	beq.n	800246c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d141      	bne.n	800243e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fddc 	bl	8000f7c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c8:	f7fe fdd8 	bl	8000f7c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e087      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69da      	ldr	r2, [r3, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	019b      	lsls	r3, r3, #6
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	085b      	lsrs	r3, r3, #1
 80023fe:	3b01      	subs	r3, #1
 8002400:	041b      	lsls	r3, r3, #16
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	491b      	ldr	r1, [pc, #108]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe fdb1 	bl	8000f7c <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fdad 	bl	8000f7c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e05c      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x416>
 800243c:	e054      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_RCC_OscConfig+0x478>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002444:	f7fe fd9a 	bl	8000f7c <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244c:	f7fe fd96 	bl	8000f7c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e045      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_RCC_OscConfig+0x470>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1f0      	bne.n	800244c <HAL_RCC_OscConfig+0x444>
 800246a:	e03d      	b.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d107      	bne.n	8002484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e038      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
 8002478:	40023800 	.word	0x40023800
 800247c:	40007000 	.word	0x40007000
 8002480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002484:	4b1b      	ldr	r3, [pc, #108]	; (80024f4 <HAL_RCC_OscConfig+0x4ec>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d028      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249c:	429a      	cmp	r2, r3
 800249e:	d121      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d11a      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024b4:	4013      	ands	r3, r2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024bc:	4293      	cmp	r3, r2
 80024be:	d111      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	3b01      	subs	r3, #1
 80024ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40023800 	.word	0x40023800

080024f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e0cc      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800250c:	4b68      	ldr	r3, [pc, #416]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d90c      	bls.n	8002534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b65      	ldr	r3, [pc, #404]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b63      	ldr	r3, [pc, #396]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b8      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4a58      	ldr	r2, [pc, #352]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	4a52      	ldr	r2, [pc, #328]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800256a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800256e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002570:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	494d      	ldr	r1, [pc, #308]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b00      	cmp	r3, #0
 800258c:	d044      	beq.n	8002618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d119      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e07f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e067      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d6:	4b37      	ldr	r3, [pc, #220]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f023 0203 	bic.w	r2, r3, #3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4934      	ldr	r1, [pc, #208]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fcc8 	bl	8000f7c <HAL_GetTick>
 80025ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ee:	e00a      	b.n	8002606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f0:	f7fe fcc4 	bl	8000f7c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e04f      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 020c 	and.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1eb      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b25      	ldr	r3, [pc, #148]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d20c      	bcs.n	8002640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b22      	ldr	r3, [pc, #136]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e032      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800264c:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4916      	ldr	r1, [pc, #88]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d009      	beq.n	800267e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	490e      	ldr	r1, [pc, #56]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800267e:	f000 f821 	bl	80026c4 <HAL_RCC_GetSysClockFreq>
 8002682:	4602      	mov	r2, r0
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 030f 	and.w	r3, r3, #15
 800268e:	490a      	ldr	r1, [pc, #40]	; (80026b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002690:	5ccb      	ldrb	r3, [r1, r3]
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a09      	ldr	r2, [pc, #36]	; (80026bc <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800269a:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_ClockConfig+0x1c8>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe fc28 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023c00 	.word	0x40023c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	0800563c 	.word	0x0800563c
 80026bc:	2000000c 	.word	0x2000000c
 80026c0:	20000010 	.word	0x20000010

080026c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b094      	sub	sp, #80	; 0x50
 80026ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	647b      	str	r3, [r7, #68]	; 0x44
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d4:	2300      	movs	r3, #0
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026dc:	4b79      	ldr	r3, [pc, #484]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d00d      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x40>
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	f200 80e1 	bhi.w	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x34>
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d003      	beq.n	80026fe <HAL_RCC_GetSysClockFreq+0x3a>
 80026f6:	e0db      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f8:	4b73      	ldr	r3, [pc, #460]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80026fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026fc:	e0db      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fe:	4b73      	ldr	r3, [pc, #460]	; (80028cc <HAL_RCC_GetSysClockFreq+0x208>)
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002702:	e0d8      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4b6f      	ldr	r3, [pc, #444]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d063      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	099b      	lsrs	r3, r3, #6
 8002720:	2200      	movs	r2, #0
 8002722:	63bb      	str	r3, [r7, #56]	; 0x38
 8002724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
 8002732:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002736:	4622      	mov	r2, r4
 8002738:	462b      	mov	r3, r5
 800273a:	f04f 0000 	mov.w	r0, #0
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	0159      	lsls	r1, r3, #5
 8002744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002748:	0150      	lsls	r0, r2, #5
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4621      	mov	r1, r4
 8002750:	1a51      	subs	r1, r2, r1
 8002752:	6139      	str	r1, [r7, #16]
 8002754:	4629      	mov	r1, r5
 8002756:	eb63 0301 	sbc.w	r3, r3, r1
 800275a:	617b      	str	r3, [r7, #20]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002768:	4659      	mov	r1, fp
 800276a:	018b      	lsls	r3, r1, #6
 800276c:	4651      	mov	r1, sl
 800276e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002772:	4651      	mov	r1, sl
 8002774:	018a      	lsls	r2, r1, #6
 8002776:	4651      	mov	r1, sl
 8002778:	ebb2 0801 	subs.w	r8, r2, r1
 800277c:	4659      	mov	r1, fp
 800277e:	eb63 0901 	sbc.w	r9, r3, r1
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800278e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002796:	4690      	mov	r8, r2
 8002798:	4699      	mov	r9, r3
 800279a:	4623      	mov	r3, r4
 800279c:	eb18 0303 	adds.w	r3, r8, r3
 80027a0:	60bb      	str	r3, [r7, #8]
 80027a2:	462b      	mov	r3, r5
 80027a4:	eb49 0303 	adc.w	r3, r9, r3
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027b6:	4629      	mov	r1, r5
 80027b8:	024b      	lsls	r3, r1, #9
 80027ba:	4621      	mov	r1, r4
 80027bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027c0:	4621      	mov	r1, r4
 80027c2:	024a      	lsls	r2, r1, #9
 80027c4:	4610      	mov	r0, r2
 80027c6:	4619      	mov	r1, r3
 80027c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ca:	2200      	movs	r2, #0
 80027cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80027d4:	f7fd fd64 	bl	80002a0 <__aeabi_uldivmod>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4613      	mov	r3, r2
 80027de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e0:	e058      	b.n	8002894 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	2200      	movs	r2, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	4611      	mov	r1, r2
 80027ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027f2:	623b      	str	r3, [r7, #32]
 80027f4:	2300      	movs	r3, #0
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
 80027f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027fc:	4642      	mov	r2, r8
 80027fe:	464b      	mov	r3, r9
 8002800:	f04f 0000 	mov.w	r0, #0
 8002804:	f04f 0100 	mov.w	r1, #0
 8002808:	0159      	lsls	r1, r3, #5
 800280a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800280e:	0150      	lsls	r0, r2, #5
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4641      	mov	r1, r8
 8002816:	ebb2 0a01 	subs.w	sl, r2, r1
 800281a:	4649      	mov	r1, r9
 800281c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800282c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002830:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002834:	ebb2 040a 	subs.w	r4, r2, sl
 8002838:	eb63 050b 	sbc.w	r5, r3, fp
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	00eb      	lsls	r3, r5, #3
 8002846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800284a:	00e2      	lsls	r2, r4, #3
 800284c:	4614      	mov	r4, r2
 800284e:	461d      	mov	r5, r3
 8002850:	4643      	mov	r3, r8
 8002852:	18e3      	adds	r3, r4, r3
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	464b      	mov	r3, r9
 8002858:	eb45 0303 	adc.w	r3, r5, r3
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4500 	ldrd	r4, r5, [r7]
 800286a:	4629      	mov	r1, r5
 800286c:	028b      	lsls	r3, r1, #10
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002874:	4621      	mov	r1, r4
 8002876:	028a      	lsls	r2, r1, #10
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	61bb      	str	r3, [r7, #24]
 8002882:	61fa      	str	r2, [r7, #28]
 8002884:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002888:	f7fd fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c1b      	lsrs	r3, r3, #16
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	3301      	adds	r3, #1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80028a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3750      	adds	r7, #80	; 0x50
 80028bc:	46bd      	mov	sp, r7
 80028be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	0800564c 	.word	0x0800564c

08002910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002914:	f7ff ffdc 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0b5b      	lsrs	r3, r3, #13
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	0800564c 	.word	0x0800564c

08002938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d101      	bne.n	800294a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e041      	b.n	80029ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d106      	bne.n	8002964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fd feb6 	bl	80006d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3304      	adds	r3, #4
 8002974:	4619      	mov	r1, r3
 8002976:	4610      	mov	r0, r2
 8002978:	f000 f966 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d001      	beq.n	80029f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04e      	b.n	8002a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d022      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d01d      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d018      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a1e      	ldr	r2, [pc, #120]	; (8002aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d013      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d00e      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1b      	ldr	r2, [pc, #108]	; (8002aac <HAL_TIM_Base_Start_IT+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d009      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a19      	ldr	r2, [pc, #100]	; (8002ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d004      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x80>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d111      	bne.n	8002a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d010      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0201 	orr.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7a:	e007      	b.n	8002a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f042 0201 	orr.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40001800 	.word	0x40001800

08002ab8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	e0b4      	b.n	8002c3e <HAL_TIM_ConfigClockSource+0x186>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002afa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0c:	d03e      	beq.n	8002b8c <HAL_TIM_ConfigClockSource+0xd4>
 8002b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b12:	f200 8087 	bhi.w	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b1a:	f000 8086 	beq.w	8002c2a <HAL_TIM_ConfigClockSource+0x172>
 8002b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b22:	d87f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b24:	2b70      	cmp	r3, #112	; 0x70
 8002b26:	d01a      	beq.n	8002b5e <HAL_TIM_ConfigClockSource+0xa6>
 8002b28:	2b70      	cmp	r3, #112	; 0x70
 8002b2a:	d87b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	2b60      	cmp	r3, #96	; 0x60
 8002b2e:	d050      	beq.n	8002bd2 <HAL_TIM_ConfigClockSource+0x11a>
 8002b30:	2b60      	cmp	r3, #96	; 0x60
 8002b32:	d877      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b34:	2b50      	cmp	r3, #80	; 0x50
 8002b36:	d03c      	beq.n	8002bb2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b38:	2b50      	cmp	r3, #80	; 0x50
 8002b3a:	d873      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d058      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x13a>
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d86f      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b44:	2b30      	cmp	r3, #48	; 0x30
 8002b46:	d064      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	2b30      	cmp	r3, #48	; 0x30
 8002b4a:	d86b      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d060      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x15a>
 8002b50:	2b20      	cmp	r3, #32
 8002b52:	d867      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d05c      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x15a>
 8002b58:	2b10      	cmp	r3, #16
 8002b5a:	d05a      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	e062      	b.n	8002c24 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	6899      	ldr	r1, [r3, #8]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f000 f985 	bl	8002e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	609a      	str	r2, [r3, #8]
      break;
 8002b8a:	e04f      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f000 f96e 	bl	8002e7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bae:	609a      	str	r2, [r3, #8]
      break;
 8002bb0:	e03c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f000 f8e2 	bl	8002d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2150      	movs	r1, #80	; 0x50
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 f93b 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002bd0:	e02c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	6859      	ldr	r1, [r3, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f000 f901 	bl	8002de6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2160      	movs	r1, #96	; 0x60
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f92b 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002bf0:	e01c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8c2 	bl	8002d88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2140      	movs	r1, #64	; 0x40
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f91b 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e00c      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 f912 	bl	8002e46 <TIM_ITRx_SetConfig>
      break;
 8002c22:	e003      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
      break;
 8002c28:	e000      	b.n	8002c2c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a40      	ldr	r2, [pc, #256]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a3c      	ldr	r2, [pc, #240]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a2f      	ldr	r2, [pc, #188]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca8:	d027      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a2c      	ldr	r2, [pc, #176]	; (8002d60 <TIM_Base_SetConfig+0x118>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d023      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <TIM_Base_SetConfig+0x11c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a2a      	ldr	r2, [pc, #168]	; (8002d68 <TIM_Base_SetConfig+0x120>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a29      	ldr	r2, [pc, #164]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <TIM_Base_SetConfig+0x128>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a27      	ldr	r2, [pc, #156]	; (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <TIM_Base_SetConfig+0x130>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a25      	ldr	r2, [pc, #148]	; (8002d7c <TIM_Base_SetConfig+0x134>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a24      	ldr	r2, [pc, #144]	; (8002d80 <TIM_Base_SetConfig+0x138>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a23      	ldr	r2, [pc, #140]	; (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0a      	ldr	r2, [pc, #40]	; (8002d5c <TIM_Base_SetConfig+0x114>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0c      	ldr	r2, [pc, #48]	; (8002d6c <TIM_Base_SetConfig+0x124>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40010000 	.word	0x40010000
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800
 8002d68:	40000c00 	.word	0x40000c00
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40014000 	.word	0x40014000
 8002d74:	40014400 	.word	0x40014400
 8002d78:	40014800 	.word	0x40014800
 8002d7c:	40001800 	.word	0x40001800
 8002d80:	40001c00 	.word	0x40001c00
 8002d84:	40002000 	.word	0x40002000

08002d88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002db2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	f023 030a 	bic.w	r3, r3, #10
 8002dc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	60f8      	str	r0, [r7, #12]
 8002dee:	60b9      	str	r1, [r7, #8]
 8002df0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0210 	bic.w	r2, r3, #16
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	031b      	lsls	r3, r3, #12
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	621a      	str	r2, [r3, #32]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b085      	sub	sp, #20
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
 8002e4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f043 0307 	orr.w	r3, r3, #7
 8002e68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
 8002e88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	021a      	lsls	r2, r3, #8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	697a      	ldr	r2, [r7, #20]
 8002eae:	609a      	str	r2, [r3, #8]
}
 8002eb0:	bf00      	nop
 8002eb2:	371c      	adds	r7, #28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e05a      	b.n	8002f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d01d      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d018      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1b      	ldr	r2, [pc, #108]	; (8002fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d00e      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a18      	ldr	r2, [pc, #96]	; (8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d009      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d004      	beq.n	8002f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10c      	bne.n	8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68ba      	ldr	r2, [r7, #8]
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	40010000 	.word	0x40010000
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40010400 	.word	0x40010400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40001800 	.word	0x40001800

08002fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e03f      	b.n	8003046 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe ff28 	bl	8001e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 f929 	bl	8003250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800300c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800301c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800302c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b08a      	sub	sp, #40	; 0x28
 8003052:	af02      	add	r7, sp, #8
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	d17c      	bne.n	8003168 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_UART_Transmit+0x2c>
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e075      	b.n	800316a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit+0x3e>
 8003088:	2302      	movs	r3, #2
 800308a:	e06e      	b.n	800316a <HAL_UART_Transmit+0x11c>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2221      	movs	r2, #33	; 0x21
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a2:	f7fd ff6b 	bl	8000f7c <HAL_GetTick>
 80030a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	88fa      	ldrh	r2, [r7, #6]
 80030b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030bc:	d108      	bne.n	80030d0 <HAL_UART_Transmit+0x82>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d104      	bne.n	80030d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	e003      	b.n	80030d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80030e0:	e02a      	b.n	8003138 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2180      	movs	r1, #128	; 0x80
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f840 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e036      	b.n	800316a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10b      	bne.n	800311a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003110:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	3302      	adds	r3, #2
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e007      	b.n	800312a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	781a      	ldrb	r2, [r3, #0]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800312e:	b29b      	uxth	r3, r3
 8003130:	3b01      	subs	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1cf      	bne.n	80030e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2140      	movs	r1, #64	; 0x40
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 f810 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e006      	b.n	800316a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b090      	sub	sp, #64	; 0x40
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	e050      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318a:	d04c      	beq.n	8003226 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800318c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003192:	f7fd fef3 	bl	8000f7c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800319e:	429a      	cmp	r2, r3
 80031a0:	d241      	bcs.n	8003226 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	330c      	adds	r3, #12
 80031a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	e853 3f00 	ldrex	r3, [r3]
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031c2:	637a      	str	r2, [r7, #52]	; 0x34
 80031c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ca:	e841 2300 	strex	r3, r2, [r1]
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3314      	adds	r3, #20
 80031dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	e853 3f00 	ldrex	r3, [r3]
 80031e4:	613b      	str	r3, [r7, #16]
   return(result);
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	3314      	adds	r3, #20
 80031f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f6:	623a      	str	r2, [r7, #32]
 80031f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fa:	69f9      	ldr	r1, [r7, #28]
 80031fc:	6a3a      	ldr	r2, [r7, #32]
 80031fe:	e841 2300 	strex	r3, r2, [r1]
 8003202:	61bb      	str	r3, [r7, #24]
   return(result);
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1e5      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e00f      	b.n	8003246 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4013      	ands	r3, r2
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	bf0c      	ite	eq
 8003236:	2301      	moveq	r3, #1
 8003238:	2300      	movne	r3, #0
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	429a      	cmp	r2, r3
 8003242:	d09f      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3740      	adds	r7, #64	; 0x40
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003254:	b0c0      	sub	sp, #256	; 0x100
 8003256:	af00      	add	r7, sp, #0
 8003258:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	ea40 0301 	orr.w	r3, r0, r1
 8003278:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800327a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	431a      	orrs	r2, r3
 8003288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	431a      	orrs	r2, r3
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80032a8:	f021 010c 	bic.w	r1, r1, #12
 80032ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80032b6:	430b      	orrs	r3, r1
 80032b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ca:	6999      	ldr	r1, [r3, #24]
 80032cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	ea40 0301 	orr.w	r3, r0, r1
 80032d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	4b8f      	ldr	r3, [pc, #572]	; (800351c <UART_SetConfig+0x2cc>)
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d005      	beq.n	80032f0 <UART_SetConfig+0xa0>
 80032e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b8d      	ldr	r3, [pc, #564]	; (8003520 <UART_SetConfig+0x2d0>)
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d104      	bne.n	80032fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032f0:	f7ff fb0e 	bl	8002910 <HAL_RCC_GetPCLK2Freq>
 80032f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80032f8:	e003      	b.n	8003302 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032fa:	f7ff faf5 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 80032fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800330c:	f040 810c 	bne.w	8003528 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003314:	2200      	movs	r2, #0
 8003316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800331a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800331e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003322:	4622      	mov	r2, r4
 8003324:	462b      	mov	r3, r5
 8003326:	1891      	adds	r1, r2, r2
 8003328:	65b9      	str	r1, [r7, #88]	; 0x58
 800332a:	415b      	adcs	r3, r3
 800332c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800332e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003332:	4621      	mov	r1, r4
 8003334:	eb12 0801 	adds.w	r8, r2, r1
 8003338:	4629      	mov	r1, r5
 800333a:	eb43 0901 	adc.w	r9, r3, r1
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003352:	4690      	mov	r8, r2
 8003354:	4699      	mov	r9, r3
 8003356:	4623      	mov	r3, r4
 8003358:	eb18 0303 	adds.w	r3, r8, r3
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003360:	462b      	mov	r3, r5
 8003362:	eb49 0303 	adc.w	r3, r9, r3
 8003366:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800336a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003376:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800337a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800337e:	460b      	mov	r3, r1
 8003380:	18db      	adds	r3, r3, r3
 8003382:	653b      	str	r3, [r7, #80]	; 0x50
 8003384:	4613      	mov	r3, r2
 8003386:	eb42 0303 	adc.w	r3, r2, r3
 800338a:	657b      	str	r3, [r7, #84]	; 0x54
 800338c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003390:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003394:	f7fc ff84 	bl	80002a0 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4b61      	ldr	r3, [pc, #388]	; (8003524 <UART_SetConfig+0x2d4>)
 800339e:	fba3 2302 	umull	r2, r3, r3, r2
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	011c      	lsls	r4, r3, #4
 80033a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80033b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80033b8:	4642      	mov	r2, r8
 80033ba:	464b      	mov	r3, r9
 80033bc:	1891      	adds	r1, r2, r2
 80033be:	64b9      	str	r1, [r7, #72]	; 0x48
 80033c0:	415b      	adcs	r3, r3
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80033c8:	4641      	mov	r1, r8
 80033ca:	eb12 0a01 	adds.w	sl, r2, r1
 80033ce:	4649      	mov	r1, r9
 80033d0:	eb43 0b01 	adc.w	fp, r3, r1
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e8:	4692      	mov	sl, r2
 80033ea:	469b      	mov	fp, r3
 80033ec:	4643      	mov	r3, r8
 80033ee:	eb1a 0303 	adds.w	r3, sl, r3
 80033f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f6:	464b      	mov	r3, r9
 80033f8:	eb4b 0303 	adc.w	r3, fp, r3
 80033fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800340c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003410:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003414:	460b      	mov	r3, r1
 8003416:	18db      	adds	r3, r3, r3
 8003418:	643b      	str	r3, [r7, #64]	; 0x40
 800341a:	4613      	mov	r3, r2
 800341c:	eb42 0303 	adc.w	r3, r2, r3
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
 8003422:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003426:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800342a:	f7fc ff39 	bl	80002a0 <__aeabi_uldivmod>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4611      	mov	r1, r2
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <UART_SetConfig+0x2d4>)
 8003436:	fba3 2301 	umull	r2, r3, r3, r1
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2264      	movs	r2, #100	; 0x64
 800343e:	fb02 f303 	mul.w	r3, r2, r3
 8003442:	1acb      	subs	r3, r1, r3
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800344a:	4b36      	ldr	r3, [pc, #216]	; (8003524 <UART_SetConfig+0x2d4>)
 800344c:	fba3 2302 	umull	r2, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003458:	441c      	add	r4, r3
 800345a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800345e:	2200      	movs	r2, #0
 8003460:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003464:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003468:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800346c:	4642      	mov	r2, r8
 800346e:	464b      	mov	r3, r9
 8003470:	1891      	adds	r1, r2, r2
 8003472:	63b9      	str	r1, [r7, #56]	; 0x38
 8003474:	415b      	adcs	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800347c:	4641      	mov	r1, r8
 800347e:	1851      	adds	r1, r2, r1
 8003480:	6339      	str	r1, [r7, #48]	; 0x30
 8003482:	4649      	mov	r1, r9
 8003484:	414b      	adcs	r3, r1
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	f04f 0300 	mov.w	r3, #0
 8003490:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003494:	4659      	mov	r1, fp
 8003496:	00cb      	lsls	r3, r1, #3
 8003498:	4651      	mov	r1, sl
 800349a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349e:	4651      	mov	r1, sl
 80034a0:	00ca      	lsls	r2, r1, #3
 80034a2:	4610      	mov	r0, r2
 80034a4:	4619      	mov	r1, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	4642      	mov	r2, r8
 80034aa:	189b      	adds	r3, r3, r2
 80034ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034b0:	464b      	mov	r3, r9
 80034b2:	460a      	mov	r2, r1
 80034b4:	eb42 0303 	adc.w	r3, r2, r3
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80034c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80034cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80034d0:	460b      	mov	r3, r1
 80034d2:	18db      	adds	r3, r3, r3
 80034d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d6:	4613      	mov	r3, r2
 80034d8:	eb42 0303 	adc.w	r3, r2, r3
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80034e6:	f7fc fedb 	bl	80002a0 <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <UART_SetConfig+0x2d4>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a08      	ldr	r2, [pc, #32]	; (8003524 <UART_SetConfig+0x2d4>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	f003 0207 	and.w	r2, r3, #7
 800350e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4422      	add	r2, r4
 8003516:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003518:	e106      	b.n	8003728 <UART_SetConfig+0x4d8>
 800351a:	bf00      	nop
 800351c:	40011000 	.word	0x40011000
 8003520:	40011400 	.word	0x40011400
 8003524:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003528:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800352c:	2200      	movs	r2, #0
 800352e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003532:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003536:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800353a:	4642      	mov	r2, r8
 800353c:	464b      	mov	r3, r9
 800353e:	1891      	adds	r1, r2, r2
 8003540:	6239      	str	r1, [r7, #32]
 8003542:	415b      	adcs	r3, r3
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800354a:	4641      	mov	r1, r8
 800354c:	1854      	adds	r4, r2, r1
 800354e:	4649      	mov	r1, r9
 8003550:	eb43 0501 	adc.w	r5, r3, r1
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	f04f 0300 	mov.w	r3, #0
 800355c:	00eb      	lsls	r3, r5, #3
 800355e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003562:	00e2      	lsls	r2, r4, #3
 8003564:	4614      	mov	r4, r2
 8003566:	461d      	mov	r5, r3
 8003568:	4643      	mov	r3, r8
 800356a:	18e3      	adds	r3, r4, r3
 800356c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003570:	464b      	mov	r3, r9
 8003572:	eb45 0303 	adc.w	r3, r5, r3
 8003576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800357a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003586:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003596:	4629      	mov	r1, r5
 8003598:	008b      	lsls	r3, r1, #2
 800359a:	4621      	mov	r1, r4
 800359c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035a0:	4621      	mov	r1, r4
 80035a2:	008a      	lsls	r2, r1, #2
 80035a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80035a8:	f7fc fe7a 	bl	80002a0 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4b60      	ldr	r3, [pc, #384]	; (8003734 <UART_SetConfig+0x4e4>)
 80035b2:	fba3 2302 	umull	r2, r3, r3, r2
 80035b6:	095b      	lsrs	r3, r3, #5
 80035b8:	011c      	lsls	r4, r3, #4
 80035ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035be:	2200      	movs	r2, #0
 80035c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80035c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	1891      	adds	r1, r2, r2
 80035d2:	61b9      	str	r1, [r7, #24]
 80035d4:	415b      	adcs	r3, r3
 80035d6:	61fb      	str	r3, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	4641      	mov	r1, r8
 80035de:	1851      	adds	r1, r2, r1
 80035e0:	6139      	str	r1, [r7, #16]
 80035e2:	4649      	mov	r1, r9
 80035e4:	414b      	adcs	r3, r1
 80035e6:	617b      	str	r3, [r7, #20]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f4:	4659      	mov	r1, fp
 80035f6:	00cb      	lsls	r3, r1, #3
 80035f8:	4651      	mov	r1, sl
 80035fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fe:	4651      	mov	r1, sl
 8003600:	00ca      	lsls	r2, r1, #3
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	4603      	mov	r3, r0
 8003608:	4642      	mov	r2, r8
 800360a:	189b      	adds	r3, r3, r2
 800360c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003610:	464b      	mov	r3, r9
 8003612:	460a      	mov	r2, r1
 8003614:	eb42 0303 	adc.w	r3, r2, r3
 8003618:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	67bb      	str	r3, [r7, #120]	; 0x78
 8003626:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003634:	4649      	mov	r1, r9
 8003636:	008b      	lsls	r3, r1, #2
 8003638:	4641      	mov	r1, r8
 800363a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363e:	4641      	mov	r1, r8
 8003640:	008a      	lsls	r2, r1, #2
 8003642:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003646:	f7fc fe2b 	bl	80002a0 <__aeabi_uldivmod>
 800364a:	4602      	mov	r2, r0
 800364c:	460b      	mov	r3, r1
 800364e:	4611      	mov	r1, r2
 8003650:	4b38      	ldr	r3, [pc, #224]	; (8003734 <UART_SetConfig+0x4e4>)
 8003652:	fba3 2301 	umull	r2, r3, r3, r1
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	2264      	movs	r2, #100	; 0x64
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	1acb      	subs	r3, r1, r3
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	3332      	adds	r3, #50	; 0x32
 8003664:	4a33      	ldr	r2, [pc, #204]	; (8003734 <UART_SetConfig+0x4e4>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	095b      	lsrs	r3, r3, #5
 800366c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003670:	441c      	add	r4, r3
 8003672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003676:	2200      	movs	r2, #0
 8003678:	673b      	str	r3, [r7, #112]	; 0x70
 800367a:	677a      	str	r2, [r7, #116]	; 0x74
 800367c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003680:	4642      	mov	r2, r8
 8003682:	464b      	mov	r3, r9
 8003684:	1891      	adds	r1, r2, r2
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	415b      	adcs	r3, r3
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003690:	4641      	mov	r1, r8
 8003692:	1851      	adds	r1, r2, r1
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	4649      	mov	r1, r9
 8003698:	414b      	adcs	r3, r1
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036a8:	4659      	mov	r1, fp
 80036aa:	00cb      	lsls	r3, r1, #3
 80036ac:	4651      	mov	r1, sl
 80036ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036b2:	4651      	mov	r1, sl
 80036b4:	00ca      	lsls	r2, r1, #3
 80036b6:	4610      	mov	r0, r2
 80036b8:	4619      	mov	r1, r3
 80036ba:	4603      	mov	r3, r0
 80036bc:	4642      	mov	r2, r8
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c2:	464b      	mov	r3, r9
 80036c4:	460a      	mov	r2, r1
 80036c6:	eb42 0303 	adc.w	r3, r2, r3
 80036ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	663b      	str	r3, [r7, #96]	; 0x60
 80036d6:	667a      	str	r2, [r7, #100]	; 0x64
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80036e4:	4649      	mov	r1, r9
 80036e6:	008b      	lsls	r3, r1, #2
 80036e8:	4641      	mov	r1, r8
 80036ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ee:	4641      	mov	r1, r8
 80036f0:	008a      	lsls	r2, r1, #2
 80036f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80036f6:	f7fc fdd3 	bl	80002a0 <__aeabi_uldivmod>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4b0d      	ldr	r3, [pc, #52]	; (8003734 <UART_SetConfig+0x4e4>)
 8003700:	fba3 1302 	umull	r1, r3, r3, r2
 8003704:	095b      	lsrs	r3, r3, #5
 8003706:	2164      	movs	r1, #100	; 0x64
 8003708:	fb01 f303 	mul.w	r3, r1, r3
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	3332      	adds	r3, #50	; 0x32
 8003712:	4a08      	ldr	r2, [pc, #32]	; (8003734 <UART_SetConfig+0x4e4>)
 8003714:	fba2 2303 	umull	r2, r3, r2, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	f003 020f 	and.w	r2, r3, #15
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4422      	add	r2, r4
 8003726:	609a      	str	r2, [r3, #8]
}
 8003728:	bf00      	nop
 800372a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800372e:	46bd      	mov	sp, r7
 8003730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003734:	51eb851f 	.word	0x51eb851f

08003738 <main>:
static void appSystemInit(void);

static FSM_WaterController appState = INIT;

int main(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0

	HAL_Init();
 800373c:	f7fd fbbe 	bl	8000ebc <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003740:	f000 f8d8 	bl	80038f4 <SystemClock_Config>

	/* Initialize BSP Led for LEDs */
	BSP_LED_Init(LED1);
 8003744:	2000      	movs	r0, #0
 8003746:	f7fd fa2d 	bl	8000ba4 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800374a:	2001      	movs	r0, #1
 800374c:	f7fd fa2a 	bl	8000ba4 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8003750:	2002      	movs	r0, #2
 8003752:	f7fd fa27 	bl	8000ba4 <BSP_LED_Init>
	//BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);

	while (1) {

		switch (appState){
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <main+0xa8>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b04      	cmp	r3, #4
 800375c:	d8fb      	bhi.n	8003756 <main+0x1e>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <main+0x2c>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003779 	.word	0x08003779
 8003768:	08003785 	.word	0x08003785
 800376c:	08003791 	.word	0x08003791
 8003770:	080037a3 	.word	0x080037a3
 8003774:	080037cf 	.word	0x080037cf

		case INIT:

			appSystemInit();
 8003778:	f000 f838 	bl	80037ec <appSystemInit>
			appState = TANK_LEVEL;
 800377c:	4b18      	ldr	r3, [pc, #96]	; (80037e0 <main+0xa8>)
 800377e:	2201      	movs	r2, #1
 8003780:	701a      	strb	r2, [r3, #0]
			break;
 8003782:	e02b      	b.n	80037dc <main+0xa4>

		case TANK_LEVEL:

			get_current_water_level();
 8003784:	f000 fc28 	bl	8003fd8 <get_current_water_level>
			appState = VALVE_CONTROL;
 8003788:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <main+0xa8>)
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]
			break;
 800378e:	e025      	b.n	80037dc <main+0xa4>

		case VALVE_CONTROL:

			valveController(levelResult);
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <main+0xac>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f000 fc5f 	bl	8004058 <valveController>
			appState = DATA_DISPLAY;
 800379a:	4b11      	ldr	r3, [pc, #68]	; (80037e0 <main+0xa8>)
 800379c:	2203      	movs	r2, #3
 800379e:	701a      	strb	r2, [r3, #0]
			break;
 80037a0:	e01c      	b.n	80037dc <main+0xa4>

		case DATA_DISPLAY:

			if (levelResult != LEVEL_ERROR){
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <main+0xac>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d002      	beq.n	80037b0 <main+0x78>
				levelShow();
 80037aa:	f000 f979 	bl	8003aa0 <levelShow>
 80037ae:	e001      	b.n	80037b4 <main+0x7c>
			}
			else{
				levelErrorShow();
 80037b0:	f000 f998 	bl	8003ae4 <levelErrorShow>
			}

			if(valvesState != VALVE_ERROR){
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <main+0xb0>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d002      	beq.n	80037c2 <main+0x8a>
				valveShow();
 80037bc:	f000 f9c0 	bl	8003b40 <valveShow>
 80037c0:	e001      	b.n	80037c6 <main+0x8e>
			}
			else{
				valvesErrorShow();
 80037c2:	f000 f9e9 	bl	8003b98 <valvesErrorShow>
			}
			appState = UART_DISPLAY;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <main+0xa8>)
 80037c8:	2204      	movs	r2, #4
 80037ca:	701a      	strb	r2, [r3, #0]
			break;
 80037cc:	e006      	b.n	80037dc <main+0xa4>

		case UART_DISPLAY:

			UARTshowParams();
 80037ce:	f000 fa1b 	bl	8003c08 <UARTshowParams>
			appState = TANK_LEVEL;
 80037d2:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <main+0xa8>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]

			break;
 80037d8:	bf00      	nop
 80037da:	e7bc      	b.n	8003756 <main+0x1e>
		switch (appState){
 80037dc:	e7bb      	b.n	8003756 <main+0x1e>
 80037de:	bf00      	nop
 80037e0:	2000017c 	.word	0x2000017c
 80037e4:	200001f9 	.word	0x200001f9
 80037e8:	20000200 	.word	0x20000200

080037ec <appSystemInit>:

}



static void appSystemInit(void){
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0

	Lcd_Clear();
 80037f0:	f7fd f8f3 	bl	80009da <Lcd_Clear>

	if(I2C_Init() && Lcd_Init()){
 80037f4:	f7fd f822 	bl	800083c <I2C_Init>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d052      	beq.n	80038a4 <appSystemInit+0xb8>
 80037fe:	f7fd f8b1 	bl	8000964 <Lcd_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d04d      	beq.n	80038a4 <appSystemInit+0xb8>

		initShow((uint8_t *)lcd_i2c_ok, LCD);
 8003808:	2100      	movs	r1, #0
 800380a:	482b      	ldr	r0, [pc, #172]	; (80038b8 <appSystemInit+0xcc>)
 800380c:	f000 f904 	bl	8003a18 <initShow>

		/*Create Error icons*/
		Lcd_CGRAM_CreateChar(0, levelErrorIcon);
 8003810:	492a      	ldr	r1, [pc, #168]	; (80038bc <appSystemInit+0xd0>)
 8003812:	2000      	movs	r0, #0
 8003814:	f7fd f935 	bl	8000a82 <Lcd_CGRAM_CreateChar>
		Lcd_CGRAM_CreateChar(1, valveErrorIcon);
 8003818:	4929      	ldr	r1, [pc, #164]	; (80038c0 <appSystemInit+0xd4>)
 800381a:	2001      	movs	r0, #1
 800381c:	f7fd f931 	bl	8000a82 <Lcd_CGRAM_CreateChar>

		if(uartInit()){
 8003820:	f7fd f962 	bl	8000ae8 <uartInit>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <appSystemInit+0x4e>

			initShow((uint8_t *)lcd_uart_ok,UART);
 800382a:	2101      	movs	r1, #1
 800382c:	4825      	ldr	r0, [pc, #148]	; (80038c4 <appSystemInit+0xd8>)
 800382e:	f000 f8f3 	bl	8003a18 <initShow>
			uartSendString((uint8_t *)uart_i2c_ok);
 8003832:	4825      	ldr	r0, [pc, #148]	; (80038c8 <appSystemInit+0xdc>)
 8003834:	f7fd f988 	bl	8000b48 <uartSendString>
 8003838:	e003      	b.n	8003842 <appSystemInit+0x56>
		}
		else{
			initShow((uint8_t *)lcd_uart_err,UART);
 800383a:	2101      	movs	r1, #1
 800383c:	4823      	ldr	r0, [pc, #140]	; (80038cc <appSystemInit+0xe0>)
 800383e:	f000 f8eb 	bl	8003a18 <initShow>
		}


		if(Timer_Init() && tankLevelInit()){
 8003842:	f7fc fef7 	bl	8000634 <Timer_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00c      	beq.n	8003866 <appSystemInit+0x7a>
 800384c:	f000 fa54 	bl	8003cf8 <tankLevelInit>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <appSystemInit+0x7a>
			initShow((uint8_t *)lcd_timer_ok,LEVEL);
 8003856:	2102      	movs	r1, #2
 8003858:	481d      	ldr	r0, [pc, #116]	; (80038d0 <appSystemInit+0xe4>)
 800385a:	f000 f8dd 	bl	8003a18 <initShow>
			uartSendString((uint8_t *)uart_timer_ok);
 800385e:	481d      	ldr	r0, [pc, #116]	; (80038d4 <appSystemInit+0xe8>)
 8003860:	f7fd f972 	bl	8000b48 <uartSendString>
 8003864:	e006      	b.n	8003874 <appSystemInit+0x88>
		}
		else{
			initShow((uint8_t *)lcd_timer_err,LEVEL);
 8003866:	2102      	movs	r1, #2
 8003868:	481b      	ldr	r0, [pc, #108]	; (80038d8 <appSystemInit+0xec>)
 800386a:	f000 f8d5 	bl	8003a18 <initShow>
			uartSendString((uint8_t *)uart_timer_err);
 800386e:	481b      	ldr	r0, [pc, #108]	; (80038dc <appSystemInit+0xf0>)
 8003870:	f7fd f96a 	bl	8000b48 <uartSendString>
		}

		if(valveManagerInit()){
 8003874:	f000 fbcc 	bl	8004010 <valveManagerInit>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <appSystemInit+0xa2>
			initShow((uint8_t *)lcd_valves_ok,VALVES);
 800387e:	2103      	movs	r1, #3
 8003880:	4817      	ldr	r0, [pc, #92]	; (80038e0 <appSystemInit+0xf4>)
 8003882:	f000 f8c9 	bl	8003a18 <initShow>
			uartSendString((uint8_t *)uart_valves_ok);
 8003886:	4817      	ldr	r0, [pc, #92]	; (80038e4 <appSystemInit+0xf8>)
 8003888:	f7fd f95e 	bl	8000b48 <uartSendString>
 800388c:	e006      	b.n	800389c <appSystemInit+0xb0>
		}
		else{
			initShow((uint8_t *)lcd_valves_err,VALVES);
 800388e:	2103      	movs	r1, #3
 8003890:	4815      	ldr	r0, [pc, #84]	; (80038e8 <appSystemInit+0xfc>)
 8003892:	f000 f8c1 	bl	8003a18 <initShow>
			uartSendString((uint8_t *)uart_valves_err);
 8003896:	4815      	ldr	r0, [pc, #84]	; (80038ec <appSystemInit+0x100>)
 8003898:	f7fd f956 	bl	8000b48 <uartSendString>
		}
		appState = TANK_LEVEL;
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <appSystemInit+0x104>)
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e004      	b.n	80038ae <appSystemInit+0xc2>
	}
	else{
		appState = INIT,
 80038a4:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <appSystemInit+0x104>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
		Error_Handler();
 80038aa:	f000 f885 	bl	80039b8 <Error_Handler>
	}

	endLCDShow();
 80038ae:	f000 f8eb 	bl	8003a88 <endLCDShow>

}
 80038b2:	bf00      	nop
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	08005654 	.word	0x08005654
 80038bc:	08005700 	.word	0x08005700
 80038c0:	08005708 	.word	0x08005708
 80038c4:	08005660 	.word	0x08005660
 80038c8:	080056b4 	.word	0x080056b4
 80038cc:	08005684 	.word	0x08005684
 80038d0:	0800566c 	.word	0x0800566c
 80038d4:	080056c4 	.word	0x080056c4
 80038d8:	08005694 	.word	0x08005694
 80038dc:	080056e0 	.word	0x080056e0
 80038e0:	08005678 	.word	0x08005678
 80038e4:	080056d4 	.word	0x080056d4
 80038e8:	080056a4 	.word	0x080056a4
 80038ec:	080056f0 	.word	0x080056f0
 80038f0:	2000017c 	.word	0x2000017c

080038f4 <SystemClock_Config>:
 */



static void SystemClock_Config(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b094      	sub	sp, #80	; 0x50
 80038f8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	4b2c      	ldr	r3, [pc, #176]	; (80039b0 <SystemClock_Config+0xbc>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a2b      	ldr	r2, [pc, #172]	; (80039b0 <SystemClock_Config+0xbc>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <SystemClock_Config+0xbc>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
 800391a:	4b26      	ldr	r3, [pc, #152]	; (80039b4 <SystemClock_Config+0xc0>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <SystemClock_Config+0xc0>)
 8003920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b23      	ldr	r3, [pc, #140]	; (80039b4 <SystemClock_Config+0xc0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800392e:	607b      	str	r3, [r7, #4]
 8003930:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003932:	2301      	movs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003936:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800393a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800393c:	2302      	movs	r3, #2
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003940:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003946:	2308      	movs	r3, #8
 8003948:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800394a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003950:	2302      	movs	r3, #2
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003954:	2307      	movs	r3, #7
 8003956:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fb53 	bl	8002008 <HAL_RCC_OscConfig>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003968:	f000 f826 	bl	80039b8 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800396c:	f7fe fafc 	bl	8001f68 <HAL_PWREx_EnableOverDrive>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8003976:	f000 f81f 	bl	80039b8 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800397a:	230f      	movs	r3, #15
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800397e:	2302      	movs	r3, #2
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003982:	2300      	movs	r3, #0
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800398c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003990:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003992:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003996:	2105      	movs	r1, #5
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fdad 	bl	80024f8 <HAL_RCC_ClockConfig>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80039a4:	f000 f808 	bl	80039b8 <Error_Handler>
	}
}
 80039a8:	bf00      	nop
 80039aa:	3750      	adds	r7, #80	; 0x50
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40007000 	.word	0x40007000

080039b8 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80039bc:	2001      	movs	r0, #1
 80039be:	f7fd f941 	bl	8000c44 <BSP_LED_On>
	while (1)
 80039c2:	e7fe      	b.n	80039c2 <Error_Handler+0xa>

080039c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80039c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039fc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039ca:	e003      	b.n	80039d4 <LoopCopyDataInit>

080039cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039d2:	3104      	adds	r1, #4

080039d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039d4:	480b      	ldr	r0, [pc, #44]	; (8003a04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039d6:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039dc:	d3f6      	bcc.n	80039cc <CopyDataInit>
  ldr  r2, =_sbss
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039e0:	e002      	b.n	80039e8 <LoopFillZerobss>

080039e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039e4:	f842 3b04 	str.w	r3, [r2], #4

080039e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039ec:	d3f9      	bcc.n	80039e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039ee:	f7fd f95d 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039f2:	f000 fd8b 	bl	800450c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039f6:	f7ff fe9f 	bl	8003738 <main>
  bx  lr    
 80039fa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039fc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003a00:	08005754 	.word	0x08005754
  ldr  r0, =_sdata
 8003a04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a08:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8003a0c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8003a10:	20000364 	.word	0x20000364

08003a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC_IRQHandler>
	...

08003a18 <initShow>:
 * Esta función inicializa la pantalla del LCD y muestra un mensaje en la posición indicada por el parámetro 'module'.
 *
 * @param msg Mensaje a mostrar en el LCD.
 * @param module Módulo de la aplicación para el que se muestra el mensaje (LCD, UART, LEVEL o VALVES).
 */
void initShow(uint8_t* msg, app_SystemInit module){
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	70fb      	strb	r3, [r7, #3]

	delayInit(&blinkyErrorIcons,BLINKY_ERROR_TIME_MS);
 8003a24:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003a28:	4816      	ldr	r0, [pc, #88]	; (8003a84 <initShow+0x6c>)
 8003a2a:	f7fc fdbd 	bl	80005a8 <delayInit>

	switch (module){
 8003a2e:	78fb      	ldrb	r3, [r7, #3]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d81f      	bhi.n	8003a74 <initShow+0x5c>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <initShow+0x24>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a57 	.word	0x08003a57
 8003a44:	08003a61 	.word	0x08003a61
 8003a48:	08003a6b 	.word	0x08003a6b

	case LCD:
		Lcd_Set_Cursor(1,1);
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	2001      	movs	r0, #1
 8003a50:	f7fc ffce 	bl	80009f0 <Lcd_Set_Cursor>
		break;
 8003a54:	e00e      	b.n	8003a74 <initShow+0x5c>

	case UART:
		Lcd_Set_Cursor(2,1);
 8003a56:	2101      	movs	r1, #1
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f7fc ffc9 	bl	80009f0 <Lcd_Set_Cursor>
		break;
 8003a5e:	e009      	b.n	8003a74 <initShow+0x5c>

	case LEVEL:
		Lcd_Set_Cursor(3,1);
 8003a60:	2101      	movs	r1, #1
 8003a62:	2003      	movs	r0, #3
 8003a64:	f7fc ffc4 	bl	80009f0 <Lcd_Set_Cursor>
		break;
 8003a68:	e004      	b.n	8003a74 <initShow+0x5c>

	case VALVES:
		Lcd_Set_Cursor(4,1);
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2004      	movs	r0, #4
 8003a6e:	f7fc ffbf 	bl	80009f0 <Lcd_Set_Cursor>
		break;
 8003a72:	bf00      	nop

	}
	Lcd_Send_String((char *)msg);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fc ffef 	bl	8000a58 <Lcd_Send_String>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	20000180 	.word	0x20000180

08003a88 <endLCDShow>:
/**
 * @brief Finaliza la visualización en el LCD.
 *
 * Esta función finaliza la visualización en el LCD después de un tiempo determinado.
 */
void endLCDShow(void){
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
	HAL_Delay(DELAY_DISPLAY_SHOW);
 8003a8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fa7f 	bl	8000f94 <HAL_Delay>
	Lcd_Clear();
 8003a96:	f7fc ffa0 	bl	80009da <Lcd_Clear>
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <levelShow>:
/**
 * @brief Muestra el nivel de agua en el LCD.
 *
 * Esta función muestra el nivel de agua actual en el LCD.
 */
void levelShow(void){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	Lcd_Set_Cursor(1,1);
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	2001      	movs	r0, #1
 8003aa8:	f7fc ffa2 	bl	80009f0 <Lcd_Set_Cursor>
	sprintf(levelMsg,"NIVEL %d", levelResult);
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <levelShow+0x34>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4909      	ldr	r1, [pc, #36]	; (8003ad8 <levelShow+0x38>)
 8003ab4:	4809      	ldr	r0, [pc, #36]	; (8003adc <levelShow+0x3c>)
 8003ab6:	f000 fc71 	bl	800439c <siprintf>
	Lcd_Send_String((char *)levelMsg);
 8003aba:	4808      	ldr	r0, [pc, #32]	; (8003adc <levelShow+0x3c>)
 8003abc:	f7fc ffcc 	bl	8000a58 <Lcd_Send_String>
	Lcd_Set_Cursor(1,19);
 8003ac0:	2113      	movs	r1, #19
 8003ac2:	2001      	movs	r0, #1
 8003ac4:	f7fc ff94 	bl	80009f0 <Lcd_Set_Cursor>
	Lcd_Send_String(" ");
 8003ac8:	4805      	ldr	r0, [pc, #20]	; (8003ae0 <levelShow+0x40>)
 8003aca:	f7fc ffc5 	bl	8000a58 <Lcd_Send_String>
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001f9 	.word	0x200001f9
 8003ad8:	08005520 	.word	0x08005520
 8003adc:	2000018c 	.word	0x2000018c
 8003ae0:	0800552c 	.word	0x0800552c

08003ae4 <levelErrorShow>:
/**
 * @brief Muestra el indicador de error de nivel en el LCD.
 *
 * Esta función muestra el indicador de error de nivel en el LCD.
 */
void levelErrorShow(void){
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0

	Lcd_Set_Cursor(1,19);
 8003ae8:	2113      	movs	r1, #19
 8003aea:	2001      	movs	r0, #1
 8003aec:	f7fc ff80 	bl	80009f0 <Lcd_Set_Cursor>

	if(delayRead(&blinkyErrorIcons)){
 8003af0:	4810      	ldr	r0, [pc, #64]	; (8003b34 <levelErrorShow+0x50>)
 8003af2:	f7fc fd6e 	bl	80005d2 <delayRead>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <levelErrorShow+0x36>
		blinkyErrorState = !blinkyErrorState;
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <levelErrorShow+0x54>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <levelErrorShow+0x54>)
 8003b18:	701a      	strb	r2, [r3, #0]
	}

	/*realiza toogle de variable bool para el blink de iconos de error*/
	if(blinkyErrorState){
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <levelErrorShow+0x54>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <levelErrorShow+0x46>
		Lcd_CGRAM_WriteChar(0);;
 8003b22:	2000      	movs	r0, #0
 8003b24:	f7fc ffd2 	bl	8000acc <Lcd_CGRAM_WriteChar>
	else{
		Lcd_Send_String(" ");
	}


}
 8003b28:	e002      	b.n	8003b30 <levelErrorShow+0x4c>
		Lcd_Send_String(" ");
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <levelErrorShow+0x58>)
 8003b2c:	f7fc ff94 	bl	8000a58 <Lcd_Send_String>
}
 8003b30:	bf00      	nop
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000180 	.word	0x20000180
 8003b38:	20000015 	.word	0x20000015
 8003b3c:	0800552c 	.word	0x0800552c

08003b40 <valveShow>:
/**
 * @brief Muestra el estado de las válvulas en el LCD.
 *
 * Esta función muestra el estado actual de las válvulas en el LCD.
 */
void valveShow(void){
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0

	Lcd_Set_Cursor(2,1);
 8003b44:	2101      	movs	r1, #1
 8003b46:	2002      	movs	r0, #2
 8003b48:	f7fc ff52 	bl	80009f0 <Lcd_Set_Cursor>

	/*los espacios de cada salida de ajustan al tamaño del BUFFER_SIZE*/
	if(valvesState == EMERGENCY_VALVE){
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <valveShow+0x44>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d103      	bne.n	8003b5c <valveShow+0x1c>
		Lcd_Send_String("EMERGENCIA    ");
 8003b54:	480c      	ldr	r0, [pc, #48]	; (8003b88 <valveShow+0x48>)
 8003b56:	f7fc ff7f 	bl	8000a58 <Lcd_Send_String>
 8003b5a:	e00a      	b.n	8003b72 <valveShow+0x32>
	}
	else if (valvesState == DRAIN_VALVE){
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <valveShow+0x44>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d103      	bne.n	8003b6c <valveShow+0x2c>
		Lcd_Send_String("DRENAJE       ");
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <valveShow+0x4c>)
 8003b66:	f7fc ff77 	bl	8000a58 <Lcd_Send_String>
 8003b6a:	e002      	b.n	8003b72 <valveShow+0x32>
	}
	else{
		Lcd_Send_String("LLENADO       ");
 8003b6c:	4808      	ldr	r0, [pc, #32]	; (8003b90 <valveShow+0x50>)
 8003b6e:	f7fc ff73 	bl	8000a58 <Lcd_Send_String>
	}

	Lcd_Set_Cursor(1,20);
 8003b72:	2114      	movs	r1, #20
 8003b74:	2001      	movs	r0, #1
 8003b76:	f7fc ff3b 	bl	80009f0 <Lcd_Set_Cursor>
	Lcd_Send_String(" ");
 8003b7a:	4806      	ldr	r0, [pc, #24]	; (8003b94 <valveShow+0x54>)
 8003b7c:	f7fc ff6c 	bl	8000a58 <Lcd_Send_String>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000200 	.word	0x20000200
 8003b88:	08005530 	.word	0x08005530
 8003b8c:	08005540 	.word	0x08005540
 8003b90:	08005550 	.word	0x08005550
 8003b94:	0800552c 	.word	0x0800552c

08003b98 <valvesErrorShow>:
/**
 * @brief Muestra el indicador de error de válvulas en el LCD.
 *
 * Esta función muestra el indicador de error de válvulas en el LCD.
 */
void valvesErrorShow(void){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0

	Lcd_Set_Cursor(1,20);
 8003b9c:	2114      	movs	r1, #20
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f7fc ff26 	bl	80009f0 <Lcd_Set_Cursor>

	if(delayRead(&blinkyErrorIcons)){
 8003ba4:	4814      	ldr	r0, [pc, #80]	; (8003bf8 <valvesErrorShow+0x60>)
 8003ba6:	f7fc fd14 	bl	80005d2 <delayRead>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <valvesErrorShow+0x36>
		blinkyErrorState = !blinkyErrorState;
 8003bb0:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <valvesErrorShow+0x64>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f083 0301 	eor.w	r3, r3, #1
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <valvesErrorShow+0x64>)
 8003bcc:	701a      	strb	r2, [r3, #0]
	}

	if(blinkyErrorState){
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <valvesErrorShow+0x64>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <valvesErrorShow+0x46>
		Lcd_CGRAM_WriteChar(1);
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	f7fc ff78 	bl	8000acc <Lcd_CGRAM_WriteChar>
 8003bdc:	e002      	b.n	8003be4 <valvesErrorShow+0x4c>
	}
	else{
		Lcd_Send_String(" ");
 8003bde:	4808      	ldr	r0, [pc, #32]	; (8003c00 <valvesErrorShow+0x68>)
 8003be0:	f7fc ff3a 	bl	8000a58 <Lcd_Send_String>
	}

	Lcd_Set_Cursor(2,1);
 8003be4:	2101      	movs	r1, #1
 8003be6:	2002      	movs	r0, #2
 8003be8:	f7fc ff02 	bl	80009f0 <Lcd_Set_Cursor>
	Lcd_Send_String("ERROR VALVULAS");
 8003bec:	4805      	ldr	r0, [pc, #20]	; (8003c04 <valvesErrorShow+0x6c>)
 8003bee:	f7fc ff33 	bl	8000a58 <Lcd_Send_String>

}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000180 	.word	0x20000180
 8003bfc:	20000015 	.word	0x20000015
 8003c00:	0800552c 	.word	0x0800552c
 8003c04:	08005560 	.word	0x08005560

08003c08 <UARTshowParams>:

static void UARTlevelShow(void);
static void UARTvalveShow(void);
static void UARTdelayInit(void);

void UARTshowParams(){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	af00      	add	r7, sp, #0

	if(delayInitialized){
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <UARTshowParams+0x2c>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UARTshowParams+0x22>
		if(delayRead(&UARTtxPeriod)){
 8003c14:	4808      	ldr	r0, [pc, #32]	; (8003c38 <UARTshowParams+0x30>)
 8003c16:	f7fc fcdc 	bl	80005d2 <delayRead>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <UARTshowParams+0x26>
			UARTlevelShow();
 8003c20:	f000 f80c 	bl	8003c3c <UARTlevelShow>
			UARTvalveShow();
 8003c24:	f000 f82a 	bl	8003c7c <UARTvalveShow>
		}
	}else{
		UARTdelayInit();
	}
}
 8003c28:	e001      	b.n	8003c2e <UARTshowParams+0x26>
		UARTdelayInit();
 8003c2a:	f000 f855 	bl	8003cd8 <UARTdelayInit>
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	200001a0 	.word	0x200001a0
 8003c38:	20000194 	.word	0x20000194

08003c3c <UARTlevelShow>:

static void UARTlevelShow(void){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0

	if(levelResult != LEVEL_ERROR){
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <UARTlevelShow+0x30>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	2b06      	cmp	r3, #6
 8003c46:	d00a      	beq.n	8003c5e <UARTlevelShow+0x22>

		sprintf(UARTLevelMsg,"\r\nNIVEL %d", levelResult);
 8003c48:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <UARTlevelShow+0x30>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4908      	ldr	r1, [pc, #32]	; (8003c70 <UARTlevelShow+0x34>)
 8003c50:	4808      	ldr	r0, [pc, #32]	; (8003c74 <UARTlevelShow+0x38>)
 8003c52:	f000 fba3 	bl	800439c <siprintf>
		uartSendString((uint8_t *)UARTLevelMsg);
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <UARTlevelShow+0x38>)
 8003c58:	f7fc ff76 	bl	8000b48 <uartSendString>
	else{
		uartSendString((uint8_t *)UARTlevelMsgError);
	}


}
 8003c5c:	e004      	b.n	8003c68 <UARTlevelShow+0x2c>
		uartSendString((uint8_t *)UARTlevelMsgError);
 8003c5e:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <UARTlevelShow+0x3c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc ff70 	bl	8000b48 <uartSendString>
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200001f9 	.word	0x200001f9
 8003c70:	0800559c 	.word	0x0800559c
 8003c74:	200001a4 	.word	0x200001a4
 8003c78:	20000018 	.word	0x20000018

08003c7c <UARTvalveShow>:


static void UARTvalveShow(void){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0


	if(valvesState == VALVE_ERROR){
 8003c80:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <UARTvalveShow+0x48>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d103      	bne.n	8003c90 <UARTvalveShow+0x14>
		uartSendString((uint8_t *)"\r\nError en valvulas, nivel no cambia");
 8003c88:	480f      	ldr	r0, [pc, #60]	; (8003cc8 <UARTvalveShow+0x4c>)
 8003c8a:	f7fc ff5d 	bl	8000b48 <uartSendString>
	else if (valvesState == TANK_VALVE){
		uartSendString((uint8_t *)"\r\nValvula llenado activa");
	}


}
 8003c8e:	e016      	b.n	8003cbe <UARTvalveShow+0x42>
	else if(valvesState == EMERGENCY_VALVE){
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <UARTvalveShow+0x48>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d103      	bne.n	8003ca0 <UARTvalveShow+0x24>
		uartSendString((uint8_t *)"\r\nValvula emergencia ON, Error sensor nivel");
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <UARTvalveShow+0x50>)
 8003c9a:	f7fc ff55 	bl	8000b48 <uartSendString>
}
 8003c9e:	e00e      	b.n	8003cbe <UARTvalveShow+0x42>
	else if(valvesState == DRAIN_VALVE){
 8003ca0:	4b08      	ldr	r3, [pc, #32]	; (8003cc4 <UARTvalveShow+0x48>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d103      	bne.n	8003cb0 <UARTvalveShow+0x34>
		uartSendString((uint8_t *)"\r\nValvula drenaje activa");
 8003ca8:	4809      	ldr	r0, [pc, #36]	; (8003cd0 <UARTvalveShow+0x54>)
 8003caa:	f7fc ff4d 	bl	8000b48 <uartSendString>
}
 8003cae:	e006      	b.n	8003cbe <UARTvalveShow+0x42>
	else if (valvesState == TANK_VALVE){
 8003cb0:	4b04      	ldr	r3, [pc, #16]	; (8003cc4 <UARTvalveShow+0x48>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <UARTvalveShow+0x42>
		uartSendString((uint8_t *)"\r\nValvula llenado activa");
 8003cb8:	4806      	ldr	r0, [pc, #24]	; (8003cd4 <UARTvalveShow+0x58>)
 8003cba:	f7fc ff45 	bl	8000b48 <uartSendString>
}
 8003cbe:	bf00      	nop
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000200 	.word	0x20000200
 8003cc8:	080055a8 	.word	0x080055a8
 8003ccc:	080055d0 	.word	0x080055d0
 8003cd0:	080055fc 	.word	0x080055fc
 8003cd4:	08005618 	.word	0x08005618

08003cd8 <UARTdelayInit>:

static void UARTdelayInit(void){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
	delayInit(&UARTtxPeriod,PERIOD_TX_MS);
 8003cdc:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003ce0:	4803      	ldr	r0, [pc, #12]	; (8003cf0 <UARTdelayInit+0x18>)
 8003ce2:	f7fc fc61 	bl	80005a8 <delayInit>
	delayInitialized = true;
 8003ce6:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <UARTdelayInit+0x1c>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000194 	.word	0x20000194
 8003cf4:	200001a0 	.word	0x200001a0

08003cf8 <tankLevelInit>:
 * del sensor ultrasónico (echoTimeout). Finalmente, realiza una lectura inicial del nivel de agua para establecer
 * el estado inicial del sistema.
 *
 * @return true si la inicialización es exitosa, false en caso contrario.
 */
bool_t tankLevelInit(void){
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cfe:	1d3b      	adds	r3, r7, #4
 8003d00:	2200      	movs	r2, #0
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	60da      	str	r2, [r3, #12]
 8003d0a:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4b1f      	ldr	r3, [pc, #124]	; (8003d90 <tankLevelInit+0x98>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	4a1e      	ldr	r2, [pc, #120]	; (8003d90 <tankLevelInit+0x98>)
 8003d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1c:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <tankLevelInit+0x98>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	603b      	str	r3, [r7, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]

    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2104      	movs	r1, #4
 8003d2c:	4819      	ldr	r0, [pc, #100]	; (8003d94 <tankLevelInit+0x9c>)
 8003d2e:	f7fd fbff 	bl	8001530 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin = TRIGGER_PIN;
 8003d32:	2304      	movs	r3, #4
 8003d34:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d36:	2301      	movs	r3, #1
 8003d38:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(TRIGGER_PORT, &GPIO_InitStruct);
 8003d42:	1d3b      	adds	r3, r7, #4
 8003d44:	4619      	mov	r1, r3
 8003d46:	4813      	ldr	r0, [pc, #76]	; (8003d94 <tankLevelInit+0x9c>)
 8003d48:	f7fd fa2e 	bl	80011a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ECHO_PIN;
 8003d4c:	2308      	movs	r3, #8
 8003d4e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003d54:	2302      	movs	r3, #2
 8003d56:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(ECHO_PORT, &GPIO_InitStruct);
 8003d58:	1d3b      	adds	r3, r7, #4
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	480d      	ldr	r0, [pc, #52]	; (8003d94 <tankLevelInit+0x9c>)
 8003d5e:	f7fd fa23 	bl	80011a8 <HAL_GPIO_Init>

    delayInit(&blinkyLedsError, ERROR_TIME_BLINKY_MS);
 8003d62:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003d66:	4619      	mov	r1, r3
 8003d68:	480b      	ldr	r0, [pc, #44]	; (8003d98 <tankLevelInit+0xa0>)
 8003d6a:	f7fc fc1d 	bl	80005a8 <delayInit>
    usDelayInit(&echoTimeout, MAX_ECHO_TIMEOUT_US);
 8003d6e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003d72:	4619      	mov	r1, r3
 8003d74:	4809      	ldr	r0, [pc, #36]	; (8003d9c <tankLevelInit+0xa4>)
 8003d76:	f7fc fd01 	bl	800077c <usDelayInit>

    get_current_water_level();
 8003d7a:	f000 f92d 	bl	8003fd8 <get_current_water_level>

    readlevelError = false;
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <tankLevelInit+0xa8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]

    return true;
 8003d84:	2301      	movs	r3, #1
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40021800 	.word	0x40021800
 8003d98:	200001d8 	.word	0x200001d8
 8003d9c:	200001e4 	.word	0x200001e4
 8003da0:	200001f8 	.word	0x200001f8

08003da4 <triggerPulse>:
/**
 * @brief Genera un pulso de activación para el sensor ultrasónico.
 *
 * Esta función genera un pulso de activación para el sensor ultrasónico mediante el pin de disparo (TRIGGER_PIN).
 */
static void triggerPulse(void) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 8003da8:	2201      	movs	r2, #1
 8003daa:	2104      	movs	r1, #4
 8003dac:	4806      	ldr	r0, [pc, #24]	; (8003dc8 <triggerPulse+0x24>)
 8003dae:	f7fd fbbf 	bl	8001530 <HAL_GPIO_WritePin>
    usDelay(TRIGGER_PERIOD_US);
 8003db2:	230a      	movs	r3, #10
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fcb9 	bl	800072c <usDelay>
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 8003dba:	2200      	movs	r2, #0
 8003dbc:	2104      	movs	r1, #4
 8003dbe:	4802      	ldr	r0, [pc, #8]	; (8003dc8 <triggerPulse+0x24>)
 8003dc0:	f7fd fbb6 	bl	8001530 <HAL_GPIO_WritePin>
}
 8003dc4:	bf00      	nop
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021800 	.word	0x40021800

08003dcc <echoPulseMeasure>:
/**
 * @brief Mide el ancho del pulso de eco recibido del sensor ultrasónico.
 *
 * Esta función mide el ancho del pulso de eco recibido del sensor ultrasónico y calcula su duración en microsegundos.
 */
static void echoPulseMeasure(void) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET){
 8003dd2:	e007      	b.n	8003de4 <echoPulseMeasure+0x18>
        if (usDelayRead(&echoTimeout)) {
 8003dd4:	4819      	ldr	r0, [pc, #100]	; (8003e3c <echoPulseMeasure+0x70>)
 8003dd6:	f7fc fce6 	bl	80007a6 <usDelayRead>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <echoPulseMeasure+0x18>
            levelSensor_Error_Handler();
 8003de0:	f000 f906 	bl	8003ff0 <levelSensor_Error_Handler>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET){
 8003de4:	2108      	movs	r1, #8
 8003de6:	4816      	ldr	r0, [pc, #88]	; (8003e40 <echoPulseMeasure+0x74>)
 8003de8:	f7fd fb8a 	bl	8001500 <HAL_GPIO_ReadPin>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <echoPulseMeasure+0x8>
        }
    }

    usResetDelay(&echoTimeout);
 8003df2:	4812      	ldr	r0, [pc, #72]	; (8003e3c <echoPulseMeasure+0x70>)
 8003df4:	f7fc fd08 	bl	8000808 <usResetDelay>

    uint32_t starter = getUsTick();
 8003df8:	f7fc fc8c 	bl	8000714 <getUsTick>
 8003dfc:	6078      	str	r0, [r7, #4]
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 8003dfe:	e007      	b.n	8003e10 <echoPulseMeasure+0x44>
        if (usDelayRead(&echoTimeout)) {
 8003e00:	480e      	ldr	r0, [pc, #56]	; (8003e3c <echoPulseMeasure+0x70>)
 8003e02:	f7fc fcd0 	bl	80007a6 <usDelayRead>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <echoPulseMeasure+0x44>
            levelSensor_Error_Handler();
 8003e0c:	f000 f8f0 	bl	8003ff0 <levelSensor_Error_Handler>
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 8003e10:	2108      	movs	r1, #8
 8003e12:	480b      	ldr	r0, [pc, #44]	; (8003e40 <echoPulseMeasure+0x74>)
 8003e14:	f7fd fb74 	bl	8001500 <HAL_GPIO_ReadPin>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d0f0      	beq.n	8003e00 <echoPulseMeasure+0x34>
        }
    }
    uint32_t finisher = getUsTick();
 8003e1e:	f7fc fc79 	bl	8000714 <getUsTick>
 8003e22:	6038      	str	r0, [r7, #0]

    usResetDelay(&echoTimeout);
 8003e24:	4805      	ldr	r0, [pc, #20]	; (8003e3c <echoPulseMeasure+0x70>)
 8003e26:	f7fc fcef 	bl	8000808 <usResetDelay>
    pulse_width = finisher - starter;
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <echoPulseMeasure+0x78>)
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	200001e4 	.word	0x200001e4
 8003e40:	40021800 	.word	0x40021800
 8003e44:	200001f0 	.word	0x200001f0

08003e48 <waterDistance>:
/**
 * @brief Calcula la distancia del agua al sensor ultrasónico.
 *
 * Esta función calcula la distancia del agua al sensor ultrasónico utilizando el ancho del pulso de eco y la velocidad del sonido.
 */
static void waterDistance(void) {
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
    distance = (pulse_width  * SOUND_VEL) / HALF_DISTANCE;
 8003e4c:	4b0a      	ldr	r3, [pc, #40]	; (8003e78 <waterDistance+0x30>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e58:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003e7c <waterDistance+0x34>
 8003e5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003e64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e68:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <waterDistance+0x38>)
 8003e6a:	edc3 7a00 	vstr	s15, [r3]
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	200001f0 	.word	0x200001f0
 8003e7c:	3d0c7e28 	.word	0x3d0c7e28
 8003e80:	200001fc 	.word	0x200001fc

08003e84 <distanceTolevel>:
/**
 * @brief Calcula el nivel de agua a partir de la distancia medida.
 *
 * Esta función calcula el nivel de agua a partir de la distancia medida por el sensor ultrasónico.
 */
static void distanceTolevel(void) {
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
    waterLevel = MAX_WATER_LEVEL_CM - distance;
 8003e88:	2332      	movs	r3, #50	; 0x32
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e92:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <distanceTolevel+0x144>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ea0:	ee17 2a90 	vmov	r2, s15
 8003ea4:	4b49      	ldr	r3, [pc, #292]	; (8003fcc <distanceTolevel+0x148>)
 8003ea6:	601a      	str	r2, [r3, #0]
    readlevelError = false;
 8003ea8:	4b49      	ldr	r3, [pc, #292]	; (8003fd0 <distanceTolevel+0x14c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]

    switch (waterLevel) {
 8003eae:	4b47      	ldr	r3, [pc, #284]	; (8003fcc <distanceTolevel+0x148>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8003eb4:	d874      	bhi.n	8003fa0 <distanceTolevel+0x11c>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <distanceTolevel+0x38>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	08003f79 	.word	0x08003f79
 8003ec0:	08003f79 	.word	0x08003f79
 8003ec4:	08003f79 	.word	0x08003f79
 8003ec8:	08003f81 	.word	0x08003f81
 8003ecc:	08003f81 	.word	0x08003f81
 8003ed0:	08003f81 	.word	0x08003f81
 8003ed4:	08003f81 	.word	0x08003f81
 8003ed8:	08003f81 	.word	0x08003f81
 8003edc:	08003f81 	.word	0x08003f81
 8003ee0:	08003f81 	.word	0x08003f81
 8003ee4:	08003f81 	.word	0x08003f81
 8003ee8:	08003f89 	.word	0x08003f89
 8003eec:	08003f89 	.word	0x08003f89
 8003ef0:	08003f89 	.word	0x08003f89
 8003ef4:	08003f89 	.word	0x08003f89
 8003ef8:	08003f89 	.word	0x08003f89
 8003efc:	08003f89 	.word	0x08003f89
 8003f00:	08003f89 	.word	0x08003f89
 8003f04:	08003f89 	.word	0x08003f89
 8003f08:	08003f89 	.word	0x08003f89
 8003f0c:	08003f89 	.word	0x08003f89
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f89 	.word	0x08003f89
 8003f18:	08003f89 	.word	0x08003f89
 8003f1c:	08003f89 	.word	0x08003f89
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f91 	.word	0x08003f91
 8003f28:	08003f91 	.word	0x08003f91
 8003f2c:	08003f91 	.word	0x08003f91
 8003f30:	08003f91 	.word	0x08003f91
 8003f34:	08003f91 	.word	0x08003f91
 8003f38:	08003f91 	.word	0x08003f91
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003f91 	.word	0x08003f91
 8003f48:	08003f91 	.word	0x08003f91
 8003f4c:	08003f99 	.word	0x08003f99
 8003f50:	08003f99 	.word	0x08003f99
 8003f54:	08003f99 	.word	0x08003f99
 8003f58:	08003f99 	.word	0x08003f99
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003f99 	.word	0x08003f99
 8003f64:	08003f99 	.word	0x08003f99
 8003f68:	08003f99 	.word	0x08003f99
 8003f6c:	08003f99 	.word	0x08003f99
 8003f70:	08003f99 	.word	0x08003f99
 8003f74:	08003f99 	.word	0x08003f99
        case 0 ... 2:
            levelResult = LEVEL_ZERO;
 8003f78:	4b16      	ldr	r3, [pc, #88]	; (8003fd4 <distanceTolevel+0x150>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	701a      	strb	r2, [r3, #0]
            break;
 8003f7e:	e01e      	b.n	8003fbe <distanceTolevel+0x13a>

        case 3 ... 10:
            levelResult = LEVEL_ONE;
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <distanceTolevel+0x150>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
            break;
 8003f86:	e01a      	b.n	8003fbe <distanceTolevel+0x13a>

        case 11 ...25:
            levelResult = LEVEL_TWO;
 8003f88:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <distanceTolevel+0x150>)
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	701a      	strb	r2, [r3, #0]
            break;
 8003f8e:	e016      	b.n	8003fbe <distanceTolevel+0x13a>

        case 26 ... 35:
            levelResult = LEVEL_THREE;
 8003f90:	4b10      	ldr	r3, [pc, #64]	; (8003fd4 <distanceTolevel+0x150>)
 8003f92:	2203      	movs	r2, #3
 8003f94:	701a      	strb	r2, [r3, #0]
            break;
 8003f96:	e012      	b.n	8003fbe <distanceTolevel+0x13a>

        case 36 ...46:
            levelResult = LEVEL_FOUR;
 8003f98:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <distanceTolevel+0x150>)
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	701a      	strb	r2, [r3, #0]
            break;
 8003f9e:	e00e      	b.n	8003fbe <distanceTolevel+0x13a>

        default:
            if (waterLevel >= 47) {
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <distanceTolevel+0x148>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8003fa6:	dd03      	ble.n	8003fb0 <distanceTolevel+0x12c>
                levelResult = LEVEL_FIVE;
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <distanceTolevel+0x150>)
 8003faa:	2205      	movs	r2, #5
 8003fac:	701a      	strb	r2, [r3, #0]
            } else {
                levelResult = LEVEL_ERROR;
                readlevelError = true;
            }
            break;
 8003fae:	e005      	b.n	8003fbc <distanceTolevel+0x138>
                levelResult = LEVEL_ERROR;
 8003fb0:	4b08      	ldr	r3, [pc, #32]	; (8003fd4 <distanceTolevel+0x150>)
 8003fb2:	2206      	movs	r2, #6
 8003fb4:	701a      	strb	r2, [r3, #0]
                readlevelError = true;
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <distanceTolevel+0x14c>)
 8003fb8:	2201      	movs	r2, #1
 8003fba:	701a      	strb	r2, [r3, #0]
            break;
 8003fbc:	bf00      	nop
    }
}
 8003fbe:	bf00      	nop
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	200001fc 	.word	0x200001fc
 8003fcc:	200001f4 	.word	0x200001f4
 8003fd0:	200001f8 	.word	0x200001f8
 8003fd4:	200001f9 	.word	0x200001f9

08003fd8 <get_current_water_level>:
 * @brief Obtiene el nivel actual de agua en el tanque.
 *
 * Esta función realiza una serie de pasos para obtener el nivel actual de agua en el tanque utilizando el sensor ultrasónico.
 * Incluye generar un pulso de activación, medir el pulso de eco, calcular la distancia al agua y convertirla en un nivel de agua.
 */
void get_current_water_level(void) {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
    triggerPulse();
 8003fdc:	f7ff fee2 	bl	8003da4 <triggerPulse>
    echoPulseMeasure();
 8003fe0:	f7ff fef4 	bl	8003dcc <echoPulseMeasure>
    waterDistance();
 8003fe4:	f7ff ff30 	bl	8003e48 <waterDistance>
    distanceTolevel();
 8003fe8:	f7ff ff4c 	bl	8003e84 <distanceTolevel>
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <levelSensor_Error_Handler>:
 * @brief Manejador de errores del sensor de nivel de agua.
 *
 * Esta función maneja los errores que puedan ocurrir durante la lectura del nivel de agua. En caso de error, hace parpadear
 * un LED indicador.
 */
static void levelSensor_Error_Handler(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
    if(delayRead(&blinkyLedsError)){
 8003ff4:	4805      	ldr	r0, [pc, #20]	; (800400c <levelSensor_Error_Handler+0x1c>)
 8003ff6:	f7fc faec 	bl	80005d2 <delayRead>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d002      	beq.n	8004006 <levelSensor_Error_Handler+0x16>
        BSP_LED_Toggle(LED1);
 8004000:	2000      	movs	r0, #0
 8004002:	f7fc fe39 	bl	8000c78 <BSP_LED_Toggle>
    }
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	200001d8 	.word	0x200001d8

08004010 <valveManagerInit>:
 * en el modo adecuado y establece el estado inicial de las válvulas. Además, inicializa la estructura de retardo
 * para el cambio de nivel.
 *
 * @return true si la inicialización es exitosa, false en caso contrario.
 */
bool_t valveManagerInit(void) {
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0

	initValvePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN);
 8004014:	2101      	movs	r1, #1
 8004016:	480c      	ldr	r0, [pc, #48]	; (8004048 <valveManagerInit+0x38>)
 8004018:	f000 f8c6 	bl	80041a8 <initValvePin>
	initValvePin(TANK_VALVE_PORT, TANK_VALVE_PIN);
 800401c:	2102      	movs	r1, #2
 800401e:	480a      	ldr	r0, [pc, #40]	; (8004048 <valveManagerInit+0x38>)
 8004020:	f000 f8c2 	bl	80041a8 <initValvePin>
	initValvePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN);
 8004024:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004028:	4807      	ldr	r0, [pc, #28]	; (8004048 <valveManagerInit+0x38>)
 800402a:	f000 f8bd 	bl	80041a8 <initValvePin>

	delayInit(&changeLevel, TIME_CHANGE_LEVEL);
 800402e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004032:	4619      	mov	r1, r3
 8004034:	4805      	ldr	r0, [pc, #20]	; (800404c <valveManagerInit+0x3c>)
 8004036:	f7fc fab7 	bl	80005a8 <delayInit>

	previousLevel = distance;
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <valveManagerInit+0x40>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <valveManagerInit+0x44>)
 8004040:	6013      	str	r3, [r2, #0]

	return true;
 8004042:	2301      	movs	r3, #1
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40021800 	.word	0x40021800
 800404c:	20000204 	.word	0x20000204
 8004050:	200001fc 	.word	0x200001fc
 8004054:	20000210 	.word	0x20000210

08004058 <valveController>:
 * Esta función controla el estado de las válvulas en función del nivel de agua medido. Determina si es necesario
 * activar la válvula de emergencia, la válvula de drenaje o mantener la válvula del tanque abierta.
 *
 * @param level Nivel de agua medido.
 */
void valveController(uint8_t level) {
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	71fb      	strb	r3, [r7, #7]

	valveErrorHandler();
 8004062:	f000 f863 	bl	800412c <valveErrorHandler>

	if (errorValve) {
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <valveController+0xc8>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d013      	beq.n	8004096 <valveController+0x3e>
		valvesState = VALVE_ERROR;
 800406e:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <valveController+0xcc>)
 8004070:	2203      	movs	r2, #3
 8004072:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(TANK_VALVE_PORT, TANK_VALVE_PIN, GPIO_PIN_RESET);
 8004074:	2200      	movs	r2, #0
 8004076:	2102      	movs	r1, #2
 8004078:	482b      	ldr	r0, [pc, #172]	; (8004128 <valveController+0xd0>)
 800407a:	f7fd fa59 	bl	8001530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN, GPIO_PIN_SET);
 800407e:	2201      	movs	r2, #1
 8004080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004084:	4828      	ldr	r0, [pc, #160]	; (8004128 <valveController+0xd0>)
 8004086:	f7fd fa53 	bl	8001530 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN, GPIO_PIN_SET);
 800408a:	2201      	movs	r2, #1
 800408c:	2101      	movs	r1, #1
 800408e:	4826      	ldr	r0, [pc, #152]	; (8004128 <valveController+0xd0>)
 8004090:	f7fd fa4e 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN, GPIO_PIN_RESET);
			HAL_GPIO_WritePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN, GPIO_PIN_RESET);
			break;
		}
	}
}
 8004094:	e040      	b.n	8004118 <valveController+0xc0>
		switch (level) {
 8004096:	79fb      	ldrb	r3, [r7, #7]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d015      	beq.n	80040c8 <valveController+0x70>
 800409c:	2b06      	cmp	r3, #6
 800409e:	d127      	bne.n	80040f0 <valveController+0x98>
			valvesState = EMERGENCY_VALVE;
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <valveController+0xcc>)
 80040a2:	2202      	movs	r2, #2
 80040a4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(TANK_VALVE_PORT, TANK_VALVE_PIN, GPIO_PIN_RESET);
 80040a6:	2200      	movs	r2, #0
 80040a8:	2102      	movs	r1, #2
 80040aa:	481f      	ldr	r0, [pc, #124]	; (8004128 <valveController+0xd0>)
 80040ac:	f7fd fa40 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN, GPIO_PIN_SET);
 80040b0:	2201      	movs	r2, #1
 80040b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040b6:	481c      	ldr	r0, [pc, #112]	; (8004128 <valveController+0xd0>)
 80040b8:	f7fd fa3a 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN, GPIO_PIN_SET);
 80040bc:	2201      	movs	r2, #1
 80040be:	2101      	movs	r1, #1
 80040c0:	4819      	ldr	r0, [pc, #100]	; (8004128 <valveController+0xd0>)
 80040c2:	f7fd fa35 	bl	8001530 <HAL_GPIO_WritePin>
			break;
 80040c6:	e027      	b.n	8004118 <valveController+0xc0>
			valvesState = DRAIN_VALVE;
 80040c8:	4b16      	ldr	r3, [pc, #88]	; (8004124 <valveController+0xcc>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(TANK_VALVE_PORT, TANK_VALVE_PIN, GPIO_PIN_RESET);
 80040ce:	2200      	movs	r2, #0
 80040d0:	2102      	movs	r1, #2
 80040d2:	4815      	ldr	r0, [pc, #84]	; (8004128 <valveController+0xd0>)
 80040d4:	f7fd fa2c 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN, GPIO_PIN_RESET);
 80040d8:	2200      	movs	r2, #0
 80040da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040de:	4812      	ldr	r0, [pc, #72]	; (8004128 <valveController+0xd0>)
 80040e0:	f7fd fa26 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN, GPIO_PIN_SET);
 80040e4:	2201      	movs	r2, #1
 80040e6:	2101      	movs	r1, #1
 80040e8:	480f      	ldr	r0, [pc, #60]	; (8004128 <valveController+0xd0>)
 80040ea:	f7fd fa21 	bl	8001530 <HAL_GPIO_WritePin>
			break;
 80040ee:	e013      	b.n	8004118 <valveController+0xc0>
			valvesState = TANK_VALVE;
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <valveController+0xcc>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(TANK_VALVE_PORT, TANK_VALVE_PIN, GPIO_PIN_SET);
 80040f6:	2201      	movs	r2, #1
 80040f8:	2102      	movs	r1, #2
 80040fa:	480b      	ldr	r0, [pc, #44]	; (8004128 <valveController+0xd0>)
 80040fc:	f7fd fa18 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EMERGENCY_VALVE_PORT, EMERGENCY_VALVE_PIN, GPIO_PIN_RESET);
 8004100:	2200      	movs	r2, #0
 8004102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004106:	4808      	ldr	r0, [pc, #32]	; (8004128 <valveController+0xd0>)
 8004108:	f7fd fa12 	bl	8001530 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(DRAIN_VALVE_PORT, DRAIN_VALVE_PIN, GPIO_PIN_RESET);
 800410c:	2200      	movs	r2, #0
 800410e:	2101      	movs	r1, #1
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <valveController+0xd0>)
 8004112:	f7fd fa0d 	bl	8001530 <HAL_GPIO_WritePin>
			break;
 8004116:	bf00      	nop
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	20000214 	.word	0x20000214
 8004124:	20000200 	.word	0x20000200
 8004128:	40021800 	.word	0x40021800

0800412c <valveErrorHandler>:
 * Esta función maneja los errores relacionados con el control de válvulas. Detecta si se ha producido una emergencia
 * basada en la falta de cambio de nivel esperado y activa la válvula de emergencia en caso necesario.
 *
 * @return true si se detecta una emergencia, false en caso contrario.
 */
static void valveErrorHandler(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0

	if(levelResult != LEVEL_ERROR){
 8004132:	4b17      	ldr	r3, [pc, #92]	; (8004190 <valveErrorHandler+0x64>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b06      	cmp	r3, #6
 8004138:	d023      	beq.n	8004182 <valveErrorHandler+0x56>

		if (delayRead(&changeLevel)) {
 800413a:	4816      	ldr	r0, [pc, #88]	; (8004194 <valveErrorHandler+0x68>)
 800413c:	f7fc fa49 	bl	80005d2 <delayRead>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d020      	beq.n	8004188 <valveErrorHandler+0x5c>

			float currentLevel = distance;
 8004146:	4b14      	ldr	r3, [pc, #80]	; (8004198 <valveErrorHandler+0x6c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	607b      	str	r3, [r7, #4]

			if (fabs(currentLevel - previousLevel) <= DELTA_LEVEL) {
 800414c:	4b13      	ldr	r3, [pc, #76]	; (800419c <valveErrorHandler+0x70>)
 800414e:	edd3 7a00 	vldr	s15, [r3]
 8004152:	ed97 7a01 	vldr	s14, [r7, #4]
 8004156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415a:	eef0 7ae7 	vabs.f32	s15, s15
 800415e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004162:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416a:	d803      	bhi.n	8004174 <valveErrorHandler+0x48>
				errorValve = true;
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <valveErrorHandler+0x74>)
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	e002      	b.n	800417a <valveErrorHandler+0x4e>
			}
			else{
				errorValve = false;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <valveErrorHandler+0x74>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
			}

			previousLevel = currentLevel;
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <valveErrorHandler+0x70>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6013      	str	r3, [r2, #0]
		}
	}
	else{
		valvesState = EMERGENCY_VALVE;
	}
}
 8004180:	e002      	b.n	8004188 <valveErrorHandler+0x5c>
		valvesState = EMERGENCY_VALVE;
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <valveErrorHandler+0x78>)
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200001f9 	.word	0x200001f9
 8004194:	20000204 	.word	0x20000204
 8004198:	200001fc 	.word	0x200001fc
 800419c:	20000210 	.word	0x20000210
 80041a0:	20000214 	.word	0x20000214
 80041a4:	20000200 	.word	0x20000200

080041a8 <initValvePin>:
 * Esta función inicializa un pin de válvula especificado por el puerto y el pin dados.
 *
 * @param port Puerto GPIO al que pertenece el pin de la válvula.
 * @param pin Pin GPIO de la válvula.
 */
static void initValvePin(GPIO_TypeDef *port, uint16_t pin) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	460b      	mov	r3, r1
 80041b2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b4:	f107 030c 	add.w	r3, r7, #12
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	605a      	str	r2, [r3, #4]
 80041be:	609a      	str	r2, [r3, #8]
 80041c0:	60da      	str	r2, [r3, #12]
 80041c2:	611a      	str	r2, [r3, #16]
	HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 80041c4:	887b      	ldrh	r3, [r7, #2]
 80041c6:	2200      	movs	r2, #0
 80041c8:	4619      	mov	r1, r3
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fd f9b0 	bl	8001530 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = pin;
 80041d0:	887b      	ldrh	r3, [r7, #2]
 80041d2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d4:	2301      	movs	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80041d8:	2302      	movs	r3, #2
 80041da:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041dc:	2300      	movs	r3, #0
 80041de:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80041e0:	f107 030c 	add.w	r3, r7, #12
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7fc ffde 	bl	80011a8 <HAL_GPIO_Init>
}
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <std>:
 80041f4:	2300      	movs	r3, #0
 80041f6:	b510      	push	{r4, lr}
 80041f8:	4604      	mov	r4, r0
 80041fa:	e9c0 3300 	strd	r3, r3, [r0]
 80041fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004202:	6083      	str	r3, [r0, #8]
 8004204:	8181      	strh	r1, [r0, #12]
 8004206:	6643      	str	r3, [r0, #100]	; 0x64
 8004208:	81c2      	strh	r2, [r0, #14]
 800420a:	6183      	str	r3, [r0, #24]
 800420c:	4619      	mov	r1, r3
 800420e:	2208      	movs	r2, #8
 8004210:	305c      	adds	r0, #92	; 0x5c
 8004212:	f000 f926 	bl	8004462 <memset>
 8004216:	4b0d      	ldr	r3, [pc, #52]	; (800424c <std+0x58>)
 8004218:	6263      	str	r3, [r4, #36]	; 0x24
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <std+0x5c>)
 800421c:	62a3      	str	r3, [r4, #40]	; 0x28
 800421e:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <std+0x60>)
 8004220:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004222:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <std+0x64>)
 8004224:	6323      	str	r3, [r4, #48]	; 0x30
 8004226:	4b0d      	ldr	r3, [pc, #52]	; (800425c <std+0x68>)
 8004228:	6224      	str	r4, [r4, #32]
 800422a:	429c      	cmp	r4, r3
 800422c:	d006      	beq.n	800423c <std+0x48>
 800422e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004232:	4294      	cmp	r4, r2
 8004234:	d002      	beq.n	800423c <std+0x48>
 8004236:	33d0      	adds	r3, #208	; 0xd0
 8004238:	429c      	cmp	r4, r3
 800423a:	d105      	bne.n	8004248 <std+0x54>
 800423c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004244:	f000 b986 	b.w	8004554 <__retarget_lock_init_recursive>
 8004248:	bd10      	pop	{r4, pc}
 800424a:	bf00      	nop
 800424c:	080043dd 	.word	0x080043dd
 8004250:	080043ff 	.word	0x080043ff
 8004254:	08004437 	.word	0x08004437
 8004258:	0800445b 	.word	0x0800445b
 800425c:	20000218 	.word	0x20000218

08004260 <stdio_exit_handler>:
 8004260:	4a02      	ldr	r2, [pc, #8]	; (800426c <stdio_exit_handler+0xc>)
 8004262:	4903      	ldr	r1, [pc, #12]	; (8004270 <stdio_exit_handler+0x10>)
 8004264:	4803      	ldr	r0, [pc, #12]	; (8004274 <stdio_exit_handler+0x14>)
 8004266:	f000 b869 	b.w	800433c <_fwalk_sglue>
 800426a:	bf00      	nop
 800426c:	2000001c 	.word	0x2000001c
 8004270:	080050b1 	.word	0x080050b1
 8004274:	20000028 	.word	0x20000028

08004278 <cleanup_stdio>:
 8004278:	6841      	ldr	r1, [r0, #4]
 800427a:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <cleanup_stdio+0x34>)
 800427c:	4299      	cmp	r1, r3
 800427e:	b510      	push	{r4, lr}
 8004280:	4604      	mov	r4, r0
 8004282:	d001      	beq.n	8004288 <cleanup_stdio+0x10>
 8004284:	f000 ff14 	bl	80050b0 <_fflush_r>
 8004288:	68a1      	ldr	r1, [r4, #8]
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <cleanup_stdio+0x38>)
 800428c:	4299      	cmp	r1, r3
 800428e:	d002      	beq.n	8004296 <cleanup_stdio+0x1e>
 8004290:	4620      	mov	r0, r4
 8004292:	f000 ff0d 	bl	80050b0 <_fflush_r>
 8004296:	68e1      	ldr	r1, [r4, #12]
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <cleanup_stdio+0x3c>)
 800429a:	4299      	cmp	r1, r3
 800429c:	d004      	beq.n	80042a8 <cleanup_stdio+0x30>
 800429e:	4620      	mov	r0, r4
 80042a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042a4:	f000 bf04 	b.w	80050b0 <_fflush_r>
 80042a8:	bd10      	pop	{r4, pc}
 80042aa:	bf00      	nop
 80042ac:	20000218 	.word	0x20000218
 80042b0:	20000280 	.word	0x20000280
 80042b4:	200002e8 	.word	0x200002e8

080042b8 <global_stdio_init.part.0>:
 80042b8:	b510      	push	{r4, lr}
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <global_stdio_init.part.0+0x30>)
 80042bc:	4c0b      	ldr	r4, [pc, #44]	; (80042ec <global_stdio_init.part.0+0x34>)
 80042be:	4a0c      	ldr	r2, [pc, #48]	; (80042f0 <global_stdio_init.part.0+0x38>)
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	4620      	mov	r0, r4
 80042c4:	2200      	movs	r2, #0
 80042c6:	2104      	movs	r1, #4
 80042c8:	f7ff ff94 	bl	80041f4 <std>
 80042cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80042d0:	2201      	movs	r2, #1
 80042d2:	2109      	movs	r1, #9
 80042d4:	f7ff ff8e 	bl	80041f4 <std>
 80042d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80042dc:	2202      	movs	r2, #2
 80042de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e2:	2112      	movs	r1, #18
 80042e4:	f7ff bf86 	b.w	80041f4 <std>
 80042e8:	20000350 	.word	0x20000350
 80042ec:	20000218 	.word	0x20000218
 80042f0:	08004261 	.word	0x08004261

080042f4 <__sfp_lock_acquire>:
 80042f4:	4801      	ldr	r0, [pc, #4]	; (80042fc <__sfp_lock_acquire+0x8>)
 80042f6:	f000 b92e 	b.w	8004556 <__retarget_lock_acquire_recursive>
 80042fa:	bf00      	nop
 80042fc:	20000359 	.word	0x20000359

08004300 <__sfp_lock_release>:
 8004300:	4801      	ldr	r0, [pc, #4]	; (8004308 <__sfp_lock_release+0x8>)
 8004302:	f000 b929 	b.w	8004558 <__retarget_lock_release_recursive>
 8004306:	bf00      	nop
 8004308:	20000359 	.word	0x20000359

0800430c <__sinit>:
 800430c:	b510      	push	{r4, lr}
 800430e:	4604      	mov	r4, r0
 8004310:	f7ff fff0 	bl	80042f4 <__sfp_lock_acquire>
 8004314:	6a23      	ldr	r3, [r4, #32]
 8004316:	b11b      	cbz	r3, 8004320 <__sinit+0x14>
 8004318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800431c:	f7ff bff0 	b.w	8004300 <__sfp_lock_release>
 8004320:	4b04      	ldr	r3, [pc, #16]	; (8004334 <__sinit+0x28>)
 8004322:	6223      	str	r3, [r4, #32]
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <__sinit+0x2c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1f5      	bne.n	8004318 <__sinit+0xc>
 800432c:	f7ff ffc4 	bl	80042b8 <global_stdio_init.part.0>
 8004330:	e7f2      	b.n	8004318 <__sinit+0xc>
 8004332:	bf00      	nop
 8004334:	08004279 	.word	0x08004279
 8004338:	20000350 	.word	0x20000350

0800433c <_fwalk_sglue>:
 800433c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004340:	4607      	mov	r7, r0
 8004342:	4688      	mov	r8, r1
 8004344:	4614      	mov	r4, r2
 8004346:	2600      	movs	r6, #0
 8004348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800434c:	f1b9 0901 	subs.w	r9, r9, #1
 8004350:	d505      	bpl.n	800435e <_fwalk_sglue+0x22>
 8004352:	6824      	ldr	r4, [r4, #0]
 8004354:	2c00      	cmp	r4, #0
 8004356:	d1f7      	bne.n	8004348 <_fwalk_sglue+0xc>
 8004358:	4630      	mov	r0, r6
 800435a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800435e:	89ab      	ldrh	r3, [r5, #12]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d907      	bls.n	8004374 <_fwalk_sglue+0x38>
 8004364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004368:	3301      	adds	r3, #1
 800436a:	d003      	beq.n	8004374 <_fwalk_sglue+0x38>
 800436c:	4629      	mov	r1, r5
 800436e:	4638      	mov	r0, r7
 8004370:	47c0      	blx	r8
 8004372:	4306      	orrs	r6, r0
 8004374:	3568      	adds	r5, #104	; 0x68
 8004376:	e7e9      	b.n	800434c <_fwalk_sglue+0x10>

08004378 <iprintf>:
 8004378:	b40f      	push	{r0, r1, r2, r3}
 800437a:	b507      	push	{r0, r1, r2, lr}
 800437c:	4906      	ldr	r1, [pc, #24]	; (8004398 <iprintf+0x20>)
 800437e:	ab04      	add	r3, sp, #16
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	f853 2b04 	ldr.w	r2, [r3], #4
 8004386:	6881      	ldr	r1, [r0, #8]
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	f000 fb61 	bl	8004a50 <_vfiprintf_r>
 800438e:	b003      	add	sp, #12
 8004390:	f85d eb04 	ldr.w	lr, [sp], #4
 8004394:	b004      	add	sp, #16
 8004396:	4770      	bx	lr
 8004398:	20000074 	.word	0x20000074

0800439c <siprintf>:
 800439c:	b40e      	push	{r1, r2, r3}
 800439e:	b500      	push	{lr}
 80043a0:	b09c      	sub	sp, #112	; 0x70
 80043a2:	ab1d      	add	r3, sp, #116	; 0x74
 80043a4:	9002      	str	r0, [sp, #8]
 80043a6:	9006      	str	r0, [sp, #24]
 80043a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043ac:	4809      	ldr	r0, [pc, #36]	; (80043d4 <siprintf+0x38>)
 80043ae:	9107      	str	r1, [sp, #28]
 80043b0:	9104      	str	r1, [sp, #16]
 80043b2:	4909      	ldr	r1, [pc, #36]	; (80043d8 <siprintf+0x3c>)
 80043b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b8:	9105      	str	r1, [sp, #20]
 80043ba:	6800      	ldr	r0, [r0, #0]
 80043bc:	9301      	str	r3, [sp, #4]
 80043be:	a902      	add	r1, sp, #8
 80043c0:	f000 fa1e 	bl	8004800 <_svfiprintf_r>
 80043c4:	9b02      	ldr	r3, [sp, #8]
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	b01c      	add	sp, #112	; 0x70
 80043cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d0:	b003      	add	sp, #12
 80043d2:	4770      	bx	lr
 80043d4:	20000074 	.word	0x20000074
 80043d8:	ffff0208 	.word	0xffff0208

080043dc <__sread>:
 80043dc:	b510      	push	{r4, lr}
 80043de:	460c      	mov	r4, r1
 80043e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e4:	f000 f868 	bl	80044b8 <_read_r>
 80043e8:	2800      	cmp	r0, #0
 80043ea:	bfab      	itete	ge
 80043ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80043ee:	89a3      	ldrhlt	r3, [r4, #12]
 80043f0:	181b      	addge	r3, r3, r0
 80043f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80043f6:	bfac      	ite	ge
 80043f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80043fa:	81a3      	strhlt	r3, [r4, #12]
 80043fc:	bd10      	pop	{r4, pc}

080043fe <__swrite>:
 80043fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004402:	461f      	mov	r7, r3
 8004404:	898b      	ldrh	r3, [r1, #12]
 8004406:	05db      	lsls	r3, r3, #23
 8004408:	4605      	mov	r5, r0
 800440a:	460c      	mov	r4, r1
 800440c:	4616      	mov	r6, r2
 800440e:	d505      	bpl.n	800441c <__swrite+0x1e>
 8004410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004414:	2302      	movs	r3, #2
 8004416:	2200      	movs	r2, #0
 8004418:	f000 f83c 	bl	8004494 <_lseek_r>
 800441c:	89a3      	ldrh	r3, [r4, #12]
 800441e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004426:	81a3      	strh	r3, [r4, #12]
 8004428:	4632      	mov	r2, r6
 800442a:	463b      	mov	r3, r7
 800442c:	4628      	mov	r0, r5
 800442e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004432:	f000 b853 	b.w	80044dc <_write_r>

08004436 <__sseek>:
 8004436:	b510      	push	{r4, lr}
 8004438:	460c      	mov	r4, r1
 800443a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800443e:	f000 f829 	bl	8004494 <_lseek_r>
 8004442:	1c43      	adds	r3, r0, #1
 8004444:	89a3      	ldrh	r3, [r4, #12]
 8004446:	bf15      	itete	ne
 8004448:	6560      	strne	r0, [r4, #84]	; 0x54
 800444a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800444e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004452:	81a3      	strheq	r3, [r4, #12]
 8004454:	bf18      	it	ne
 8004456:	81a3      	strhne	r3, [r4, #12]
 8004458:	bd10      	pop	{r4, pc}

0800445a <__sclose>:
 800445a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445e:	f000 b809 	b.w	8004474 <_close_r>

08004462 <memset>:
 8004462:	4402      	add	r2, r0
 8004464:	4603      	mov	r3, r0
 8004466:	4293      	cmp	r3, r2
 8004468:	d100      	bne.n	800446c <memset+0xa>
 800446a:	4770      	bx	lr
 800446c:	f803 1b01 	strb.w	r1, [r3], #1
 8004470:	e7f9      	b.n	8004466 <memset+0x4>
	...

08004474 <_close_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_close_r+0x1c>)
 8004478:	2300      	movs	r3, #0
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fcb1 	bl	8000de6 <_close>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_close_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_close_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	20000354 	.word	0x20000354

08004494 <_lseek_r>:
 8004494:	b538      	push	{r3, r4, r5, lr}
 8004496:	4d07      	ldr	r5, [pc, #28]	; (80044b4 <_lseek_r+0x20>)
 8004498:	4604      	mov	r4, r0
 800449a:	4608      	mov	r0, r1
 800449c:	4611      	mov	r1, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	602a      	str	r2, [r5, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7fc fcc6 	bl	8000e34 <_lseek>
 80044a8:	1c43      	adds	r3, r0, #1
 80044aa:	d102      	bne.n	80044b2 <_lseek_r+0x1e>
 80044ac:	682b      	ldr	r3, [r5, #0]
 80044ae:	b103      	cbz	r3, 80044b2 <_lseek_r+0x1e>
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	bd38      	pop	{r3, r4, r5, pc}
 80044b4:	20000354 	.word	0x20000354

080044b8 <_read_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	4d07      	ldr	r5, [pc, #28]	; (80044d8 <_read_r+0x20>)
 80044bc:	4604      	mov	r4, r0
 80044be:	4608      	mov	r0, r1
 80044c0:	4611      	mov	r1, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	602a      	str	r2, [r5, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	f7fc fc54 	bl	8000d74 <_read>
 80044cc:	1c43      	adds	r3, r0, #1
 80044ce:	d102      	bne.n	80044d6 <_read_r+0x1e>
 80044d0:	682b      	ldr	r3, [r5, #0]
 80044d2:	b103      	cbz	r3, 80044d6 <_read_r+0x1e>
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	bd38      	pop	{r3, r4, r5, pc}
 80044d8:	20000354 	.word	0x20000354

080044dc <_write_r>:
 80044dc:	b538      	push	{r3, r4, r5, lr}
 80044de:	4d07      	ldr	r5, [pc, #28]	; (80044fc <_write_r+0x20>)
 80044e0:	4604      	mov	r4, r0
 80044e2:	4608      	mov	r0, r1
 80044e4:	4611      	mov	r1, r2
 80044e6:	2200      	movs	r2, #0
 80044e8:	602a      	str	r2, [r5, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	f7fc fc5f 	bl	8000dae <_write>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d102      	bne.n	80044fa <_write_r+0x1e>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	b103      	cbz	r3, 80044fa <_write_r+0x1e>
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	bd38      	pop	{r3, r4, r5, pc}
 80044fc:	20000354 	.word	0x20000354

08004500 <__errno>:
 8004500:	4b01      	ldr	r3, [pc, #4]	; (8004508 <__errno+0x8>)
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000074 	.word	0x20000074

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	4d0d      	ldr	r5, [pc, #52]	; (8004544 <__libc_init_array+0x38>)
 8004510:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004512:	1b64      	subs	r4, r4, r5
 8004514:	10a4      	asrs	r4, r4, #2
 8004516:	2600      	movs	r6, #0
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	4d0b      	ldr	r5, [pc, #44]	; (800454c <__libc_init_array+0x40>)
 800451e:	4c0c      	ldr	r4, [pc, #48]	; (8004550 <__libc_init_array+0x44>)
 8004520:	f000 ff78 	bl	8005414 <_init>
 8004524:	1b64      	subs	r4, r4, r5
 8004526:	10a4      	asrs	r4, r4, #2
 8004528:	2600      	movs	r6, #0
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	0800574c 	.word	0x0800574c
 8004548:	0800574c 	.word	0x0800574c
 800454c:	0800574c 	.word	0x0800574c
 8004550:	08005750 	.word	0x08005750

08004554 <__retarget_lock_init_recursive>:
 8004554:	4770      	bx	lr

08004556 <__retarget_lock_acquire_recursive>:
 8004556:	4770      	bx	lr

08004558 <__retarget_lock_release_recursive>:
 8004558:	4770      	bx	lr
	...

0800455c <_free_r>:
 800455c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800455e:	2900      	cmp	r1, #0
 8004560:	d044      	beq.n	80045ec <_free_r+0x90>
 8004562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004566:	9001      	str	r0, [sp, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	f1a1 0404 	sub.w	r4, r1, #4
 800456e:	bfb8      	it	lt
 8004570:	18e4      	addlt	r4, r4, r3
 8004572:	f000 f8df 	bl	8004734 <__malloc_lock>
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <_free_r+0x94>)
 8004578:	9801      	ldr	r0, [sp, #4]
 800457a:	6813      	ldr	r3, [r2, #0]
 800457c:	b933      	cbnz	r3, 800458c <_free_r+0x30>
 800457e:	6063      	str	r3, [r4, #4]
 8004580:	6014      	str	r4, [r2, #0]
 8004582:	b003      	add	sp, #12
 8004584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004588:	f000 b8da 	b.w	8004740 <__malloc_unlock>
 800458c:	42a3      	cmp	r3, r4
 800458e:	d908      	bls.n	80045a2 <_free_r+0x46>
 8004590:	6825      	ldr	r5, [r4, #0]
 8004592:	1961      	adds	r1, r4, r5
 8004594:	428b      	cmp	r3, r1
 8004596:	bf01      	itttt	eq
 8004598:	6819      	ldreq	r1, [r3, #0]
 800459a:	685b      	ldreq	r3, [r3, #4]
 800459c:	1949      	addeq	r1, r1, r5
 800459e:	6021      	streq	r1, [r4, #0]
 80045a0:	e7ed      	b.n	800457e <_free_r+0x22>
 80045a2:	461a      	mov	r2, r3
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	b10b      	cbz	r3, 80045ac <_free_r+0x50>
 80045a8:	42a3      	cmp	r3, r4
 80045aa:	d9fa      	bls.n	80045a2 <_free_r+0x46>
 80045ac:	6811      	ldr	r1, [r2, #0]
 80045ae:	1855      	adds	r5, r2, r1
 80045b0:	42a5      	cmp	r5, r4
 80045b2:	d10b      	bne.n	80045cc <_free_r+0x70>
 80045b4:	6824      	ldr	r4, [r4, #0]
 80045b6:	4421      	add	r1, r4
 80045b8:	1854      	adds	r4, r2, r1
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	d1e0      	bne.n	8004582 <_free_r+0x26>
 80045c0:	681c      	ldr	r4, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	6053      	str	r3, [r2, #4]
 80045c6:	440c      	add	r4, r1
 80045c8:	6014      	str	r4, [r2, #0]
 80045ca:	e7da      	b.n	8004582 <_free_r+0x26>
 80045cc:	d902      	bls.n	80045d4 <_free_r+0x78>
 80045ce:	230c      	movs	r3, #12
 80045d0:	6003      	str	r3, [r0, #0]
 80045d2:	e7d6      	b.n	8004582 <_free_r+0x26>
 80045d4:	6825      	ldr	r5, [r4, #0]
 80045d6:	1961      	adds	r1, r4, r5
 80045d8:	428b      	cmp	r3, r1
 80045da:	bf04      	itt	eq
 80045dc:	6819      	ldreq	r1, [r3, #0]
 80045de:	685b      	ldreq	r3, [r3, #4]
 80045e0:	6063      	str	r3, [r4, #4]
 80045e2:	bf04      	itt	eq
 80045e4:	1949      	addeq	r1, r1, r5
 80045e6:	6021      	streq	r1, [r4, #0]
 80045e8:	6054      	str	r4, [r2, #4]
 80045ea:	e7ca      	b.n	8004582 <_free_r+0x26>
 80045ec:	b003      	add	sp, #12
 80045ee:	bd30      	pop	{r4, r5, pc}
 80045f0:	2000035c 	.word	0x2000035c

080045f4 <sbrk_aligned>:
 80045f4:	b570      	push	{r4, r5, r6, lr}
 80045f6:	4e0e      	ldr	r6, [pc, #56]	; (8004630 <sbrk_aligned+0x3c>)
 80045f8:	460c      	mov	r4, r1
 80045fa:	6831      	ldr	r1, [r6, #0]
 80045fc:	4605      	mov	r5, r0
 80045fe:	b911      	cbnz	r1, 8004606 <sbrk_aligned+0x12>
 8004600:	f000 fe2e 	bl	8005260 <_sbrk_r>
 8004604:	6030      	str	r0, [r6, #0]
 8004606:	4621      	mov	r1, r4
 8004608:	4628      	mov	r0, r5
 800460a:	f000 fe29 	bl	8005260 <_sbrk_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	d00a      	beq.n	8004628 <sbrk_aligned+0x34>
 8004612:	1cc4      	adds	r4, r0, #3
 8004614:	f024 0403 	bic.w	r4, r4, #3
 8004618:	42a0      	cmp	r0, r4
 800461a:	d007      	beq.n	800462c <sbrk_aligned+0x38>
 800461c:	1a21      	subs	r1, r4, r0
 800461e:	4628      	mov	r0, r5
 8004620:	f000 fe1e 	bl	8005260 <_sbrk_r>
 8004624:	3001      	adds	r0, #1
 8004626:	d101      	bne.n	800462c <sbrk_aligned+0x38>
 8004628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800462c:	4620      	mov	r0, r4
 800462e:	bd70      	pop	{r4, r5, r6, pc}
 8004630:	20000360 	.word	0x20000360

08004634 <_malloc_r>:
 8004634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004638:	1ccd      	adds	r5, r1, #3
 800463a:	f025 0503 	bic.w	r5, r5, #3
 800463e:	3508      	adds	r5, #8
 8004640:	2d0c      	cmp	r5, #12
 8004642:	bf38      	it	cc
 8004644:	250c      	movcc	r5, #12
 8004646:	2d00      	cmp	r5, #0
 8004648:	4607      	mov	r7, r0
 800464a:	db01      	blt.n	8004650 <_malloc_r+0x1c>
 800464c:	42a9      	cmp	r1, r5
 800464e:	d905      	bls.n	800465c <_malloc_r+0x28>
 8004650:	230c      	movs	r3, #12
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	2600      	movs	r6, #0
 8004656:	4630      	mov	r0, r6
 8004658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800465c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004730 <_malloc_r+0xfc>
 8004660:	f000 f868 	bl	8004734 <__malloc_lock>
 8004664:	f8d8 3000 	ldr.w	r3, [r8]
 8004668:	461c      	mov	r4, r3
 800466a:	bb5c      	cbnz	r4, 80046c4 <_malloc_r+0x90>
 800466c:	4629      	mov	r1, r5
 800466e:	4638      	mov	r0, r7
 8004670:	f7ff ffc0 	bl	80045f4 <sbrk_aligned>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	4604      	mov	r4, r0
 8004678:	d155      	bne.n	8004726 <_malloc_r+0xf2>
 800467a:	f8d8 4000 	ldr.w	r4, [r8]
 800467e:	4626      	mov	r6, r4
 8004680:	2e00      	cmp	r6, #0
 8004682:	d145      	bne.n	8004710 <_malloc_r+0xdc>
 8004684:	2c00      	cmp	r4, #0
 8004686:	d048      	beq.n	800471a <_malloc_r+0xe6>
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	4631      	mov	r1, r6
 800468c:	4638      	mov	r0, r7
 800468e:	eb04 0903 	add.w	r9, r4, r3
 8004692:	f000 fde5 	bl	8005260 <_sbrk_r>
 8004696:	4581      	cmp	r9, r0
 8004698:	d13f      	bne.n	800471a <_malloc_r+0xe6>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	1a6d      	subs	r5, r5, r1
 800469e:	4629      	mov	r1, r5
 80046a0:	4638      	mov	r0, r7
 80046a2:	f7ff ffa7 	bl	80045f4 <sbrk_aligned>
 80046a6:	3001      	adds	r0, #1
 80046a8:	d037      	beq.n	800471a <_malloc_r+0xe6>
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	442b      	add	r3, r5
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	f8d8 3000 	ldr.w	r3, [r8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d038      	beq.n	800472a <_malloc_r+0xf6>
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	42a2      	cmp	r2, r4
 80046bc:	d12b      	bne.n	8004716 <_malloc_r+0xe2>
 80046be:	2200      	movs	r2, #0
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	e00f      	b.n	80046e4 <_malloc_r+0xb0>
 80046c4:	6822      	ldr	r2, [r4, #0]
 80046c6:	1b52      	subs	r2, r2, r5
 80046c8:	d41f      	bmi.n	800470a <_malloc_r+0xd6>
 80046ca:	2a0b      	cmp	r2, #11
 80046cc:	d917      	bls.n	80046fe <_malloc_r+0xca>
 80046ce:	1961      	adds	r1, r4, r5
 80046d0:	42a3      	cmp	r3, r4
 80046d2:	6025      	str	r5, [r4, #0]
 80046d4:	bf18      	it	ne
 80046d6:	6059      	strne	r1, [r3, #4]
 80046d8:	6863      	ldr	r3, [r4, #4]
 80046da:	bf08      	it	eq
 80046dc:	f8c8 1000 	streq.w	r1, [r8]
 80046e0:	5162      	str	r2, [r4, r5]
 80046e2:	604b      	str	r3, [r1, #4]
 80046e4:	4638      	mov	r0, r7
 80046e6:	f104 060b 	add.w	r6, r4, #11
 80046ea:	f000 f829 	bl	8004740 <__malloc_unlock>
 80046ee:	f026 0607 	bic.w	r6, r6, #7
 80046f2:	1d23      	adds	r3, r4, #4
 80046f4:	1af2      	subs	r2, r6, r3
 80046f6:	d0ae      	beq.n	8004656 <_malloc_r+0x22>
 80046f8:	1b9b      	subs	r3, r3, r6
 80046fa:	50a3      	str	r3, [r4, r2]
 80046fc:	e7ab      	b.n	8004656 <_malloc_r+0x22>
 80046fe:	42a3      	cmp	r3, r4
 8004700:	6862      	ldr	r2, [r4, #4]
 8004702:	d1dd      	bne.n	80046c0 <_malloc_r+0x8c>
 8004704:	f8c8 2000 	str.w	r2, [r8]
 8004708:	e7ec      	b.n	80046e4 <_malloc_r+0xb0>
 800470a:	4623      	mov	r3, r4
 800470c:	6864      	ldr	r4, [r4, #4]
 800470e:	e7ac      	b.n	800466a <_malloc_r+0x36>
 8004710:	4634      	mov	r4, r6
 8004712:	6876      	ldr	r6, [r6, #4]
 8004714:	e7b4      	b.n	8004680 <_malloc_r+0x4c>
 8004716:	4613      	mov	r3, r2
 8004718:	e7cc      	b.n	80046b4 <_malloc_r+0x80>
 800471a:	230c      	movs	r3, #12
 800471c:	603b      	str	r3, [r7, #0]
 800471e:	4638      	mov	r0, r7
 8004720:	f000 f80e 	bl	8004740 <__malloc_unlock>
 8004724:	e797      	b.n	8004656 <_malloc_r+0x22>
 8004726:	6025      	str	r5, [r4, #0]
 8004728:	e7dc      	b.n	80046e4 <_malloc_r+0xb0>
 800472a:	605b      	str	r3, [r3, #4]
 800472c:	deff      	udf	#255	; 0xff
 800472e:	bf00      	nop
 8004730:	2000035c 	.word	0x2000035c

08004734 <__malloc_lock>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__malloc_lock+0x8>)
 8004736:	f7ff bf0e 	b.w	8004556 <__retarget_lock_acquire_recursive>
 800473a:	bf00      	nop
 800473c:	20000358 	.word	0x20000358

08004740 <__malloc_unlock>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__malloc_unlock+0x8>)
 8004742:	f7ff bf09 	b.w	8004558 <__retarget_lock_release_recursive>
 8004746:	bf00      	nop
 8004748:	20000358 	.word	0x20000358

0800474c <__ssputs_r>:
 800474c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004750:	688e      	ldr	r6, [r1, #8]
 8004752:	461f      	mov	r7, r3
 8004754:	42be      	cmp	r6, r7
 8004756:	680b      	ldr	r3, [r1, #0]
 8004758:	4682      	mov	sl, r0
 800475a:	460c      	mov	r4, r1
 800475c:	4690      	mov	r8, r2
 800475e:	d82c      	bhi.n	80047ba <__ssputs_r+0x6e>
 8004760:	898a      	ldrh	r2, [r1, #12]
 8004762:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004766:	d026      	beq.n	80047b6 <__ssputs_r+0x6a>
 8004768:	6965      	ldr	r5, [r4, #20]
 800476a:	6909      	ldr	r1, [r1, #16]
 800476c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004770:	eba3 0901 	sub.w	r9, r3, r1
 8004774:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004778:	1c7b      	adds	r3, r7, #1
 800477a:	444b      	add	r3, r9
 800477c:	106d      	asrs	r5, r5, #1
 800477e:	429d      	cmp	r5, r3
 8004780:	bf38      	it	cc
 8004782:	461d      	movcc	r5, r3
 8004784:	0553      	lsls	r3, r2, #21
 8004786:	d527      	bpl.n	80047d8 <__ssputs_r+0x8c>
 8004788:	4629      	mov	r1, r5
 800478a:	f7ff ff53 	bl	8004634 <_malloc_r>
 800478e:	4606      	mov	r6, r0
 8004790:	b360      	cbz	r0, 80047ec <__ssputs_r+0xa0>
 8004792:	6921      	ldr	r1, [r4, #16]
 8004794:	464a      	mov	r2, r9
 8004796:	f000 fd73 	bl	8005280 <memcpy>
 800479a:	89a3      	ldrh	r3, [r4, #12]
 800479c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047a4:	81a3      	strh	r3, [r4, #12]
 80047a6:	6126      	str	r6, [r4, #16]
 80047a8:	6165      	str	r5, [r4, #20]
 80047aa:	444e      	add	r6, r9
 80047ac:	eba5 0509 	sub.w	r5, r5, r9
 80047b0:	6026      	str	r6, [r4, #0]
 80047b2:	60a5      	str	r5, [r4, #8]
 80047b4:	463e      	mov	r6, r7
 80047b6:	42be      	cmp	r6, r7
 80047b8:	d900      	bls.n	80047bc <__ssputs_r+0x70>
 80047ba:	463e      	mov	r6, r7
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	4632      	mov	r2, r6
 80047c0:	4641      	mov	r1, r8
 80047c2:	f000 fd33 	bl	800522c <memmove>
 80047c6:	68a3      	ldr	r3, [r4, #8]
 80047c8:	1b9b      	subs	r3, r3, r6
 80047ca:	60a3      	str	r3, [r4, #8]
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	4433      	add	r3, r6
 80047d0:	6023      	str	r3, [r4, #0]
 80047d2:	2000      	movs	r0, #0
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	462a      	mov	r2, r5
 80047da:	f000 fd5f 	bl	800529c <_realloc_r>
 80047de:	4606      	mov	r6, r0
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d1e0      	bne.n	80047a6 <__ssputs_r+0x5a>
 80047e4:	6921      	ldr	r1, [r4, #16]
 80047e6:	4650      	mov	r0, sl
 80047e8:	f7ff feb8 	bl	800455c <_free_r>
 80047ec:	230c      	movs	r3, #12
 80047ee:	f8ca 3000 	str.w	r3, [sl]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047fe:	e7e9      	b.n	80047d4 <__ssputs_r+0x88>

08004800 <_svfiprintf_r>:
 8004800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004804:	4698      	mov	r8, r3
 8004806:	898b      	ldrh	r3, [r1, #12]
 8004808:	061b      	lsls	r3, r3, #24
 800480a:	b09d      	sub	sp, #116	; 0x74
 800480c:	4607      	mov	r7, r0
 800480e:	460d      	mov	r5, r1
 8004810:	4614      	mov	r4, r2
 8004812:	d50e      	bpl.n	8004832 <_svfiprintf_r+0x32>
 8004814:	690b      	ldr	r3, [r1, #16]
 8004816:	b963      	cbnz	r3, 8004832 <_svfiprintf_r+0x32>
 8004818:	2140      	movs	r1, #64	; 0x40
 800481a:	f7ff ff0b 	bl	8004634 <_malloc_r>
 800481e:	6028      	str	r0, [r5, #0]
 8004820:	6128      	str	r0, [r5, #16]
 8004822:	b920      	cbnz	r0, 800482e <_svfiprintf_r+0x2e>
 8004824:	230c      	movs	r3, #12
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800482c:	e0d0      	b.n	80049d0 <_svfiprintf_r+0x1d0>
 800482e:	2340      	movs	r3, #64	; 0x40
 8004830:	616b      	str	r3, [r5, #20]
 8004832:	2300      	movs	r3, #0
 8004834:	9309      	str	r3, [sp, #36]	; 0x24
 8004836:	2320      	movs	r3, #32
 8004838:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004840:	2330      	movs	r3, #48	; 0x30
 8004842:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80049e8 <_svfiprintf_r+0x1e8>
 8004846:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800484a:	f04f 0901 	mov.w	r9, #1
 800484e:	4623      	mov	r3, r4
 8004850:	469a      	mov	sl, r3
 8004852:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004856:	b10a      	cbz	r2, 800485c <_svfiprintf_r+0x5c>
 8004858:	2a25      	cmp	r2, #37	; 0x25
 800485a:	d1f9      	bne.n	8004850 <_svfiprintf_r+0x50>
 800485c:	ebba 0b04 	subs.w	fp, sl, r4
 8004860:	d00b      	beq.n	800487a <_svfiprintf_r+0x7a>
 8004862:	465b      	mov	r3, fp
 8004864:	4622      	mov	r2, r4
 8004866:	4629      	mov	r1, r5
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ff6f 	bl	800474c <__ssputs_r>
 800486e:	3001      	adds	r0, #1
 8004870:	f000 80a9 	beq.w	80049c6 <_svfiprintf_r+0x1c6>
 8004874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004876:	445a      	add	r2, fp
 8004878:	9209      	str	r2, [sp, #36]	; 0x24
 800487a:	f89a 3000 	ldrb.w	r3, [sl]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80a1 	beq.w	80049c6 <_svfiprintf_r+0x1c6>
 8004884:	2300      	movs	r3, #0
 8004886:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800488a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800488e:	f10a 0a01 	add.w	sl, sl, #1
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	9307      	str	r3, [sp, #28]
 8004896:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489a:	931a      	str	r3, [sp, #104]	; 0x68
 800489c:	4654      	mov	r4, sl
 800489e:	2205      	movs	r2, #5
 80048a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a4:	4850      	ldr	r0, [pc, #320]	; (80049e8 <_svfiprintf_r+0x1e8>)
 80048a6:	f7fb fcab 	bl	8000200 <memchr>
 80048aa:	9a04      	ldr	r2, [sp, #16]
 80048ac:	b9d8      	cbnz	r0, 80048e6 <_svfiprintf_r+0xe6>
 80048ae:	06d0      	lsls	r0, r2, #27
 80048b0:	bf44      	itt	mi
 80048b2:	2320      	movmi	r3, #32
 80048b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048b8:	0711      	lsls	r1, r2, #28
 80048ba:	bf44      	itt	mi
 80048bc:	232b      	movmi	r3, #43	; 0x2b
 80048be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c2:	f89a 3000 	ldrb.w	r3, [sl]
 80048c6:	2b2a      	cmp	r3, #42	; 0x2a
 80048c8:	d015      	beq.n	80048f6 <_svfiprintf_r+0xf6>
 80048ca:	9a07      	ldr	r2, [sp, #28]
 80048cc:	4654      	mov	r4, sl
 80048ce:	2000      	movs	r0, #0
 80048d0:	f04f 0c0a 	mov.w	ip, #10
 80048d4:	4621      	mov	r1, r4
 80048d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048da:	3b30      	subs	r3, #48	; 0x30
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d94d      	bls.n	800497c <_svfiprintf_r+0x17c>
 80048e0:	b1b0      	cbz	r0, 8004910 <_svfiprintf_r+0x110>
 80048e2:	9207      	str	r2, [sp, #28]
 80048e4:	e014      	b.n	8004910 <_svfiprintf_r+0x110>
 80048e6:	eba0 0308 	sub.w	r3, r0, r8
 80048ea:	fa09 f303 	lsl.w	r3, r9, r3
 80048ee:	4313      	orrs	r3, r2
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	46a2      	mov	sl, r4
 80048f4:	e7d2      	b.n	800489c <_svfiprintf_r+0x9c>
 80048f6:	9b03      	ldr	r3, [sp, #12]
 80048f8:	1d19      	adds	r1, r3, #4
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	9103      	str	r1, [sp, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bfbb      	ittet	lt
 8004902:	425b      	neglt	r3, r3
 8004904:	f042 0202 	orrlt.w	r2, r2, #2
 8004908:	9307      	strge	r3, [sp, #28]
 800490a:	9307      	strlt	r3, [sp, #28]
 800490c:	bfb8      	it	lt
 800490e:	9204      	strlt	r2, [sp, #16]
 8004910:	7823      	ldrb	r3, [r4, #0]
 8004912:	2b2e      	cmp	r3, #46	; 0x2e
 8004914:	d10c      	bne.n	8004930 <_svfiprintf_r+0x130>
 8004916:	7863      	ldrb	r3, [r4, #1]
 8004918:	2b2a      	cmp	r3, #42	; 0x2a
 800491a:	d134      	bne.n	8004986 <_svfiprintf_r+0x186>
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	9203      	str	r2, [sp, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	bfb8      	it	lt
 8004928:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800492c:	3402      	adds	r4, #2
 800492e:	9305      	str	r3, [sp, #20]
 8004930:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80049f8 <_svfiprintf_r+0x1f8>
 8004934:	7821      	ldrb	r1, [r4, #0]
 8004936:	2203      	movs	r2, #3
 8004938:	4650      	mov	r0, sl
 800493a:	f7fb fc61 	bl	8000200 <memchr>
 800493e:	b138      	cbz	r0, 8004950 <_svfiprintf_r+0x150>
 8004940:	9b04      	ldr	r3, [sp, #16]
 8004942:	eba0 000a 	sub.w	r0, r0, sl
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	4082      	lsls	r2, r0
 800494a:	4313      	orrs	r3, r2
 800494c:	3401      	adds	r4, #1
 800494e:	9304      	str	r3, [sp, #16]
 8004950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004954:	4825      	ldr	r0, [pc, #148]	; (80049ec <_svfiprintf_r+0x1ec>)
 8004956:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495a:	2206      	movs	r2, #6
 800495c:	f7fb fc50 	bl	8000200 <memchr>
 8004960:	2800      	cmp	r0, #0
 8004962:	d038      	beq.n	80049d6 <_svfiprintf_r+0x1d6>
 8004964:	4b22      	ldr	r3, [pc, #136]	; (80049f0 <_svfiprintf_r+0x1f0>)
 8004966:	bb1b      	cbnz	r3, 80049b0 <_svfiprintf_r+0x1b0>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	3307      	adds	r3, #7
 800496c:	f023 0307 	bic.w	r3, r3, #7
 8004970:	3308      	adds	r3, #8
 8004972:	9303      	str	r3, [sp, #12]
 8004974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004976:	4433      	add	r3, r6
 8004978:	9309      	str	r3, [sp, #36]	; 0x24
 800497a:	e768      	b.n	800484e <_svfiprintf_r+0x4e>
 800497c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004980:	460c      	mov	r4, r1
 8004982:	2001      	movs	r0, #1
 8004984:	e7a6      	b.n	80048d4 <_svfiprintf_r+0xd4>
 8004986:	2300      	movs	r3, #0
 8004988:	3401      	adds	r4, #1
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	4619      	mov	r1, r3
 800498e:	f04f 0c0a 	mov.w	ip, #10
 8004992:	4620      	mov	r0, r4
 8004994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004998:	3a30      	subs	r2, #48	; 0x30
 800499a:	2a09      	cmp	r2, #9
 800499c:	d903      	bls.n	80049a6 <_svfiprintf_r+0x1a6>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0c6      	beq.n	8004930 <_svfiprintf_r+0x130>
 80049a2:	9105      	str	r1, [sp, #20]
 80049a4:	e7c4      	b.n	8004930 <_svfiprintf_r+0x130>
 80049a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80049aa:	4604      	mov	r4, r0
 80049ac:	2301      	movs	r3, #1
 80049ae:	e7f0      	b.n	8004992 <_svfiprintf_r+0x192>
 80049b0:	ab03      	add	r3, sp, #12
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	462a      	mov	r2, r5
 80049b6:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <_svfiprintf_r+0x1f4>)
 80049b8:	a904      	add	r1, sp, #16
 80049ba:	4638      	mov	r0, r7
 80049bc:	f3af 8000 	nop.w
 80049c0:	1c42      	adds	r2, r0, #1
 80049c2:	4606      	mov	r6, r0
 80049c4:	d1d6      	bne.n	8004974 <_svfiprintf_r+0x174>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	065b      	lsls	r3, r3, #25
 80049ca:	f53f af2d 	bmi.w	8004828 <_svfiprintf_r+0x28>
 80049ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049d0:	b01d      	add	sp, #116	; 0x74
 80049d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049d6:	ab03      	add	r3, sp, #12
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	462a      	mov	r2, r5
 80049dc:	4b05      	ldr	r3, [pc, #20]	; (80049f4 <_svfiprintf_r+0x1f4>)
 80049de:	a904      	add	r1, sp, #16
 80049e0:	4638      	mov	r0, r7
 80049e2:	f000 f9bd 	bl	8004d60 <_printf_i>
 80049e6:	e7eb      	b.n	80049c0 <_svfiprintf_r+0x1c0>
 80049e8:	08005710 	.word	0x08005710
 80049ec:	0800571a 	.word	0x0800571a
 80049f0:	00000000 	.word	0x00000000
 80049f4:	0800474d 	.word	0x0800474d
 80049f8:	08005716 	.word	0x08005716

080049fc <__sfputc_r>:
 80049fc:	6893      	ldr	r3, [r2, #8]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	b410      	push	{r4}
 8004a04:	6093      	str	r3, [r2, #8]
 8004a06:	da08      	bge.n	8004a1a <__sfputc_r+0x1e>
 8004a08:	6994      	ldr	r4, [r2, #24]
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	db01      	blt.n	8004a12 <__sfputc_r+0x16>
 8004a0e:	290a      	cmp	r1, #10
 8004a10:	d103      	bne.n	8004a1a <__sfputc_r+0x1e>
 8004a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a16:	f000 bb73 	b.w	8005100 <__swbuf_r>
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	1c58      	adds	r0, r3, #1
 8004a1e:	6010      	str	r0, [r2, #0]
 8004a20:	7019      	strb	r1, [r3, #0]
 8004a22:	4608      	mov	r0, r1
 8004a24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <__sfputs_r>:
 8004a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a2c:	4606      	mov	r6, r0
 8004a2e:	460f      	mov	r7, r1
 8004a30:	4614      	mov	r4, r2
 8004a32:	18d5      	adds	r5, r2, r3
 8004a34:	42ac      	cmp	r4, r5
 8004a36:	d101      	bne.n	8004a3c <__sfputs_r+0x12>
 8004a38:	2000      	movs	r0, #0
 8004a3a:	e007      	b.n	8004a4c <__sfputs_r+0x22>
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	463a      	mov	r2, r7
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7ff ffda 	bl	80049fc <__sfputc_r>
 8004a48:	1c43      	adds	r3, r0, #1
 8004a4a:	d1f3      	bne.n	8004a34 <__sfputs_r+0xa>
 8004a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a50 <_vfiprintf_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	460d      	mov	r5, r1
 8004a56:	b09d      	sub	sp, #116	; 0x74
 8004a58:	4614      	mov	r4, r2
 8004a5a:	4698      	mov	r8, r3
 8004a5c:	4606      	mov	r6, r0
 8004a5e:	b118      	cbz	r0, 8004a68 <_vfiprintf_r+0x18>
 8004a60:	6a03      	ldr	r3, [r0, #32]
 8004a62:	b90b      	cbnz	r3, 8004a68 <_vfiprintf_r+0x18>
 8004a64:	f7ff fc52 	bl	800430c <__sinit>
 8004a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a6a:	07d9      	lsls	r1, r3, #31
 8004a6c:	d405      	bmi.n	8004a7a <_vfiprintf_r+0x2a>
 8004a6e:	89ab      	ldrh	r3, [r5, #12]
 8004a70:	059a      	lsls	r2, r3, #22
 8004a72:	d402      	bmi.n	8004a7a <_vfiprintf_r+0x2a>
 8004a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a76:	f7ff fd6e 	bl	8004556 <__retarget_lock_acquire_recursive>
 8004a7a:	89ab      	ldrh	r3, [r5, #12]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	d501      	bpl.n	8004a84 <_vfiprintf_r+0x34>
 8004a80:	692b      	ldr	r3, [r5, #16]
 8004a82:	b99b      	cbnz	r3, 8004aac <_vfiprintf_r+0x5c>
 8004a84:	4629      	mov	r1, r5
 8004a86:	4630      	mov	r0, r6
 8004a88:	f000 fb78 	bl	800517c <__swsetup_r>
 8004a8c:	b170      	cbz	r0, 8004aac <_vfiprintf_r+0x5c>
 8004a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a90:	07dc      	lsls	r4, r3, #31
 8004a92:	d504      	bpl.n	8004a9e <_vfiprintf_r+0x4e>
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a98:	b01d      	add	sp, #116	; 0x74
 8004a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9e:	89ab      	ldrh	r3, [r5, #12]
 8004aa0:	0598      	lsls	r0, r3, #22
 8004aa2:	d4f7      	bmi.n	8004a94 <_vfiprintf_r+0x44>
 8004aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004aa6:	f7ff fd57 	bl	8004558 <__retarget_lock_release_recursive>
 8004aaa:	e7f3      	b.n	8004a94 <_vfiprintf_r+0x44>
 8004aac:	2300      	movs	r3, #0
 8004aae:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab0:	2320      	movs	r3, #32
 8004ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aba:	2330      	movs	r3, #48	; 0x30
 8004abc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c70 <_vfiprintf_r+0x220>
 8004ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ac4:	f04f 0901 	mov.w	r9, #1
 8004ac8:	4623      	mov	r3, r4
 8004aca:	469a      	mov	sl, r3
 8004acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ad0:	b10a      	cbz	r2, 8004ad6 <_vfiprintf_r+0x86>
 8004ad2:	2a25      	cmp	r2, #37	; 0x25
 8004ad4:	d1f9      	bne.n	8004aca <_vfiprintf_r+0x7a>
 8004ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8004ada:	d00b      	beq.n	8004af4 <_vfiprintf_r+0xa4>
 8004adc:	465b      	mov	r3, fp
 8004ade:	4622      	mov	r2, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f7ff ffa1 	bl	8004a2a <__sfputs_r>
 8004ae8:	3001      	adds	r0, #1
 8004aea:	f000 80a9 	beq.w	8004c40 <_vfiprintf_r+0x1f0>
 8004aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004af0:	445a      	add	r2, fp
 8004af2:	9209      	str	r2, [sp, #36]	; 0x24
 8004af4:	f89a 3000 	ldrb.w	r3, [sl]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a1 	beq.w	8004c40 <_vfiprintf_r+0x1f0>
 8004afe:	2300      	movs	r3, #0
 8004b00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b08:	f10a 0a01 	add.w	sl, sl, #1
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	9307      	str	r3, [sp, #28]
 8004b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b14:	931a      	str	r3, [sp, #104]	; 0x68
 8004b16:	4654      	mov	r4, sl
 8004b18:	2205      	movs	r2, #5
 8004b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b1e:	4854      	ldr	r0, [pc, #336]	; (8004c70 <_vfiprintf_r+0x220>)
 8004b20:	f7fb fb6e 	bl	8000200 <memchr>
 8004b24:	9a04      	ldr	r2, [sp, #16]
 8004b26:	b9d8      	cbnz	r0, 8004b60 <_vfiprintf_r+0x110>
 8004b28:	06d1      	lsls	r1, r2, #27
 8004b2a:	bf44      	itt	mi
 8004b2c:	2320      	movmi	r3, #32
 8004b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b32:	0713      	lsls	r3, r2, #28
 8004b34:	bf44      	itt	mi
 8004b36:	232b      	movmi	r3, #43	; 0x2b
 8004b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b40:	2b2a      	cmp	r3, #42	; 0x2a
 8004b42:	d015      	beq.n	8004b70 <_vfiprintf_r+0x120>
 8004b44:	9a07      	ldr	r2, [sp, #28]
 8004b46:	4654      	mov	r4, sl
 8004b48:	2000      	movs	r0, #0
 8004b4a:	f04f 0c0a 	mov.w	ip, #10
 8004b4e:	4621      	mov	r1, r4
 8004b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b54:	3b30      	subs	r3, #48	; 0x30
 8004b56:	2b09      	cmp	r3, #9
 8004b58:	d94d      	bls.n	8004bf6 <_vfiprintf_r+0x1a6>
 8004b5a:	b1b0      	cbz	r0, 8004b8a <_vfiprintf_r+0x13a>
 8004b5c:	9207      	str	r2, [sp, #28]
 8004b5e:	e014      	b.n	8004b8a <_vfiprintf_r+0x13a>
 8004b60:	eba0 0308 	sub.w	r3, r0, r8
 8004b64:	fa09 f303 	lsl.w	r3, r9, r3
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	9304      	str	r3, [sp, #16]
 8004b6c:	46a2      	mov	sl, r4
 8004b6e:	e7d2      	b.n	8004b16 <_vfiprintf_r+0xc6>
 8004b70:	9b03      	ldr	r3, [sp, #12]
 8004b72:	1d19      	adds	r1, r3, #4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	9103      	str	r1, [sp, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	bfbb      	ittet	lt
 8004b7c:	425b      	neglt	r3, r3
 8004b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b82:	9307      	strge	r3, [sp, #28]
 8004b84:	9307      	strlt	r3, [sp, #28]
 8004b86:	bfb8      	it	lt
 8004b88:	9204      	strlt	r2, [sp, #16]
 8004b8a:	7823      	ldrb	r3, [r4, #0]
 8004b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8004b8e:	d10c      	bne.n	8004baa <_vfiprintf_r+0x15a>
 8004b90:	7863      	ldrb	r3, [r4, #1]
 8004b92:	2b2a      	cmp	r3, #42	; 0x2a
 8004b94:	d134      	bne.n	8004c00 <_vfiprintf_r+0x1b0>
 8004b96:	9b03      	ldr	r3, [sp, #12]
 8004b98:	1d1a      	adds	r2, r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	9203      	str	r2, [sp, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	bfb8      	it	lt
 8004ba2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004ba6:	3402      	adds	r4, #2
 8004ba8:	9305      	str	r3, [sp, #20]
 8004baa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c80 <_vfiprintf_r+0x230>
 8004bae:	7821      	ldrb	r1, [r4, #0]
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	4650      	mov	r0, sl
 8004bb4:	f7fb fb24 	bl	8000200 <memchr>
 8004bb8:	b138      	cbz	r0, 8004bca <_vfiprintf_r+0x17a>
 8004bba:	9b04      	ldr	r3, [sp, #16]
 8004bbc:	eba0 000a 	sub.w	r0, r0, sl
 8004bc0:	2240      	movs	r2, #64	; 0x40
 8004bc2:	4082      	lsls	r2, r0
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	3401      	adds	r4, #1
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bce:	4829      	ldr	r0, [pc, #164]	; (8004c74 <_vfiprintf_r+0x224>)
 8004bd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bd4:	2206      	movs	r2, #6
 8004bd6:	f7fb fb13 	bl	8000200 <memchr>
 8004bda:	2800      	cmp	r0, #0
 8004bdc:	d03f      	beq.n	8004c5e <_vfiprintf_r+0x20e>
 8004bde:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <_vfiprintf_r+0x228>)
 8004be0:	bb1b      	cbnz	r3, 8004c2a <_vfiprintf_r+0x1da>
 8004be2:	9b03      	ldr	r3, [sp, #12]
 8004be4:	3307      	adds	r3, #7
 8004be6:	f023 0307 	bic.w	r3, r3, #7
 8004bea:	3308      	adds	r3, #8
 8004bec:	9303      	str	r3, [sp, #12]
 8004bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf0:	443b      	add	r3, r7
 8004bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bf4:	e768      	b.n	8004ac8 <_vfiprintf_r+0x78>
 8004bf6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bfa:	460c      	mov	r4, r1
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	e7a6      	b.n	8004b4e <_vfiprintf_r+0xfe>
 8004c00:	2300      	movs	r3, #0
 8004c02:	3401      	adds	r4, #1
 8004c04:	9305      	str	r3, [sp, #20]
 8004c06:	4619      	mov	r1, r3
 8004c08:	f04f 0c0a 	mov.w	ip, #10
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c12:	3a30      	subs	r2, #48	; 0x30
 8004c14:	2a09      	cmp	r2, #9
 8004c16:	d903      	bls.n	8004c20 <_vfiprintf_r+0x1d0>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0c6      	beq.n	8004baa <_vfiprintf_r+0x15a>
 8004c1c:	9105      	str	r1, [sp, #20]
 8004c1e:	e7c4      	b.n	8004baa <_vfiprintf_r+0x15a>
 8004c20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c24:	4604      	mov	r4, r0
 8004c26:	2301      	movs	r3, #1
 8004c28:	e7f0      	b.n	8004c0c <_vfiprintf_r+0x1bc>
 8004c2a:	ab03      	add	r3, sp, #12
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <_vfiprintf_r+0x22c>)
 8004c32:	a904      	add	r1, sp, #16
 8004c34:	4630      	mov	r0, r6
 8004c36:	f3af 8000 	nop.w
 8004c3a:	4607      	mov	r7, r0
 8004c3c:	1c78      	adds	r0, r7, #1
 8004c3e:	d1d6      	bne.n	8004bee <_vfiprintf_r+0x19e>
 8004c40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c42:	07d9      	lsls	r1, r3, #31
 8004c44:	d405      	bmi.n	8004c52 <_vfiprintf_r+0x202>
 8004c46:	89ab      	ldrh	r3, [r5, #12]
 8004c48:	059a      	lsls	r2, r3, #22
 8004c4a:	d402      	bmi.n	8004c52 <_vfiprintf_r+0x202>
 8004c4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c4e:	f7ff fc83 	bl	8004558 <__retarget_lock_release_recursive>
 8004c52:	89ab      	ldrh	r3, [r5, #12]
 8004c54:	065b      	lsls	r3, r3, #25
 8004c56:	f53f af1d 	bmi.w	8004a94 <_vfiprintf_r+0x44>
 8004c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c5c:	e71c      	b.n	8004a98 <_vfiprintf_r+0x48>
 8004c5e:	ab03      	add	r3, sp, #12
 8004c60:	9300      	str	r3, [sp, #0]
 8004c62:	462a      	mov	r2, r5
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <_vfiprintf_r+0x22c>)
 8004c66:	a904      	add	r1, sp, #16
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f879 	bl	8004d60 <_printf_i>
 8004c6e:	e7e4      	b.n	8004c3a <_vfiprintf_r+0x1ea>
 8004c70:	08005710 	.word	0x08005710
 8004c74:	0800571a 	.word	0x0800571a
 8004c78:	00000000 	.word	0x00000000
 8004c7c:	08004a2b 	.word	0x08004a2b
 8004c80:	08005716 	.word	0x08005716

08004c84 <_printf_common>:
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	4616      	mov	r6, r2
 8004c8a:	4699      	mov	r9, r3
 8004c8c:	688a      	ldr	r2, [r1, #8]
 8004c8e:	690b      	ldr	r3, [r1, #16]
 8004c90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c94:	4293      	cmp	r3, r2
 8004c96:	bfb8      	it	lt
 8004c98:	4613      	movlt	r3, r2
 8004c9a:	6033      	str	r3, [r6, #0]
 8004c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	b10a      	cbz	r2, 8004caa <_printf_common+0x26>
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	6033      	str	r3, [r6, #0]
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	0699      	lsls	r1, r3, #26
 8004cae:	bf42      	ittt	mi
 8004cb0:	6833      	ldrmi	r3, [r6, #0]
 8004cb2:	3302      	addmi	r3, #2
 8004cb4:	6033      	strmi	r3, [r6, #0]
 8004cb6:	6825      	ldr	r5, [r4, #0]
 8004cb8:	f015 0506 	ands.w	r5, r5, #6
 8004cbc:	d106      	bne.n	8004ccc <_printf_common+0x48>
 8004cbe:	f104 0a19 	add.w	sl, r4, #25
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	6832      	ldr	r2, [r6, #0]
 8004cc6:	1a9b      	subs	r3, r3, r2
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dc26      	bgt.n	8004d1a <_printf_common+0x96>
 8004ccc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cd0:	1e13      	subs	r3, r2, #0
 8004cd2:	6822      	ldr	r2, [r4, #0]
 8004cd4:	bf18      	it	ne
 8004cd6:	2301      	movne	r3, #1
 8004cd8:	0692      	lsls	r2, r2, #26
 8004cda:	d42b      	bmi.n	8004d34 <_printf_common+0xb0>
 8004cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ce0:	4649      	mov	r1, r9
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d01e      	beq.n	8004d28 <_printf_common+0xa4>
 8004cea:	6823      	ldr	r3, [r4, #0]
 8004cec:	6922      	ldr	r2, [r4, #16]
 8004cee:	f003 0306 	and.w	r3, r3, #6
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	bf02      	ittt	eq
 8004cf6:	68e5      	ldreq	r5, [r4, #12]
 8004cf8:	6833      	ldreq	r3, [r6, #0]
 8004cfa:	1aed      	subeq	r5, r5, r3
 8004cfc:	68a3      	ldr	r3, [r4, #8]
 8004cfe:	bf0c      	ite	eq
 8004d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d04:	2500      	movne	r5, #0
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bfc4      	itt	gt
 8004d0a:	1a9b      	subgt	r3, r3, r2
 8004d0c:	18ed      	addgt	r5, r5, r3
 8004d0e:	2600      	movs	r6, #0
 8004d10:	341a      	adds	r4, #26
 8004d12:	42b5      	cmp	r5, r6
 8004d14:	d11a      	bne.n	8004d4c <_printf_common+0xc8>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e008      	b.n	8004d2c <_printf_common+0xa8>
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	4652      	mov	r2, sl
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4638      	mov	r0, r7
 8004d22:	47c0      	blx	r8
 8004d24:	3001      	adds	r0, #1
 8004d26:	d103      	bne.n	8004d30 <_printf_common+0xac>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d30:	3501      	adds	r5, #1
 8004d32:	e7c6      	b.n	8004cc2 <_printf_common+0x3e>
 8004d34:	18e1      	adds	r1, r4, r3
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	2030      	movs	r0, #48	; 0x30
 8004d3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d3e:	4422      	add	r2, r4
 8004d40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d48:	3302      	adds	r3, #2
 8004d4a:	e7c7      	b.n	8004cdc <_printf_common+0x58>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4622      	mov	r2, r4
 8004d50:	4649      	mov	r1, r9
 8004d52:	4638      	mov	r0, r7
 8004d54:	47c0      	blx	r8
 8004d56:	3001      	adds	r0, #1
 8004d58:	d0e6      	beq.n	8004d28 <_printf_common+0xa4>
 8004d5a:	3601      	adds	r6, #1
 8004d5c:	e7d9      	b.n	8004d12 <_printf_common+0x8e>
	...

08004d60 <_printf_i>:
 8004d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d64:	7e0f      	ldrb	r7, [r1, #24]
 8004d66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d68:	2f78      	cmp	r7, #120	; 0x78
 8004d6a:	4691      	mov	r9, r2
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	460c      	mov	r4, r1
 8004d70:	469a      	mov	sl, r3
 8004d72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d76:	d807      	bhi.n	8004d88 <_printf_i+0x28>
 8004d78:	2f62      	cmp	r7, #98	; 0x62
 8004d7a:	d80a      	bhi.n	8004d92 <_printf_i+0x32>
 8004d7c:	2f00      	cmp	r7, #0
 8004d7e:	f000 80d4 	beq.w	8004f2a <_printf_i+0x1ca>
 8004d82:	2f58      	cmp	r7, #88	; 0x58
 8004d84:	f000 80c0 	beq.w	8004f08 <_printf_i+0x1a8>
 8004d88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d90:	e03a      	b.n	8004e08 <_printf_i+0xa8>
 8004d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d96:	2b15      	cmp	r3, #21
 8004d98:	d8f6      	bhi.n	8004d88 <_printf_i+0x28>
 8004d9a:	a101      	add	r1, pc, #4	; (adr r1, 8004da0 <_printf_i+0x40>)
 8004d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004da0:	08004df9 	.word	0x08004df9
 8004da4:	08004e0d 	.word	0x08004e0d
 8004da8:	08004d89 	.word	0x08004d89
 8004dac:	08004d89 	.word	0x08004d89
 8004db0:	08004d89 	.word	0x08004d89
 8004db4:	08004d89 	.word	0x08004d89
 8004db8:	08004e0d 	.word	0x08004e0d
 8004dbc:	08004d89 	.word	0x08004d89
 8004dc0:	08004d89 	.word	0x08004d89
 8004dc4:	08004d89 	.word	0x08004d89
 8004dc8:	08004d89 	.word	0x08004d89
 8004dcc:	08004f11 	.word	0x08004f11
 8004dd0:	08004e39 	.word	0x08004e39
 8004dd4:	08004ecb 	.word	0x08004ecb
 8004dd8:	08004d89 	.word	0x08004d89
 8004ddc:	08004d89 	.word	0x08004d89
 8004de0:	08004f33 	.word	0x08004f33
 8004de4:	08004d89 	.word	0x08004d89
 8004de8:	08004e39 	.word	0x08004e39
 8004dec:	08004d89 	.word	0x08004d89
 8004df0:	08004d89 	.word	0x08004d89
 8004df4:	08004ed3 	.word	0x08004ed3
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e09f      	b.n	8004f4c <_printf_i+0x1ec>
 8004e0c:	6820      	ldr	r0, [r4, #0]
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	0607      	lsls	r7, r0, #24
 8004e12:	f103 0104 	add.w	r1, r3, #4
 8004e16:	6029      	str	r1, [r5, #0]
 8004e18:	d501      	bpl.n	8004e1e <_printf_i+0xbe>
 8004e1a:	681e      	ldr	r6, [r3, #0]
 8004e1c:	e003      	b.n	8004e26 <_printf_i+0xc6>
 8004e1e:	0646      	lsls	r6, r0, #25
 8004e20:	d5fb      	bpl.n	8004e1a <_printf_i+0xba>
 8004e22:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e26:	2e00      	cmp	r6, #0
 8004e28:	da03      	bge.n	8004e32 <_printf_i+0xd2>
 8004e2a:	232d      	movs	r3, #45	; 0x2d
 8004e2c:	4276      	negs	r6, r6
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e32:	485a      	ldr	r0, [pc, #360]	; (8004f9c <_printf_i+0x23c>)
 8004e34:	230a      	movs	r3, #10
 8004e36:	e012      	b.n	8004e5e <_printf_i+0xfe>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	6820      	ldr	r0, [r4, #0]
 8004e3c:	1d19      	adds	r1, r3, #4
 8004e3e:	6029      	str	r1, [r5, #0]
 8004e40:	0605      	lsls	r5, r0, #24
 8004e42:	d501      	bpl.n	8004e48 <_printf_i+0xe8>
 8004e44:	681e      	ldr	r6, [r3, #0]
 8004e46:	e002      	b.n	8004e4e <_printf_i+0xee>
 8004e48:	0641      	lsls	r1, r0, #25
 8004e4a:	d5fb      	bpl.n	8004e44 <_printf_i+0xe4>
 8004e4c:	881e      	ldrh	r6, [r3, #0]
 8004e4e:	4853      	ldr	r0, [pc, #332]	; (8004f9c <_printf_i+0x23c>)
 8004e50:	2f6f      	cmp	r7, #111	; 0x6f
 8004e52:	bf0c      	ite	eq
 8004e54:	2308      	moveq	r3, #8
 8004e56:	230a      	movne	r3, #10
 8004e58:	2100      	movs	r1, #0
 8004e5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e5e:	6865      	ldr	r5, [r4, #4]
 8004e60:	60a5      	str	r5, [r4, #8]
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	bfa2      	ittt	ge
 8004e66:	6821      	ldrge	r1, [r4, #0]
 8004e68:	f021 0104 	bicge.w	r1, r1, #4
 8004e6c:	6021      	strge	r1, [r4, #0]
 8004e6e:	b90e      	cbnz	r6, 8004e74 <_printf_i+0x114>
 8004e70:	2d00      	cmp	r5, #0
 8004e72:	d04b      	beq.n	8004f0c <_printf_i+0x1ac>
 8004e74:	4615      	mov	r5, r2
 8004e76:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e7a:	fb03 6711 	mls	r7, r3, r1, r6
 8004e7e:	5dc7      	ldrb	r7, [r0, r7]
 8004e80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e84:	4637      	mov	r7, r6
 8004e86:	42bb      	cmp	r3, r7
 8004e88:	460e      	mov	r6, r1
 8004e8a:	d9f4      	bls.n	8004e76 <_printf_i+0x116>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d10b      	bne.n	8004ea8 <_printf_i+0x148>
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	07de      	lsls	r6, r3, #31
 8004e94:	d508      	bpl.n	8004ea8 <_printf_i+0x148>
 8004e96:	6923      	ldr	r3, [r4, #16]
 8004e98:	6861      	ldr	r1, [r4, #4]
 8004e9a:	4299      	cmp	r1, r3
 8004e9c:	bfde      	ittt	le
 8004e9e:	2330      	movle	r3, #48	; 0x30
 8004ea0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ea4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ea8:	1b52      	subs	r2, r2, r5
 8004eaa:	6122      	str	r2, [r4, #16]
 8004eac:	f8cd a000 	str.w	sl, [sp]
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	aa03      	add	r2, sp, #12
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	f7ff fee4 	bl	8004c84 <_printf_common>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d14a      	bne.n	8004f56 <_printf_i+0x1f6>
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec4:	b004      	add	sp, #16
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	f043 0320 	orr.w	r3, r3, #32
 8004ed0:	6023      	str	r3, [r4, #0]
 8004ed2:	4833      	ldr	r0, [pc, #204]	; (8004fa0 <_printf_i+0x240>)
 8004ed4:	2778      	movs	r7, #120	; 0x78
 8004ed6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	6829      	ldr	r1, [r5, #0]
 8004ede:	061f      	lsls	r7, r3, #24
 8004ee0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ee4:	d402      	bmi.n	8004eec <_printf_i+0x18c>
 8004ee6:	065f      	lsls	r7, r3, #25
 8004ee8:	bf48      	it	mi
 8004eea:	b2b6      	uxthmi	r6, r6
 8004eec:	07df      	lsls	r7, r3, #31
 8004eee:	bf48      	it	mi
 8004ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8004ef4:	6029      	str	r1, [r5, #0]
 8004ef6:	bf48      	it	mi
 8004ef8:	6023      	strmi	r3, [r4, #0]
 8004efa:	b91e      	cbnz	r6, 8004f04 <_printf_i+0x1a4>
 8004efc:	6823      	ldr	r3, [r4, #0]
 8004efe:	f023 0320 	bic.w	r3, r3, #32
 8004f02:	6023      	str	r3, [r4, #0]
 8004f04:	2310      	movs	r3, #16
 8004f06:	e7a7      	b.n	8004e58 <_printf_i+0xf8>
 8004f08:	4824      	ldr	r0, [pc, #144]	; (8004f9c <_printf_i+0x23c>)
 8004f0a:	e7e4      	b.n	8004ed6 <_printf_i+0x176>
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	e7bd      	b.n	8004e8c <_printf_i+0x12c>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	6826      	ldr	r6, [r4, #0]
 8004f14:	6961      	ldr	r1, [r4, #20]
 8004f16:	1d18      	adds	r0, r3, #4
 8004f18:	6028      	str	r0, [r5, #0]
 8004f1a:	0635      	lsls	r5, r6, #24
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	d501      	bpl.n	8004f24 <_printf_i+0x1c4>
 8004f20:	6019      	str	r1, [r3, #0]
 8004f22:	e002      	b.n	8004f2a <_printf_i+0x1ca>
 8004f24:	0670      	lsls	r0, r6, #25
 8004f26:	d5fb      	bpl.n	8004f20 <_printf_i+0x1c0>
 8004f28:	8019      	strh	r1, [r3, #0]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	4615      	mov	r5, r2
 8004f30:	e7bc      	b.n	8004eac <_printf_i+0x14c>
 8004f32:	682b      	ldr	r3, [r5, #0]
 8004f34:	1d1a      	adds	r2, r3, #4
 8004f36:	602a      	str	r2, [r5, #0]
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f7fb f95e 	bl	8000200 <memchr>
 8004f44:	b108      	cbz	r0, 8004f4a <_printf_i+0x1ea>
 8004f46:	1b40      	subs	r0, r0, r5
 8004f48:	6060      	str	r0, [r4, #4]
 8004f4a:	6863      	ldr	r3, [r4, #4]
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f54:	e7aa      	b.n	8004eac <_printf_i+0x14c>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	462a      	mov	r2, r5
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d0ad      	beq.n	8004ec0 <_printf_i+0x160>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	079b      	lsls	r3, r3, #30
 8004f68:	d413      	bmi.n	8004f92 <_printf_i+0x232>
 8004f6a:	68e0      	ldr	r0, [r4, #12]
 8004f6c:	9b03      	ldr	r3, [sp, #12]
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	bfb8      	it	lt
 8004f72:	4618      	movlt	r0, r3
 8004f74:	e7a6      	b.n	8004ec4 <_printf_i+0x164>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4632      	mov	r2, r6
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d09d      	beq.n	8004ec0 <_printf_i+0x160>
 8004f84:	3501      	adds	r5, #1
 8004f86:	68e3      	ldr	r3, [r4, #12]
 8004f88:	9903      	ldr	r1, [sp, #12]
 8004f8a:	1a5b      	subs	r3, r3, r1
 8004f8c:	42ab      	cmp	r3, r5
 8004f8e:	dcf2      	bgt.n	8004f76 <_printf_i+0x216>
 8004f90:	e7eb      	b.n	8004f6a <_printf_i+0x20a>
 8004f92:	2500      	movs	r5, #0
 8004f94:	f104 0619 	add.w	r6, r4, #25
 8004f98:	e7f5      	b.n	8004f86 <_printf_i+0x226>
 8004f9a:	bf00      	nop
 8004f9c:	08005721 	.word	0x08005721
 8004fa0:	08005732 	.word	0x08005732

08004fa4 <__sflush_r>:
 8004fa4:	898a      	ldrh	r2, [r1, #12]
 8004fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004faa:	4605      	mov	r5, r0
 8004fac:	0710      	lsls	r0, r2, #28
 8004fae:	460c      	mov	r4, r1
 8004fb0:	d458      	bmi.n	8005064 <__sflush_r+0xc0>
 8004fb2:	684b      	ldr	r3, [r1, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	dc05      	bgt.n	8004fc4 <__sflush_r+0x20>
 8004fb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	dc02      	bgt.n	8004fc4 <__sflush_r+0x20>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	d0f9      	beq.n	8004fbe <__sflush_r+0x1a>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fd0:	682f      	ldr	r7, [r5, #0]
 8004fd2:	6a21      	ldr	r1, [r4, #32]
 8004fd4:	602b      	str	r3, [r5, #0]
 8004fd6:	d032      	beq.n	800503e <__sflush_r+0x9a>
 8004fd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fda:	89a3      	ldrh	r3, [r4, #12]
 8004fdc:	075a      	lsls	r2, r3, #29
 8004fde:	d505      	bpl.n	8004fec <__sflush_r+0x48>
 8004fe0:	6863      	ldr	r3, [r4, #4]
 8004fe2:	1ac0      	subs	r0, r0, r3
 8004fe4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004fe6:	b10b      	cbz	r3, 8004fec <__sflush_r+0x48>
 8004fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fea:	1ac0      	subs	r0, r0, r3
 8004fec:	2300      	movs	r3, #0
 8004fee:	4602      	mov	r2, r0
 8004ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff2:	6a21      	ldr	r1, [r4, #32]
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	47b0      	blx	r6
 8004ff8:	1c43      	adds	r3, r0, #1
 8004ffa:	89a3      	ldrh	r3, [r4, #12]
 8004ffc:	d106      	bne.n	800500c <__sflush_r+0x68>
 8004ffe:	6829      	ldr	r1, [r5, #0]
 8005000:	291d      	cmp	r1, #29
 8005002:	d82b      	bhi.n	800505c <__sflush_r+0xb8>
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <__sflush_r+0x108>)
 8005006:	410a      	asrs	r2, r1
 8005008:	07d6      	lsls	r6, r2, #31
 800500a:	d427      	bmi.n	800505c <__sflush_r+0xb8>
 800500c:	2200      	movs	r2, #0
 800500e:	6062      	str	r2, [r4, #4]
 8005010:	04d9      	lsls	r1, r3, #19
 8005012:	6922      	ldr	r2, [r4, #16]
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	d504      	bpl.n	8005022 <__sflush_r+0x7e>
 8005018:	1c42      	adds	r2, r0, #1
 800501a:	d101      	bne.n	8005020 <__sflush_r+0x7c>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b903      	cbnz	r3, 8005022 <__sflush_r+0x7e>
 8005020:	6560      	str	r0, [r4, #84]	; 0x54
 8005022:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005024:	602f      	str	r7, [r5, #0]
 8005026:	2900      	cmp	r1, #0
 8005028:	d0c9      	beq.n	8004fbe <__sflush_r+0x1a>
 800502a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800502e:	4299      	cmp	r1, r3
 8005030:	d002      	beq.n	8005038 <__sflush_r+0x94>
 8005032:	4628      	mov	r0, r5
 8005034:	f7ff fa92 	bl	800455c <_free_r>
 8005038:	2000      	movs	r0, #0
 800503a:	6360      	str	r0, [r4, #52]	; 0x34
 800503c:	e7c0      	b.n	8004fc0 <__sflush_r+0x1c>
 800503e:	2301      	movs	r3, #1
 8005040:	4628      	mov	r0, r5
 8005042:	47b0      	blx	r6
 8005044:	1c41      	adds	r1, r0, #1
 8005046:	d1c8      	bne.n	8004fda <__sflush_r+0x36>
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d0c5      	beq.n	8004fda <__sflush_r+0x36>
 800504e:	2b1d      	cmp	r3, #29
 8005050:	d001      	beq.n	8005056 <__sflush_r+0xb2>
 8005052:	2b16      	cmp	r3, #22
 8005054:	d101      	bne.n	800505a <__sflush_r+0xb6>
 8005056:	602f      	str	r7, [r5, #0]
 8005058:	e7b1      	b.n	8004fbe <__sflush_r+0x1a>
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	e7ad      	b.n	8004fc0 <__sflush_r+0x1c>
 8005064:	690f      	ldr	r7, [r1, #16]
 8005066:	2f00      	cmp	r7, #0
 8005068:	d0a9      	beq.n	8004fbe <__sflush_r+0x1a>
 800506a:	0793      	lsls	r3, r2, #30
 800506c:	680e      	ldr	r6, [r1, #0]
 800506e:	bf08      	it	eq
 8005070:	694b      	ldreq	r3, [r1, #20]
 8005072:	600f      	str	r7, [r1, #0]
 8005074:	bf18      	it	ne
 8005076:	2300      	movne	r3, #0
 8005078:	eba6 0807 	sub.w	r8, r6, r7
 800507c:	608b      	str	r3, [r1, #8]
 800507e:	f1b8 0f00 	cmp.w	r8, #0
 8005082:	dd9c      	ble.n	8004fbe <__sflush_r+0x1a>
 8005084:	6a21      	ldr	r1, [r4, #32]
 8005086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005088:	4643      	mov	r3, r8
 800508a:	463a      	mov	r2, r7
 800508c:	4628      	mov	r0, r5
 800508e:	47b0      	blx	r6
 8005090:	2800      	cmp	r0, #0
 8005092:	dc06      	bgt.n	80050a2 <__sflush_r+0xfe>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050a0:	e78e      	b.n	8004fc0 <__sflush_r+0x1c>
 80050a2:	4407      	add	r7, r0
 80050a4:	eba8 0800 	sub.w	r8, r8, r0
 80050a8:	e7e9      	b.n	800507e <__sflush_r+0xda>
 80050aa:	bf00      	nop
 80050ac:	dfbffffe 	.word	0xdfbffffe

080050b0 <_fflush_r>:
 80050b0:	b538      	push	{r3, r4, r5, lr}
 80050b2:	690b      	ldr	r3, [r1, #16]
 80050b4:	4605      	mov	r5, r0
 80050b6:	460c      	mov	r4, r1
 80050b8:	b913      	cbnz	r3, 80050c0 <_fflush_r+0x10>
 80050ba:	2500      	movs	r5, #0
 80050bc:	4628      	mov	r0, r5
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	b118      	cbz	r0, 80050ca <_fflush_r+0x1a>
 80050c2:	6a03      	ldr	r3, [r0, #32]
 80050c4:	b90b      	cbnz	r3, 80050ca <_fflush_r+0x1a>
 80050c6:	f7ff f921 	bl	800430c <__sinit>
 80050ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f3      	beq.n	80050ba <_fflush_r+0xa>
 80050d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050d4:	07d0      	lsls	r0, r2, #31
 80050d6:	d404      	bmi.n	80050e2 <_fflush_r+0x32>
 80050d8:	0599      	lsls	r1, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_fflush_r+0x32>
 80050dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050de:	f7ff fa3a 	bl	8004556 <__retarget_lock_acquire_recursive>
 80050e2:	4628      	mov	r0, r5
 80050e4:	4621      	mov	r1, r4
 80050e6:	f7ff ff5d 	bl	8004fa4 <__sflush_r>
 80050ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050ec:	07da      	lsls	r2, r3, #31
 80050ee:	4605      	mov	r5, r0
 80050f0:	d4e4      	bmi.n	80050bc <_fflush_r+0xc>
 80050f2:	89a3      	ldrh	r3, [r4, #12]
 80050f4:	059b      	lsls	r3, r3, #22
 80050f6:	d4e1      	bmi.n	80050bc <_fflush_r+0xc>
 80050f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050fa:	f7ff fa2d 	bl	8004558 <__retarget_lock_release_recursive>
 80050fe:	e7dd      	b.n	80050bc <_fflush_r+0xc>

08005100 <__swbuf_r>:
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005102:	460e      	mov	r6, r1
 8005104:	4614      	mov	r4, r2
 8005106:	4605      	mov	r5, r0
 8005108:	b118      	cbz	r0, 8005112 <__swbuf_r+0x12>
 800510a:	6a03      	ldr	r3, [r0, #32]
 800510c:	b90b      	cbnz	r3, 8005112 <__swbuf_r+0x12>
 800510e:	f7ff f8fd 	bl	800430c <__sinit>
 8005112:	69a3      	ldr	r3, [r4, #24]
 8005114:	60a3      	str	r3, [r4, #8]
 8005116:	89a3      	ldrh	r3, [r4, #12]
 8005118:	071a      	lsls	r2, r3, #28
 800511a:	d525      	bpl.n	8005168 <__swbuf_r+0x68>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	b31b      	cbz	r3, 8005168 <__swbuf_r+0x68>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6922      	ldr	r2, [r4, #16]
 8005124:	1a98      	subs	r0, r3, r2
 8005126:	6963      	ldr	r3, [r4, #20]
 8005128:	b2f6      	uxtb	r6, r6
 800512a:	4283      	cmp	r3, r0
 800512c:	4637      	mov	r7, r6
 800512e:	dc04      	bgt.n	800513a <__swbuf_r+0x3a>
 8005130:	4621      	mov	r1, r4
 8005132:	4628      	mov	r0, r5
 8005134:	f7ff ffbc 	bl	80050b0 <_fflush_r>
 8005138:	b9e0      	cbnz	r0, 8005174 <__swbuf_r+0x74>
 800513a:	68a3      	ldr	r3, [r4, #8]
 800513c:	3b01      	subs	r3, #1
 800513e:	60a3      	str	r3, [r4, #8]
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	6022      	str	r2, [r4, #0]
 8005146:	701e      	strb	r6, [r3, #0]
 8005148:	6962      	ldr	r2, [r4, #20]
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	429a      	cmp	r2, r3
 800514e:	d004      	beq.n	800515a <__swbuf_r+0x5a>
 8005150:	89a3      	ldrh	r3, [r4, #12]
 8005152:	07db      	lsls	r3, r3, #31
 8005154:	d506      	bpl.n	8005164 <__swbuf_r+0x64>
 8005156:	2e0a      	cmp	r6, #10
 8005158:	d104      	bne.n	8005164 <__swbuf_r+0x64>
 800515a:	4621      	mov	r1, r4
 800515c:	4628      	mov	r0, r5
 800515e:	f7ff ffa7 	bl	80050b0 <_fflush_r>
 8005162:	b938      	cbnz	r0, 8005174 <__swbuf_r+0x74>
 8005164:	4638      	mov	r0, r7
 8005166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005168:	4621      	mov	r1, r4
 800516a:	4628      	mov	r0, r5
 800516c:	f000 f806 	bl	800517c <__swsetup_r>
 8005170:	2800      	cmp	r0, #0
 8005172:	d0d5      	beq.n	8005120 <__swbuf_r+0x20>
 8005174:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005178:	e7f4      	b.n	8005164 <__swbuf_r+0x64>
	...

0800517c <__swsetup_r>:
 800517c:	b538      	push	{r3, r4, r5, lr}
 800517e:	4b2a      	ldr	r3, [pc, #168]	; (8005228 <__swsetup_r+0xac>)
 8005180:	4605      	mov	r5, r0
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	460c      	mov	r4, r1
 8005186:	b118      	cbz	r0, 8005190 <__swsetup_r+0x14>
 8005188:	6a03      	ldr	r3, [r0, #32]
 800518a:	b90b      	cbnz	r3, 8005190 <__swsetup_r+0x14>
 800518c:	f7ff f8be 	bl	800430c <__sinit>
 8005190:	89a3      	ldrh	r3, [r4, #12]
 8005192:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005196:	0718      	lsls	r0, r3, #28
 8005198:	d422      	bmi.n	80051e0 <__swsetup_r+0x64>
 800519a:	06d9      	lsls	r1, r3, #27
 800519c:	d407      	bmi.n	80051ae <__swsetup_r+0x32>
 800519e:	2309      	movs	r3, #9
 80051a0:	602b      	str	r3, [r5, #0]
 80051a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051a6:	81a3      	strh	r3, [r4, #12]
 80051a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ac:	e034      	b.n	8005218 <__swsetup_r+0x9c>
 80051ae:	0758      	lsls	r0, r3, #29
 80051b0:	d512      	bpl.n	80051d8 <__swsetup_r+0x5c>
 80051b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051b4:	b141      	cbz	r1, 80051c8 <__swsetup_r+0x4c>
 80051b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051ba:	4299      	cmp	r1, r3
 80051bc:	d002      	beq.n	80051c4 <__swsetup_r+0x48>
 80051be:	4628      	mov	r0, r5
 80051c0:	f7ff f9cc 	bl	800455c <_free_r>
 80051c4:	2300      	movs	r3, #0
 80051c6:	6363      	str	r3, [r4, #52]	; 0x34
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051ce:	81a3      	strh	r3, [r4, #12]
 80051d0:	2300      	movs	r3, #0
 80051d2:	6063      	str	r3, [r4, #4]
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	6023      	str	r3, [r4, #0]
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f043 0308 	orr.w	r3, r3, #8
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	b94b      	cbnz	r3, 80051f8 <__swsetup_r+0x7c>
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ee:	d003      	beq.n	80051f8 <__swsetup_r+0x7c>
 80051f0:	4621      	mov	r1, r4
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f8a7 	bl	8005346 <__smakebuf_r>
 80051f8:	89a0      	ldrh	r0, [r4, #12]
 80051fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051fe:	f010 0301 	ands.w	r3, r0, #1
 8005202:	d00a      	beq.n	800521a <__swsetup_r+0x9e>
 8005204:	2300      	movs	r3, #0
 8005206:	60a3      	str	r3, [r4, #8]
 8005208:	6963      	ldr	r3, [r4, #20]
 800520a:	425b      	negs	r3, r3
 800520c:	61a3      	str	r3, [r4, #24]
 800520e:	6923      	ldr	r3, [r4, #16]
 8005210:	b943      	cbnz	r3, 8005224 <__swsetup_r+0xa8>
 8005212:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005216:	d1c4      	bne.n	80051a2 <__swsetup_r+0x26>
 8005218:	bd38      	pop	{r3, r4, r5, pc}
 800521a:	0781      	lsls	r1, r0, #30
 800521c:	bf58      	it	pl
 800521e:	6963      	ldrpl	r3, [r4, #20]
 8005220:	60a3      	str	r3, [r4, #8]
 8005222:	e7f4      	b.n	800520e <__swsetup_r+0x92>
 8005224:	2000      	movs	r0, #0
 8005226:	e7f7      	b.n	8005218 <__swsetup_r+0x9c>
 8005228:	20000074 	.word	0x20000074

0800522c <memmove>:
 800522c:	4288      	cmp	r0, r1
 800522e:	b510      	push	{r4, lr}
 8005230:	eb01 0402 	add.w	r4, r1, r2
 8005234:	d902      	bls.n	800523c <memmove+0x10>
 8005236:	4284      	cmp	r4, r0
 8005238:	4623      	mov	r3, r4
 800523a:	d807      	bhi.n	800524c <memmove+0x20>
 800523c:	1e43      	subs	r3, r0, #1
 800523e:	42a1      	cmp	r1, r4
 8005240:	d008      	beq.n	8005254 <memmove+0x28>
 8005242:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005246:	f803 2f01 	strb.w	r2, [r3, #1]!
 800524a:	e7f8      	b.n	800523e <memmove+0x12>
 800524c:	4402      	add	r2, r0
 800524e:	4601      	mov	r1, r0
 8005250:	428a      	cmp	r2, r1
 8005252:	d100      	bne.n	8005256 <memmove+0x2a>
 8005254:	bd10      	pop	{r4, pc}
 8005256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800525a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800525e:	e7f7      	b.n	8005250 <memmove+0x24>

08005260 <_sbrk_r>:
 8005260:	b538      	push	{r3, r4, r5, lr}
 8005262:	4d06      	ldr	r5, [pc, #24]	; (800527c <_sbrk_r+0x1c>)
 8005264:	2300      	movs	r3, #0
 8005266:	4604      	mov	r4, r0
 8005268:	4608      	mov	r0, r1
 800526a:	602b      	str	r3, [r5, #0]
 800526c:	f7fb fdf0 	bl	8000e50 <_sbrk>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_sbrk_r+0x1a>
 8005274:	682b      	ldr	r3, [r5, #0]
 8005276:	b103      	cbz	r3, 800527a <_sbrk_r+0x1a>
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	20000354 	.word	0x20000354

08005280 <memcpy>:
 8005280:	440a      	add	r2, r1
 8005282:	4291      	cmp	r1, r2
 8005284:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005288:	d100      	bne.n	800528c <memcpy+0xc>
 800528a:	4770      	bx	lr
 800528c:	b510      	push	{r4, lr}
 800528e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005292:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005296:	4291      	cmp	r1, r2
 8005298:	d1f9      	bne.n	800528e <memcpy+0xe>
 800529a:	bd10      	pop	{r4, pc}

0800529c <_realloc_r>:
 800529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a0:	4680      	mov	r8, r0
 80052a2:	4614      	mov	r4, r2
 80052a4:	460e      	mov	r6, r1
 80052a6:	b921      	cbnz	r1, 80052b2 <_realloc_r+0x16>
 80052a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ac:	4611      	mov	r1, r2
 80052ae:	f7ff b9c1 	b.w	8004634 <_malloc_r>
 80052b2:	b92a      	cbnz	r2, 80052c0 <_realloc_r+0x24>
 80052b4:	f7ff f952 	bl	800455c <_free_r>
 80052b8:	4625      	mov	r5, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c0:	f000 f8a0 	bl	8005404 <_malloc_usable_size_r>
 80052c4:	4284      	cmp	r4, r0
 80052c6:	4607      	mov	r7, r0
 80052c8:	d802      	bhi.n	80052d0 <_realloc_r+0x34>
 80052ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80052ce:	d812      	bhi.n	80052f6 <_realloc_r+0x5a>
 80052d0:	4621      	mov	r1, r4
 80052d2:	4640      	mov	r0, r8
 80052d4:	f7ff f9ae 	bl	8004634 <_malloc_r>
 80052d8:	4605      	mov	r5, r0
 80052da:	2800      	cmp	r0, #0
 80052dc:	d0ed      	beq.n	80052ba <_realloc_r+0x1e>
 80052de:	42bc      	cmp	r4, r7
 80052e0:	4622      	mov	r2, r4
 80052e2:	4631      	mov	r1, r6
 80052e4:	bf28      	it	cs
 80052e6:	463a      	movcs	r2, r7
 80052e8:	f7ff ffca 	bl	8005280 <memcpy>
 80052ec:	4631      	mov	r1, r6
 80052ee:	4640      	mov	r0, r8
 80052f0:	f7ff f934 	bl	800455c <_free_r>
 80052f4:	e7e1      	b.n	80052ba <_realloc_r+0x1e>
 80052f6:	4635      	mov	r5, r6
 80052f8:	e7df      	b.n	80052ba <_realloc_r+0x1e>

080052fa <__swhatbuf_r>:
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	460c      	mov	r4, r1
 80052fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005302:	2900      	cmp	r1, #0
 8005304:	b096      	sub	sp, #88	; 0x58
 8005306:	4615      	mov	r5, r2
 8005308:	461e      	mov	r6, r3
 800530a:	da0d      	bge.n	8005328 <__swhatbuf_r+0x2e>
 800530c:	89a3      	ldrh	r3, [r4, #12]
 800530e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005312:	f04f 0100 	mov.w	r1, #0
 8005316:	bf0c      	ite	eq
 8005318:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800531c:	2340      	movne	r3, #64	; 0x40
 800531e:	2000      	movs	r0, #0
 8005320:	6031      	str	r1, [r6, #0]
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	b016      	add	sp, #88	; 0x58
 8005326:	bd70      	pop	{r4, r5, r6, pc}
 8005328:	466a      	mov	r2, sp
 800532a:	f000 f849 	bl	80053c0 <_fstat_r>
 800532e:	2800      	cmp	r0, #0
 8005330:	dbec      	blt.n	800530c <__swhatbuf_r+0x12>
 8005332:	9901      	ldr	r1, [sp, #4]
 8005334:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005338:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800533c:	4259      	negs	r1, r3
 800533e:	4159      	adcs	r1, r3
 8005340:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005344:	e7eb      	b.n	800531e <__swhatbuf_r+0x24>

08005346 <__smakebuf_r>:
 8005346:	898b      	ldrh	r3, [r1, #12]
 8005348:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800534a:	079d      	lsls	r5, r3, #30
 800534c:	4606      	mov	r6, r0
 800534e:	460c      	mov	r4, r1
 8005350:	d507      	bpl.n	8005362 <__smakebuf_r+0x1c>
 8005352:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	6123      	str	r3, [r4, #16]
 800535a:	2301      	movs	r3, #1
 800535c:	6163      	str	r3, [r4, #20]
 800535e:	b002      	add	sp, #8
 8005360:	bd70      	pop	{r4, r5, r6, pc}
 8005362:	ab01      	add	r3, sp, #4
 8005364:	466a      	mov	r2, sp
 8005366:	f7ff ffc8 	bl	80052fa <__swhatbuf_r>
 800536a:	9900      	ldr	r1, [sp, #0]
 800536c:	4605      	mov	r5, r0
 800536e:	4630      	mov	r0, r6
 8005370:	f7ff f960 	bl	8004634 <_malloc_r>
 8005374:	b948      	cbnz	r0, 800538a <__smakebuf_r+0x44>
 8005376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800537a:	059a      	lsls	r2, r3, #22
 800537c:	d4ef      	bmi.n	800535e <__smakebuf_r+0x18>
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	f043 0302 	orr.w	r3, r3, #2
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	e7e3      	b.n	8005352 <__smakebuf_r+0xc>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	6020      	str	r0, [r4, #0]
 800538e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005392:	81a3      	strh	r3, [r4, #12]
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	6163      	str	r3, [r4, #20]
 8005398:	9b01      	ldr	r3, [sp, #4]
 800539a:	6120      	str	r0, [r4, #16]
 800539c:	b15b      	cbz	r3, 80053b6 <__smakebuf_r+0x70>
 800539e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 f81e 	bl	80053e4 <_isatty_r>
 80053a8:	b128      	cbz	r0, 80053b6 <__smakebuf_r+0x70>
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f023 0303 	bic.w	r3, r3, #3
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	81a3      	strh	r3, [r4, #12]
 80053b6:	89a3      	ldrh	r3, [r4, #12]
 80053b8:	431d      	orrs	r5, r3
 80053ba:	81a5      	strh	r5, [r4, #12]
 80053bc:	e7cf      	b.n	800535e <__smakebuf_r+0x18>
	...

080053c0 <_fstat_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	4d07      	ldr	r5, [pc, #28]	; (80053e0 <_fstat_r+0x20>)
 80053c4:	2300      	movs	r3, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	602b      	str	r3, [r5, #0]
 80053ce:	f7fb fd16 	bl	8000dfe <_fstat>
 80053d2:	1c43      	adds	r3, r0, #1
 80053d4:	d102      	bne.n	80053dc <_fstat_r+0x1c>
 80053d6:	682b      	ldr	r3, [r5, #0]
 80053d8:	b103      	cbz	r3, 80053dc <_fstat_r+0x1c>
 80053da:	6023      	str	r3, [r4, #0]
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
 80053de:	bf00      	nop
 80053e0:	20000354 	.word	0x20000354

080053e4 <_isatty_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d06      	ldr	r5, [pc, #24]	; (8005400 <_isatty_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	f7fb fd15 	bl	8000e1e <_isatty>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_isatty_r+0x1a>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_isatty_r+0x1a>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000354 	.word	0x20000354

08005404 <_malloc_usable_size_r>:
 8005404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005408:	1f18      	subs	r0, r3, #4
 800540a:	2b00      	cmp	r3, #0
 800540c:	bfbc      	itt	lt
 800540e:	580b      	ldrlt	r3, [r1, r0]
 8005410:	18c0      	addlt	r0, r0, r3
 8005412:	4770      	bx	lr

08005414 <_init>:
 8005414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005416:	bf00      	nop
 8005418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800541a:	bc08      	pop	{r3}
 800541c:	469e      	mov	lr, r3
 800541e:	4770      	bx	lr

08005420 <_fini>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr
