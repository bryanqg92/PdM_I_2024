
PRACTICA 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003824  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c08  08003c08  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003c08  08003c08  00013c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c10  08003c10  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c10  08003c10  00013c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000001e0  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000097ae  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001df7  00000000  00000000  000298a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008a0  00000000  00000000  0002b698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000066d  00000000  00000000  0002bf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026be7  00000000  00000000  0002c5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d569  00000000  00000000  0005318c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3746  00000000  00000000  000606f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a88  00000000  00000000  00143e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001468c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080039bc 	.word	0x080039bc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080039bc 	.word	0x080039bc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <Error_Handler>:
#include "stm32f4xx_nucleo_144.h"
#include <API_Delay.h>



static void Error_Handler(void){
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 80005a0:	2001      	movs	r0, #1
 80005a2:	f000 f9eb 	bl	800097c <BSP_LED_On>
	while (1){}
 80005a6:	e7fe      	b.n	80005a6 <Error_Handler+0xa>

080005a8 <delayInit>:
}

void delayInit(delay_t *delay, tick_t duration) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]

	if (duration <= 0){
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d102      	bne.n	80005be <delayInit+0x16>
		Error_Handler();
 80005b8:	f7ff fff0 	bl	800059c <Error_Handler>
	}
	else{
		delay->duration = duration;
		delay->running = false;
	}
}
 80005bc:	e005      	b.n	80005ca <delayInit+0x22>
		delay->duration = duration;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	605a      	str	r2, [r3, #4]
		delay->running = false;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	721a      	strb	r2, [r3, #8]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}

080005d2 <delayRead>:

bool_t delayRead(delay_t *delay) {
 80005d2:	b580      	push	{r7, lr}
 80005d4:	b084      	sub	sp, #16
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	6078      	str	r0, [r7, #4]

	bool state = false;
 80005da:	2300      	movs	r3, #0
 80005dc:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d020      	beq.n	8000626 <delayRead+0x54>

		if (!delay->running) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7a1b      	ldrb	r3, [r3, #8]
 80005e8:	f083 0301 	eor.w	r3, r3, #1
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d008      	beq.n	8000604 <delayRead+0x32>
			delay->startTime = HAL_GetTick();
 80005f2:	f000 fc07 	bl	8000e04 <HAL_GetTick>
 80005f6:	4602      	mov	r2, r0
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2201      	movs	r2, #1
 8000600:	721a      	strb	r2, [r3, #8]
 8000602:	e012      	b.n	800062a <delayRead+0x58>
		}

		else {

			tick_t currentTime = HAL_GetTick();
 8000604:	f000 fbfe 	bl	8000e04 <HAL_GetTick>
 8000608:	60b8      	str	r0, [r7, #8]

			if (currentTime - delay->startTime >= delay->duration) {
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	1ad2      	subs	r2, r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	429a      	cmp	r2, r3
 8000618:	d307      	bcc.n	800062a <delayRead+0x58>
				delay->running = false;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	721a      	strb	r2, [r3, #8]
				state = true;
 8000620:	2301      	movs	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	e001      	b.n	800062a <delayRead+0x58>
			}
		}
	}
	else{
		Error_Handler();
 8000626:	f7ff ffb9 	bl	800059c <Error_Handler>
	}

	return state;
 800062a:	7bfb      	ldrb	r3, [r7, #15]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]

	if(delay!=NULL && duration > 0){
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d006      	beq.n	8000652 <delayWrite+0x1e>
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d003      	beq.n	8000652 <delayWrite+0x1e>
		delay->duration = duration;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	e002      	b.n	8000658 <delayWrite+0x24>
	}
	else{
		Error_Handler();
 8000652:	f7ff ffa3 	bl	800059c <Error_Handler>
	}
}
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <FSM_error_handler>:
delay_t debounceInit; 

/**
 * @brief Manejador de errores de la máquina de estado.
 */
static void FSM_error_handler(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

	buttonState = BSP_PB_GetState(BUTTON_USER);
 8000664:	2000      	movs	r0, #0
 8000666:	f000 fa2d 	bl	8000ac4 <BSP_PB_GetState>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	bf14      	ite	ne
 8000670:	2301      	movne	r3, #1
 8000672:	2300      	moveq	r3, #0
 8000674:	b2da      	uxtb	r2, r3
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <FSM_error_handler+0x48>)
 8000678:	701a      	strb	r2, [r3, #0]

	if (buttonState == GPIO_PIN_RESET){
 800067a:	4b0b      	ldr	r3, [pc, #44]	; (80006a8 <FSM_error_handler+0x48>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d009      	beq.n	800069c <FSM_error_handler+0x3c>
		isKeyPressed = false;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <FSM_error_handler+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
		fsmState = BUTTON_UP;
 800068e:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <FSM_error_handler+0x50>)
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
		{
			BSP_LED_On(LED2);
		}
	}

}
 8000694:	e006      	b.n	80006a4 <FSM_error_handler+0x44>
			BSP_LED_On(LED2);
 8000696:	2001      	movs	r0, #1
 8000698:	f000 f970 	bl	800097c <BSP_LED_On>
		while (buttonState == GPIO_PIN_SET)
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <FSM_error_handler+0x48>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d1f8      	bne.n	8000696 <FSM_error_handler+0x36>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000009e 	.word	0x2000009e
 80006ac:	2000009d 	.word	0x2000009d
 80006b0:	2000009c 	.word	0x2000009c

080006b4 <debounceFSM_init>:

/**
 * @brief Inicializa la máquina de estado del debounce.
 * @param debounceTime Tiempo de debounce en milisegundos.
 */
void debounceFSM_init(uint32_t debounceTime) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	fsmState = BUTTON_UP;
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <debounceFSM_init+0x20>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceInit, debounceTime);
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <debounceFSM_init+0x24>)
 80006c6:	f7ff ff6f 	bl	80005a8 <delayInit>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000009c 	.word	0x2000009c
 80006d8:	200000a0 	.word	0x200000a0

080006dc <debounceFSM_update>:

/**
 * @brief Actualiza la máquina de estado del debounce.
 */
void debounceFSM_update() {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

	buttonState = BSP_PB_GetState(BUTTON_USER);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 f9ef 	bl	8000ac4 <BSP_PB_GetState>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <debounceFSM_update+0xf4>)
 80006f4:	701a      	strb	r2, [r3, #0]

	switch(fsmState) {
 80006f6:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <debounceFSM_update+0xf8>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d85e      	bhi.n	80007bc <debounceFSM_update+0xe0>
 80006fe:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <debounceFSM_update+0x28>)
 8000700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000704:	08000715 	.word	0x08000715
 8000708:	0800072b 	.word	0x0800072b
 800070c:	0800075f 	.word	0x0800075f
 8000710:	08000783 	.word	0x08000783

	case BUTTON_UP:

		if (buttonState == GPIO_PIN_SET){
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <debounceFSM_update+0xf4>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d052      	beq.n	80007c2 <debounceFSM_update+0xe6>
			delayRead(&debounceInit);
 800071c:	482e      	ldr	r0, [pc, #184]	; (80007d8 <debounceFSM_update+0xfc>)
 800071e:	f7ff ff58 	bl	80005d2 <delayRead>
			fsmState = BUTTON_FALLING;
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <debounceFSM_update+0xf8>)
 8000724:	2201      	movs	r2, #1
 8000726:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000728:	e04b      	b.n	80007c2 <debounceFSM_update+0xe6>


	case BUTTON_FALLING:

		if (delayRead(&debounceInit)) {
 800072a:	482b      	ldr	r0, [pc, #172]	; (80007d8 <debounceFSM_update+0xfc>)
 800072c:	f7ff ff51 	bl	80005d2 <delayRead>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d047      	beq.n	80007c6 <debounceFSM_update+0xea>
			if (buttonState == GPIO_PIN_SET){
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <debounceFSM_update+0xf4>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d008      	beq.n	8000750 <debounceFSM_update+0x74>
				fsmState = BUTTON_DOWN;
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <debounceFSM_update+0xf8>)
 8000740:	2202      	movs	r2, #2
 8000742:	701a      	strb	r2, [r3, #0]
				isKeyPressed = true;
 8000744:	4b25      	ldr	r3, [pc, #148]	; (80007dc <debounceFSM_update+0x100>)
 8000746:	2201      	movs	r2, #1
 8000748:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 800074a:	f000 f85b 	bl	8000804 <buttonPressed>
				fsmState = BUTTON_UP;
				isKeyPressed = false;
			}
		}

		break;
 800074e:	e03a      	b.n	80007c6 <debounceFSM_update+0xea>
				fsmState = BUTTON_UP;
 8000750:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <debounceFSM_update+0xf8>)
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
				isKeyPressed = false;
 8000756:	4b21      	ldr	r3, [pc, #132]	; (80007dc <debounceFSM_update+0x100>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
		break;
 800075c:	e033      	b.n	80007c6 <debounceFSM_update+0xea>

	case BUTTON_DOWN:

		if (buttonState == GPIO_PIN_RESET){
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <debounceFSM_update+0xf4>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	f083 0301 	eor.w	r3, r3, #1
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d006      	beq.n	800077a <debounceFSM_update+0x9e>
			delayRead(&debounceInit);
 800076c:	481a      	ldr	r0, [pc, #104]	; (80007d8 <debounceFSM_update+0xfc>)
 800076e:	f7ff ff30 	bl	80005d2 <delayRead>
			fsmState = BUTTON_RAISING;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <debounceFSM_update+0xf8>)
 8000774:	2203      	movs	r2, #3
 8000776:	701a      	strb	r2, [r3, #0]

		}
		else{
			isKeyPressed = true;
		}
		break;
 8000778:	e028      	b.n	80007cc <debounceFSM_update+0xf0>
			isKeyPressed = true;
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <debounceFSM_update+0x100>)
 800077c:	2201      	movs	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
		break;
 8000780:	e024      	b.n	80007cc <debounceFSM_update+0xf0>

	case BUTTON_RAISING:

		if (delayRead(&debounceInit)) {
 8000782:	4815      	ldr	r0, [pc, #84]	; (80007d8 <debounceFSM_update+0xfc>)
 8000784:	f7ff ff25 	bl	80005d2 <delayRead>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d01d      	beq.n	80007ca <debounceFSM_update+0xee>

			if (buttonState == GPIO_PIN_RESET){
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <debounceFSM_update+0xf4>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	f083 0301 	eor.w	r3, r3, #1
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d008      	beq.n	80007ae <debounceFSM_update+0xd2>
				fsmState = BUTTON_UP;
 800079c:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <debounceFSM_update+0xf8>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
				isKeyPressed = false;
 80007a2:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <debounceFSM_update+0x100>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 80007a8:	f000 f833 	bl	8000812 <buttonReleased>
				isKeyPressed = true;
			}
		}


		break;
 80007ac:	e00d      	b.n	80007ca <debounceFSM_update+0xee>
				fsmState = BUTTON_DOWN;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <debounceFSM_update+0xf8>)
 80007b0:	2202      	movs	r2, #2
 80007b2:	701a      	strb	r2, [r3, #0]
				isKeyPressed = true;
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <debounceFSM_update+0x100>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	701a      	strb	r2, [r3, #0]
		break;
 80007ba:	e006      	b.n	80007ca <debounceFSM_update+0xee>


	default:
		FSM_error_handler();
 80007bc:	f7ff ff50 	bl	8000660 <FSM_error_handler>
		break;
 80007c0:	e004      	b.n	80007cc <debounceFSM_update+0xf0>
		break;
 80007c2:	bf00      	nop
 80007c4:	e002      	b.n	80007cc <debounceFSM_update+0xf0>
		break;
 80007c6:	bf00      	nop
 80007c8:	e000      	b.n	80007cc <debounceFSM_update+0xf0>
		break;
 80007ca:	bf00      	nop
	}
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000009e 	.word	0x2000009e
 80007d4:	2000009c 	.word	0x2000009c
 80007d8:	200000a0 	.word	0x200000a0
 80007dc:	2000009d 	.word	0x2000009d

080007e0 <readKey>:

/**
 * @brief Lee el estado del botón.
 * @return Estado del botón (presionado o no).
 */
bool_t readKey() {
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	bool_t read = isKeyPressed;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <readKey+0x20>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
	isKeyPressed = false;
 80007ec:	4b04      	ldr	r3, [pc, #16]	; (8000800 <readKey+0x20>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	701a      	strb	r2, [r3, #0]
	return read;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	2000009d 	.word	0x2000009d

08000804 <buttonPressed>:

/**
 * @brief Manejador de evento para el botón presionado.
 */
void buttonPressed() {
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 8000808:	2002      	movs	r0, #2
 800080a:	f000 f8b7 	bl	800097c <BSP_LED_On>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}

08000812 <buttonReleased>:

/**
 * @brief Manejador de evento para el botón liberado.
 */
void buttonReleased() {
 8000812:	b580      	push	{r7, lr}
 8000814:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED3);
 8000816:	2002      	movs	r0, #2
 8000818:	f000 f8ca 	bl	80009b0 <BSP_LED_Off>
}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}

08000820 <uartInit>:

/**
  * @brief  Inicializa la UART.
  * @retval true si la inicialización es exitosa, false si ocurre un error.
  */
bool_t uartInit() {
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0

	/* Configuración de la estructura de la UART */
	UartHandle.Instance = USARTx;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <uartInit+0x54>)
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <uartInit+0x58>)
 8000828:	601a      	str	r2, [r3, #0]
	UartHandle.Init.BaudRate = 9600;
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <uartInit+0x54>)
 800082c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000830:	605a      	str	r2, [r3, #4]
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b10      	ldr	r3, [pc, #64]	; (8000874 <uartInit+0x54>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <uartInit+0x54>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <uartInit+0x54>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
	UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <uartInit+0x54>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
	UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <uartInit+0x54>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
	UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <uartInit+0x54>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]


	if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000856:	4807      	ldr	r0, [pc, #28]	; (8000874 <uartInit+0x54>)
 8000858:	f001 fb2c 	bl	8001eb4 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <uartInit+0x46>
		Error_Handler();
 8000862:	f000 f835 	bl	80008d0 <Error_Handler>
	}


	printf("\n\r UART configured as follows:"
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <uartInit+0x5c>)
 8000868:	f002 f97a 	bl	8002b60 <iprintf>
			"\n\r\t Init.Mode     =   MODE_TX_RX"
			"\n\r\t HwFlowCtl      =   NONE"
			"\n\r\t OverSampling  =   16 \n\r"
	);

	return true;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000ac 	.word	0x200000ac
 8000878:	40004800 	.word	0x40004800
 800087c:	080039d4 	.word	0x080039d4

08000880 <uartSendString>:
/**
  * @brief  Envía una cadena a través de la UART.
  * @param  pstring: Puntero a la cadena a enviar.
  * @retval None
  */
void uartSendString(uint8_t *pstring) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	uint16_t length = strlen((char *)pstring);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff fcb1 	bl	80001f0 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&UartHandle, pstring, length, UART_TIMEOUT_MS);
 8000892:	89fa      	ldrh	r2, [r7, #14]
 8000894:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <uartSendString+0x28>)
 800089c:	f001 fb57 	bl	8001f4e <HAL_UART_Transmit>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000ac 	.word	0x200000ac

080008ac <__io_putchar>:
  * @brief  Implementación de fputc para redirigir la salida de printf a la UART.
  * @param  ch: Carácter a imprimir.
  * @param  stream: Puntero al flujo de salida (no utilizado).
  * @retval Carácter impreso.
  */
PUTCHAR_PROTOTYPE {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	/* Transmitir el carácter a través de la UART */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) &ch, 1, UART_TIMEOUT_MS);
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008ba:	2201      	movs	r2, #1
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <__io_putchar+0x20>)
 80008be:	f001 fb46 	bl	8001f4e <HAL_UART_Transmit>

	return ch;
 80008c2:	687b      	ldr	r3, [r7, #4]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200000ac 	.word	0x200000ac

080008d0 <Error_Handler>:
/**
  * @brief  Manejador de errores.
  * @note   Esta función se llama en caso de error y entra en un bucle infinito.
  * @retval None
  */
static void Error_Handler(void){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	while(1){
		BSP_LED_On(LED2); /**< Enciende el LED2 en caso de error */
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 f851 	bl	800097c <BSP_LED_On>
 80008da:	e7fb      	b.n	80008d4 <Error_Handler+0x4>

080008dc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d10e      	bne.n	800090a <BSP_LED_Init+0x2e>
 80008ec:	2300      	movs	r3, #0
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <BSP_LED_Init+0x94>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a1e      	ldr	r2, [pc, #120]	; (8000970 <BSP_LED_Init+0x94>)
 80008f6:	f043 0302 	orr.w	r3, r3, #2
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30
 80008fc:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <BSP_LED_Init+0x94>)
 80008fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	613b      	str	r3, [r7, #16]
 8000906:	693b      	ldr	r3, [r7, #16]
 8000908:	e00d      	b.n	8000926 <BSP_LED_Init+0x4a>
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	4b18      	ldr	r3, [pc, #96]	; (8000970 <BSP_LED_Init+0x94>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a17      	ldr	r2, [pc, #92]	; (8000970 <BSP_LED_Init+0x94>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <BSP_LED_Init+0x94>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	4a12      	ldr	r2, [pc, #72]	; (8000974 <BSP_LED_Init+0x98>)
 800092a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800092e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <BSP_LED_Init+0x9c>)
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	f107 0214 	add.w	r2, r7, #20
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f000 fb78 	bl	8001040 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a09      	ldr	r2, [pc, #36]	; (8000978 <BSP_LED_Init+0x9c>)
 8000954:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <BSP_LED_Init+0x98>)
 800095c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000960:	2200      	movs	r2, #0
 8000962:	4619      	mov	r1, r3
 8000964:	f000 fd30 	bl	80013c8 <HAL_GPIO_WritePin>
}
 8000968:	bf00      	nop
 800096a:	3728      	adds	r7, #40	; 0x28
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	08003b08 	.word	0x08003b08
 8000978:	20000000 	.word	0x20000000

0800097c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4a07      	ldr	r2, [pc, #28]	; (80009a8 <BSP_LED_On+0x2c>)
 800098a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <BSP_LED_On+0x30>)
 8000992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f000 fd15 	bl	80013c8 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000000 	.word	0x20000000
 80009ac:	08003b08 	.word	0x08003b08

080009b0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <BSP_LED_Off+0x2c>)
 80009be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <BSP_LED_Off+0x30>)
 80009c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f000 fcfb 	bl	80013c8 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000000 	.word	0x20000000
 80009e0:	08003b08 	.word	0x08003b08

080009e4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <BSP_LED_Toggle+0x2c>)
 80009f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <BSP_LED_Toggle+0x30>)
 80009fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009fe:	4619      	mov	r1, r3
 8000a00:	4610      	mov	r0, r2
 8000a02:	f000 fcfa 	bl	80013fa <HAL_GPIO_TogglePin>
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000000 	.word	0x20000000
 8000a14:	08003b08 	.word	0x08003b08

08000a18 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	460a      	mov	r2, r1
 8000a22:	71fb      	strb	r3, [r7, #7]
 8000a24:	4613      	mov	r3, r2
 8000a26:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <BSP_PB_Init+0xa4>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <BSP_PB_Init+0xa4>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6313      	str	r3, [r2, #48]	; 0x30
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <BSP_PB_Init+0xa4>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d112      	bne.n	8000a70 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a54:	2302      	movs	r3, #2
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <BSP_PB_Init+0xa8>)
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	f107 020c 	add.w	r2, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fae8 	bl	8001040 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d11d      	bne.n	8000ab2 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000a80:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a84:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	4a0d      	ldr	r2, [pc, #52]	; (8000ac0 <BSP_PB_Init+0xa8>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	f107 020c 	add.w	r2, r7, #12
 8000a92:	4611      	mov	r1, r2
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fad3 	bl	8001040 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a9a:	2328      	movs	r3, #40	; 0x28
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	210f      	movs	r1, #15
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa95 	bl	8000fd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000aa8:	2328      	movs	r3, #40	; 0x28
 8000aaa:	b25b      	sxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 faac 	bl	800100a <HAL_NVIC_EnableIRQ>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	2000000c 	.word	0x2000000c

08000ac4 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	4a06      	ldr	r2, [pc, #24]	; (8000aec <BSP_PB_GetState+0x28>)
 8000ad2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f000 fc5b 	bl	8001398 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <SystemInit+0x60>)
 8000af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <SystemInit+0x60>)
 8000afc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <SystemInit+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <SystemInit+0x64>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SystemInit+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000b16:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <SystemInit+0x64>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <SystemInit+0x64>)
 8000b1c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b24:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <SystemInit+0x64>)
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <SystemInit+0x68>)
 8000b2a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <SystemInit+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a08      	ldr	r2, [pc, #32]	; (8000b54 <SystemInit+0x64>)
 8000b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <SystemInit+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <SystemInit+0x60>)
 8000b40:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b44:	609a      	str	r2, [r3, #8]
#endif
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	40023800 	.word	0x40023800
 8000b58:	24003010 	.word	0x24003010

08000b5c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000bb0:	f000 f914 	bl	8000ddc <HAL_IncTick>
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
	return 1;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_kill>:

int _kill(int pid, int sig)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bd2:	f002 f895 	bl	8002d00 <__errno>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2216      	movs	r2, #22
 8000bda:	601a      	str	r2, [r3, #0]
	return -1;
 8000bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_exit>:

void _exit (int status)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ffe7 	bl	8000bc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bfa:	e7fe      	b.n	8000bfa <_exit+0x12>

08000bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e00a      	b.n	8000c24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c0e:	f3af 8000 	nop.w
 8000c12:	4601      	mov	r1, r0
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	1c5a      	adds	r2, r3, #1
 8000c18:	60ba      	str	r2, [r7, #8]
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	3301      	adds	r3, #1
 8000c22:	617b      	str	r3, [r7, #20]
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	dbf0      	blt.n	8000c0e <_read+0x12>
	}

return len;
 8000c2c:	687b      	ldr	r3, [r7, #4]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	60f8      	str	r0, [r7, #12]
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	e009      	b.n	8000c5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	1c5a      	adds	r2, r3, #1
 8000c4c:	60ba      	str	r2, [r7, #8]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fe2b 	bl	80008ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf1      	blt.n	8000c48 <_write+0x12>
	}
	return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f001 fffa 	bl	8002d00 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20030000 	.word	0x20030000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	200000f0 	.word	0x200000f0
 8000d40:	20000260 	.word	0x20000260

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x34>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x34>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x34>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x34>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f92b 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f000 fbb2 	bl	80014d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f943 	bl	8001026 <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000db8:	f000 f90b 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000018 	.word	0x20000018
 8000dd8:	20000014 	.word	0x20000014

08000ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x20>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_IncTick+0x24>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_IncTick+0x24>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	20000018 	.word	0x20000018
 8000e00:	200000f4 	.word	0x200000f4

08000e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return uwTick;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <HAL_GetTick+0x14>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	200000f4 	.word	0x200000f4

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4907      	ldr	r1, [pc, #28]	; (8000eb8 <__NVIC_EnableIRQ+0x38>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db0a      	blt.n	8000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	490c      	ldr	r1, [pc, #48]	; (8000f08 <__NVIC_SetPriority+0x4c>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	0112      	lsls	r2, r2, #4
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	440b      	add	r3, r1
 8000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee4:	e00a      	b.n	8000efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	4908      	ldr	r1, [pc, #32]	; (8000f0c <__NVIC_SetPriority+0x50>)
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	f003 030f 	and.w	r3, r3, #15
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	0112      	lsls	r2, r2, #4
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	440b      	add	r3, r1
 8000efa:	761a      	strb	r2, [r3, #24]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000e100 	.word	0xe000e100
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	f1c3 0307 	rsb	r3, r3, #7
 8000f2a:	2b04      	cmp	r3, #4
 8000f2c:	bf28      	it	cs
 8000f2e:	2304      	movcs	r3, #4
 8000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3304      	adds	r3, #4
 8000f36:	2b06      	cmp	r3, #6
 8000f38:	d902      	bls.n	8000f40 <NVIC_EncodePriority+0x30>
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3b03      	subs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <NVIC_EncodePriority+0x32>
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43da      	mvns	r2, r3
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	401a      	ands	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43d9      	mvns	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	4313      	orrs	r3, r2
         );
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f7ff ff8e 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff29 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff3e 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff8e 	bl	8000f10 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff31 	bl	8000e80 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e177      	b.n	800134c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8166 	bne.w	8001346 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80c0 	beq.w	8001346 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b66      	ldr	r3, [pc, #408]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a65      	ldr	r2, [pc, #404]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b63      	ldr	r3, [pc, #396]	; (8001364 <HAL_GPIO_Init+0x324>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a61      	ldr	r2, [pc, #388]	; (8001368 <HAL_GPIO_Init+0x328>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_GPIO_Init+0x32c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d037      	beq.n	800127e <HAL_GPIO_Init+0x23e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a57      	ldr	r2, [pc, #348]	; (8001370 <HAL_GPIO_Init+0x330>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d031      	beq.n	800127a <HAL_GPIO_Init+0x23a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x334>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x236>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a55      	ldr	r2, [pc, #340]	; (8001378 <HAL_GPIO_Init+0x338>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x232>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a54      	ldr	r2, [pc, #336]	; (800137c <HAL_GPIO_Init+0x33c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x22e>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a53      	ldr	r2, [pc, #332]	; (8001380 <HAL_GPIO_Init+0x340>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x22a>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a52      	ldr	r2, [pc, #328]	; (8001384 <HAL_GPIO_Init+0x344>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <HAL_GPIO_Init+0x348>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a50      	ldr	r2, [pc, #320]	; (800138c <HAL_GPIO_Init+0x34c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a4f      	ldr	r2, [pc, #316]	; (8001390 <HAL_GPIO_Init+0x350>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x21a>
 8001256:	2309      	movs	r3, #9
 8001258:	e012      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125a:	230a      	movs	r3, #10
 800125c:	e010      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800125e:	2308      	movs	r3, #8
 8001260:	e00e      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001262:	2307      	movs	r3, #7
 8001264:	e00c      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001266:	2306      	movs	r3, #6
 8001268:	e00a      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126a:	2305      	movs	r3, #5
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x240>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x240>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	; (8001368 <HAL_GPIO_Init+0x328>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129e:	4b3d      	ldr	r3, [pc, #244]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c2:	4a34      	ldr	r2, [pc, #208]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012c8:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ec:	4a29      	ldr	r2, [pc, #164]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_GPIO_Init+0x354>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <HAL_GPIO_Init+0x354>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_GPIO_Init+0x354>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f ae84 	bls.w	800105c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40021400 	.word	0x40021400
 8001384:	40021800 	.word	0x40021800
 8001388:	40021c00 	.word	0x40021c00
 800138c:	40022000 	.word	0x40022000
 8001390:	40022400 	.word	0x40022400
 8001394:	40013c00 	.word	0x40013c00

08001398 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	887b      	ldrh	r3, [r7, #2]
 80013aa:	4013      	ands	r3, r2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b0:	2301      	movs	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	e001      	b.n	80013ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	460b      	mov	r3, r1
 8001404:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800140c:	887a      	ldrh	r2, [r7, #2]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	041a      	lsls	r2, r3, #16
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43d9      	mvns	r1, r3
 8001418:	887b      	ldrh	r3, [r7, #2]
 800141a:	400b      	ands	r3, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	619a      	str	r2, [r3, #24]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	4a22      	ldr	r2, [pc, #136]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001442:	f043 0308 	orr.w	r3, r3, #8
 8001446:	6313      	str	r3, [r2, #48]	; 0x30
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800145e:	f043 0308 	orr.w	r3, r3, #8
 8001462:	6313      	str	r3, [r2, #48]	; 0x30
 8001464:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	f003 0308 	and.w	r3, r3, #8
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <HAL_UART_MspInit+0x9c>)
 800147a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147e:	6413      	str	r3, [r2, #64]	; 0x40
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_UART_MspInit+0x9c>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	60bb      	str	r3, [r7, #8]
 800148a:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800149e:	2307      	movs	r3, #7
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <HAL_UART_MspInit+0xa0>)
 80014aa:	f7ff fdc9 	bl	8001040 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80014ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80014b4:	2307      	movs	r3, #7
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4804      	ldr	r0, [pc, #16]	; (80014d0 <HAL_UART_MspInit+0xa0>)
 80014c0:	f7ff fdbe 	bl	8001040 <HAL_GPIO_Init>
}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00

080014d4 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	4a1f      	ldr	r2, [pc, #124]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 80014f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fc:	6413      	str	r3, [r2, #64]	; 0x40
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_PWREx_EnableOverDrive+0x90>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_PWREx_EnableOverDrive+0x94>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff fc78 	bl	8000e04 <HAL_GetTick>
 8001514:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001516:	e009      	b.n	800152c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001518:	f7ff fc74 	bl	8000e04 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001526:	d901      	bls.n	800152c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e01f      	b.n	800156c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001538:	d1ee      	bne.n	8001518 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001540:	f7ff fc60 	bl	8000e04 <HAL_GetTick>
 8001544:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001546:	e009      	b.n	800155c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001548:	f7ff fc5c 	bl	8000e04 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001556:	d901      	bls.n	800155c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e007      	b.n	800156c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001568:	d1ee      	bne.n	8001548 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40023800 	.word	0x40023800
 8001578:	420e0040 	.word	0x420e0040
 800157c:	40007000 	.word	0x40007000
 8001580:	420e0044 	.word	0x420e0044

08001584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e267      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d075      	beq.n	800168e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b82      	ldr	r3, [pc, #520]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d05b      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d157      	bne.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e242      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x74>
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a68      	ldr	r2, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fbe2 	bl	8000e04 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fbde 	bl	8000e04 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e207      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fbce 	bl	8000e04 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fbca 	bl	8000e04 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1f3      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c7      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4937      	ldr	r1, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fb83 	bl	8000e04 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fb7f 	bl	8000e04 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a8      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4925      	ldr	r1, [pc, #148]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fb62 	bl	8000e04 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fb5e 	bl	8000e04 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e187      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d036      	beq.n	80017dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d016      	beq.n	80017a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fb42 	bl	8000e04 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fb3e 	bl	8000e04 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e167      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x200>
 80017a2:	e01b      	b.n	80017dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fb2b 	bl	8000e04 <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e00e      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fb27 	bl	8000e04 <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d907      	bls.n	80017d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e150      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ea      	bne.n	80017b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8097 	beq.w	8001918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a73      	ldr	r2, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fae7 	bl	8000e04 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff fae3 	bl	8000e04 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e10c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x2ea>
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x30c>
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5e      	ldr	r2, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff faa8 	bl	8000e04 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff faa4 	bl	8000e04 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0cb      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ee      	beq.n	80018b8 <HAL_RCC_OscConfig+0x334>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa92 	bl	8000e04 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fa8e 	bl	8000e04 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0b5      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ee      	bne.n	80018e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a1 	beq.w	8001a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d05c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d141      	bne.n	80019ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fa62 	bl	8000e04 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa5e 	bl	8000e04 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e087      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	491b      	ldr	r1, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fa37 	bl	8000e04 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fa33 	bl	8000e04 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e05c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x416>
 80019b8:	e054      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fa20 	bl	8000e04 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fa1c 	bl	8000e04 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e045      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e038      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d028      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff f94e 	bl	8000e04 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff f94a 	bl	8000e04 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f8ae 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	08003b10 	.word	0x08003b10
 8001c38:	20000010 	.word	0x20000010
 8001c3c:	20000014 	.word	0x20000014

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b094      	sub	sp, #80	; 0x50
 8001c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c50:	2300      	movs	r3, #0
 8001c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d00d      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x40>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	f200 80e1 	bhi.w	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c72:	e0db      	b.n	8001e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c78:	e0db      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7e:	e0d8      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b6f      	ldr	r3, [pc, #444]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8a:	4b6d      	ldr	r3, [pc, #436]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d063      	beq.n	8001d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b6a      	ldr	r3, [pc, #424]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8001caa:	2300      	movs	r3, #0
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
 8001cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cb2:	4622      	mov	r2, r4
 8001cb4:	462b      	mov	r3, r5
 8001cb6:	f04f 0000 	mov.w	r0, #0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	0159      	lsls	r1, r3, #5
 8001cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cc4:	0150      	lsls	r0, r2, #5
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4621      	mov	r1, r4
 8001ccc:	1a51      	subs	r1, r2, r1
 8001cce:	6139      	str	r1, [r7, #16]
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	018b      	lsls	r3, r1, #6
 8001ce8:	4651      	mov	r1, sl
 8001cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cee:	4651      	mov	r1, sl
 8001cf0:	018a      	lsls	r2, r1, #6
 8001cf2:	4651      	mov	r1, sl
 8001cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8001cf8:	4659      	mov	r1, fp
 8001cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d12:	4690      	mov	r8, r2
 8001d14:	4699      	mov	r9, r3
 8001d16:	4623      	mov	r3, r4
 8001d18:	eb18 0303 	adds.w	r3, r8, r3
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	462b      	mov	r3, r5
 8001d20:	eb49 0303 	adc.w	r3, r9, r3
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d32:	4629      	mov	r1, r5
 8001d34:	024b      	lsls	r3, r1, #9
 8001d36:	4621      	mov	r1, r4
 8001d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	024a      	lsls	r2, r1, #9
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d46:	2200      	movs	r2, #0
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d50:	f7fe faa6 	bl	80002a0 <__aeabi_uldivmod>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4613      	mov	r3, r2
 8001d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d5c:	e058      	b.n	8001e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d5e:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	099b      	lsrs	r3, r3, #6
 8001d64:	2200      	movs	r2, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	4611      	mov	r1, r2
 8001d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	; 0x24
 8001d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d78:	4642      	mov	r2, r8
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	f04f 0100 	mov.w	r1, #0
 8001d84:	0159      	lsls	r1, r3, #5
 8001d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d8a:	0150      	lsls	r0, r2, #5
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4641      	mov	r1, r8
 8001d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d96:	4649      	mov	r1, r9
 8001d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001db0:	ebb2 040a 	subs.w	r4, r2, sl
 8001db4:	eb63 050b 	sbc.w	r5, r3, fp
 8001db8:	f04f 0200 	mov.w	r2, #0
 8001dbc:	f04f 0300 	mov.w	r3, #0
 8001dc0:	00eb      	lsls	r3, r5, #3
 8001dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dc6:	00e2      	lsls	r2, r4, #3
 8001dc8:	4614      	mov	r4, r2
 8001dca:	461d      	mov	r5, r3
 8001dcc:	4643      	mov	r3, r8
 8001dce:	18e3      	adds	r3, r4, r3
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	464b      	mov	r3, r9
 8001dd4:	eb45 0303 	adc.w	r3, r5, r3
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de6:	4629      	mov	r1, r5
 8001de8:	028b      	lsls	r3, r1, #10
 8001dea:	4621      	mov	r1, r4
 8001dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001df0:	4621      	mov	r1, r4
 8001df2:	028a      	lsls	r2, r1, #10
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	61fa      	str	r2, [r7, #28]
 8001e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e04:	f7fe fa4c 	bl	80002a0 <__aeabi_uldivmod>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e2a:	e002      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3750      	adds	r7, #80	; 0x50
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	007a1200 	.word	0x007a1200

08001e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000010 	.word	0x20000010

08001e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e68:	f7ff fff0 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	0a9b      	lsrs	r3, r3, #10
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	4903      	ldr	r1, [pc, #12]	; (8001e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e7a:	5ccb      	ldrb	r3, [r1, r3]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08003b20 	.word	0x08003b20

08001e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e90:	f7ff ffdc 	bl	8001e4c <HAL_RCC_GetHCLKFreq>
 8001e94:	4602      	mov	r2, r0
 8001e96:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	0b5b      	lsrs	r3, r3, #13
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	4903      	ldr	r1, [pc, #12]	; (8001eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea2:	5ccb      	ldrb	r3, [r1, r3]
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	08003b20 	.word	0x08003b20

08001eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e03f      	b.n	8001f46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff faa8 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 f929 	bl	8002150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b08a      	sub	sp, #40	; 0x28
 8001f52:	af02      	add	r7, sp, #8
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	603b      	str	r3, [r7, #0]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d17c      	bne.n	8002068 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_UART_Transmit+0x2c>
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e075      	b.n	800206a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d101      	bne.n	8001f8c <HAL_UART_Transmit+0x3e>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e06e      	b.n	800206a <HAL_UART_Transmit+0x11c>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2221      	movs	r2, #33	; 0x21
 8001f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fa2:	f7fe ff2f 	bl	8000e04 <HAL_GetTick>
 8001fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fbc:	d108      	bne.n	8001fd0 <HAL_UART_Transmit+0x82>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d104      	bne.n	8001fd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	e003      	b.n	8001fd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001fe0:	e02a      	b.n	8002038 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2180      	movs	r1, #128	; 0x80
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 f840 	bl	8002072 <UART_WaitOnFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e036      	b.n	800206a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10b      	bne.n	800201a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002010:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	3302      	adds	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
 8002018:	e007      	b.n	800202a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	3301      	adds	r3, #1
 8002028:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800202e:	b29b      	uxth	r3, r3
 8002030:	3b01      	subs	r3, #1
 8002032:	b29a      	uxth	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800203c:	b29b      	uxth	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1cf      	bne.n	8001fe2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 f810 	bl	8002072 <UART_WaitOnFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e006      	b.n	800206a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2220      	movs	r2, #32
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e000      	b.n	800206a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002068:	2302      	movs	r3, #2
  }
}
 800206a:	4618      	mov	r0, r3
 800206c:	3720      	adds	r7, #32
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b090      	sub	sp, #64	; 0x40
 8002076:	af00      	add	r7, sp, #0
 8002078:	60f8      	str	r0, [r7, #12]
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	603b      	str	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002082:	e050      	b.n	8002126 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800208a:	d04c      	beq.n	8002126 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002092:	f7fe feb7 	bl	8000e04 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800209e:	429a      	cmp	r2, r3
 80020a0:	d241      	bcs.n	8002126 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	330c      	adds	r3, #12
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ac:	e853 3f00 	ldrex	r3, [r3]
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	330c      	adds	r3, #12
 80020c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c2:	637a      	str	r2, [r7, #52]	; 0x34
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020ca:	e841 2300 	strex	r3, r2, [r1]
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1e5      	bne.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3314      	adds	r3, #20
 80020dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	613b      	str	r3, [r7, #16]
   return(result);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3314      	adds	r3, #20
 80020f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020f6:	623a      	str	r2, [r7, #32]
 80020f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020fa:	69f9      	ldr	r1, [r7, #28]
 80020fc:	6a3a      	ldr	r2, [r7, #32]
 80020fe:	e841 2300 	strex	r3, r2, [r1]
 8002102:	61bb      	str	r3, [r7, #24]
   return(result);
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1e5      	bne.n	80020d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e00f      	b.n	8002146 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	429a      	cmp	r2, r3
 8002142:	d09f      	beq.n	8002084 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3740      	adds	r7, #64	; 0x40
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002154:	b0c0      	sub	sp, #256	; 0x100
 8002156:	af00      	add	r7, sp, #0
 8002158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800215c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800216c:	68d9      	ldr	r1, [r3, #12]
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	ea40 0301 	orr.w	r3, r0, r1
 8002178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800217a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	431a      	orrs	r2, r3
 8002188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	431a      	orrs	r2, r3
 8002190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800219c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80021a8:	f021 010c 	bic.w	r1, r1, #12
 80021ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80021b6:	430b      	orrs	r3, r1
 80021b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80021c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ca:	6999      	ldr	r1, [r3, #24]
 80021cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	ea40 0301 	orr.w	r3, r0, r1
 80021d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80021d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4b8f      	ldr	r3, [pc, #572]	; (800241c <UART_SetConfig+0x2cc>)
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d005      	beq.n	80021f0 <UART_SetConfig+0xa0>
 80021e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b8d      	ldr	r3, [pc, #564]	; (8002420 <UART_SetConfig+0x2d0>)
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d104      	bne.n	80021fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021f0:	f7ff fe4c 	bl	8001e8c <HAL_RCC_GetPCLK2Freq>
 80021f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021f8:	e003      	b.n	8002202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021fa:	f7ff fe33 	bl	8001e64 <HAL_RCC_GetPCLK1Freq>
 80021fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800220c:	f040 810c 	bne.w	8002428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002214:	2200      	movs	r2, #0
 8002216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800221a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800221e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002222:	4622      	mov	r2, r4
 8002224:	462b      	mov	r3, r5
 8002226:	1891      	adds	r1, r2, r2
 8002228:	65b9      	str	r1, [r7, #88]	; 0x58
 800222a:	415b      	adcs	r3, r3
 800222c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800222e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002232:	4621      	mov	r1, r4
 8002234:	eb12 0801 	adds.w	r8, r2, r1
 8002238:	4629      	mov	r1, r5
 800223a:	eb43 0901 	adc.w	r9, r3, r1
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800224a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002252:	4690      	mov	r8, r2
 8002254:	4699      	mov	r9, r3
 8002256:	4623      	mov	r3, r4
 8002258:	eb18 0303 	adds.w	r3, r8, r3
 800225c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002260:	462b      	mov	r3, r5
 8002262:	eb49 0303 	adc.w	r3, r9, r3
 8002266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800227a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800227e:	460b      	mov	r3, r1
 8002280:	18db      	adds	r3, r3, r3
 8002282:	653b      	str	r3, [r7, #80]	; 0x50
 8002284:	4613      	mov	r3, r2
 8002286:	eb42 0303 	adc.w	r3, r2, r3
 800228a:	657b      	str	r3, [r7, #84]	; 0x54
 800228c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002294:	f7fe f804 	bl	80002a0 <__aeabi_uldivmod>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4b61      	ldr	r3, [pc, #388]	; (8002424 <UART_SetConfig+0x2d4>)
 800229e:	fba3 2302 	umull	r2, r3, r3, r2
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	011c      	lsls	r4, r3, #4
 80022a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022aa:	2200      	movs	r2, #0
 80022ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80022b8:	4642      	mov	r2, r8
 80022ba:	464b      	mov	r3, r9
 80022bc:	1891      	adds	r1, r2, r2
 80022be:	64b9      	str	r1, [r7, #72]	; 0x48
 80022c0:	415b      	adcs	r3, r3
 80022c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022c8:	4641      	mov	r1, r8
 80022ca:	eb12 0a01 	adds.w	sl, r2, r1
 80022ce:	4649      	mov	r1, r9
 80022d0:	eb43 0b01 	adc.w	fp, r3, r1
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022e8:	4692      	mov	sl, r2
 80022ea:	469b      	mov	fp, r3
 80022ec:	4643      	mov	r3, r8
 80022ee:	eb1a 0303 	adds.w	r3, sl, r3
 80022f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022f6:	464b      	mov	r3, r9
 80022f8:	eb4b 0303 	adc.w	r3, fp, r3
 80022fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800230c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002314:	460b      	mov	r3, r1
 8002316:	18db      	adds	r3, r3, r3
 8002318:	643b      	str	r3, [r7, #64]	; 0x40
 800231a:	4613      	mov	r3, r2
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	647b      	str	r3, [r7, #68]	; 0x44
 8002322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800232a:	f7fd ffb9 	bl	80002a0 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4611      	mov	r1, r2
 8002334:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <UART_SetConfig+0x2d4>)
 8002336:	fba3 2301 	umull	r2, r3, r3, r1
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2264      	movs	r2, #100	; 0x64
 800233e:	fb02 f303 	mul.w	r3, r2, r3
 8002342:	1acb      	subs	r3, r1, r3
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800234a:	4b36      	ldr	r3, [pc, #216]	; (8002424 <UART_SetConfig+0x2d4>)
 800234c:	fba3 2302 	umull	r2, r3, r3, r2
 8002350:	095b      	lsrs	r3, r3, #5
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002358:	441c      	add	r4, r3
 800235a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800235e:	2200      	movs	r2, #0
 8002360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	1891      	adds	r1, r2, r2
 8002372:	63b9      	str	r1, [r7, #56]	; 0x38
 8002374:	415b      	adcs	r3, r3
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800237c:	4641      	mov	r1, r8
 800237e:	1851      	adds	r1, r2, r1
 8002380:	6339      	str	r1, [r7, #48]	; 0x30
 8002382:	4649      	mov	r1, r9
 8002384:	414b      	adcs	r3, r1
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002394:	4659      	mov	r1, fp
 8002396:	00cb      	lsls	r3, r1, #3
 8002398:	4651      	mov	r1, sl
 800239a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800239e:	4651      	mov	r1, sl
 80023a0:	00ca      	lsls	r2, r1, #3
 80023a2:	4610      	mov	r0, r2
 80023a4:	4619      	mov	r1, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	4642      	mov	r2, r8
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80023b0:	464b      	mov	r3, r9
 80023b2:	460a      	mov	r2, r1
 80023b4:	eb42 0303 	adc.w	r3, r2, r3
 80023b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80023c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80023cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80023d0:	460b      	mov	r3, r1
 80023d2:	18db      	adds	r3, r3, r3
 80023d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d6:	4613      	mov	r3, r2
 80023d8:	eb42 0303 	adc.w	r3, r2, r3
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80023e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80023e6:	f7fd ff5b 	bl	80002a0 <__aeabi_uldivmod>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <UART_SetConfig+0x2d4>)
 80023f0:	fba3 1302 	umull	r1, r3, r3, r2
 80023f4:	095b      	lsrs	r3, r3, #5
 80023f6:	2164      	movs	r1, #100	; 0x64
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	3332      	adds	r3, #50	; 0x32
 8002402:	4a08      	ldr	r2, [pc, #32]	; (8002424 <UART_SetConfig+0x2d4>)
 8002404:	fba2 2303 	umull	r2, r3, r2, r3
 8002408:	095b      	lsrs	r3, r3, #5
 800240a:	f003 0207 	and.w	r2, r3, #7
 800240e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4422      	add	r2, r4
 8002416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002418:	e106      	b.n	8002628 <UART_SetConfig+0x4d8>
 800241a:	bf00      	nop
 800241c:	40011000 	.word	0x40011000
 8002420:	40011400 	.word	0x40011400
 8002424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800242c:	2200      	movs	r2, #0
 800242e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800243a:	4642      	mov	r2, r8
 800243c:	464b      	mov	r3, r9
 800243e:	1891      	adds	r1, r2, r2
 8002440:	6239      	str	r1, [r7, #32]
 8002442:	415b      	adcs	r3, r3
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
 8002446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800244a:	4641      	mov	r1, r8
 800244c:	1854      	adds	r4, r2, r1
 800244e:	4649      	mov	r1, r9
 8002450:	eb43 0501 	adc.w	r5, r3, r1
 8002454:	f04f 0200 	mov.w	r2, #0
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	00eb      	lsls	r3, r5, #3
 800245e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002462:	00e2      	lsls	r2, r4, #3
 8002464:	4614      	mov	r4, r2
 8002466:	461d      	mov	r5, r3
 8002468:	4643      	mov	r3, r8
 800246a:	18e3      	adds	r3, r4, r3
 800246c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002470:	464b      	mov	r3, r9
 8002472:	eb45 0303 	adc.w	r3, r5, r3
 8002476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800247a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002496:	4629      	mov	r1, r5
 8002498:	008b      	lsls	r3, r1, #2
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a0:	4621      	mov	r1, r4
 80024a2:	008a      	lsls	r2, r1, #2
 80024a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80024a8:	f7fd fefa 	bl	80002a0 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4b60      	ldr	r3, [pc, #384]	; (8002634 <UART_SetConfig+0x4e4>)
 80024b2:	fba3 2302 	umull	r2, r3, r3, r2
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	011c      	lsls	r4, r3, #4
 80024ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	1891      	adds	r1, r2, r2
 80024d2:	61b9      	str	r1, [r7, #24]
 80024d4:	415b      	adcs	r3, r3
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024dc:	4641      	mov	r1, r8
 80024de:	1851      	adds	r1, r2, r1
 80024e0:	6139      	str	r1, [r7, #16]
 80024e2:	4649      	mov	r1, r9
 80024e4:	414b      	adcs	r3, r1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024f4:	4659      	mov	r1, fp
 80024f6:	00cb      	lsls	r3, r1, #3
 80024f8:	4651      	mov	r1, sl
 80024fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024fe:	4651      	mov	r1, sl
 8002500:	00ca      	lsls	r2, r1, #3
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	4603      	mov	r3, r0
 8002508:	4642      	mov	r2, r8
 800250a:	189b      	adds	r3, r3, r2
 800250c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002510:	464b      	mov	r3, r9
 8002512:	460a      	mov	r2, r1
 8002514:	eb42 0303 	adc.w	r3, r2, r3
 8002518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	67bb      	str	r3, [r7, #120]	; 0x78
 8002526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002534:	4649      	mov	r1, r9
 8002536:	008b      	lsls	r3, r1, #2
 8002538:	4641      	mov	r1, r8
 800253a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800253e:	4641      	mov	r1, r8
 8002540:	008a      	lsls	r2, r1, #2
 8002542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002546:	f7fd feab 	bl	80002a0 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4611      	mov	r1, r2
 8002550:	4b38      	ldr	r3, [pc, #224]	; (8002634 <UART_SetConfig+0x4e4>)
 8002552:	fba3 2301 	umull	r2, r3, r3, r1
 8002556:	095b      	lsrs	r3, r3, #5
 8002558:	2264      	movs	r2, #100	; 0x64
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	1acb      	subs	r3, r1, r3
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	3332      	adds	r3, #50	; 0x32
 8002564:	4a33      	ldr	r2, [pc, #204]	; (8002634 <UART_SetConfig+0x4e4>)
 8002566:	fba2 2303 	umull	r2, r3, r2, r3
 800256a:	095b      	lsrs	r3, r3, #5
 800256c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002570:	441c      	add	r4, r3
 8002572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002576:	2200      	movs	r2, #0
 8002578:	673b      	str	r3, [r7, #112]	; 0x70
 800257a:	677a      	str	r2, [r7, #116]	; 0x74
 800257c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002580:	4642      	mov	r2, r8
 8002582:	464b      	mov	r3, r9
 8002584:	1891      	adds	r1, r2, r2
 8002586:	60b9      	str	r1, [r7, #8]
 8002588:	415b      	adcs	r3, r3
 800258a:	60fb      	str	r3, [r7, #12]
 800258c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002590:	4641      	mov	r1, r8
 8002592:	1851      	adds	r1, r2, r1
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	4649      	mov	r1, r9
 8002598:	414b      	adcs	r3, r1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	f04f 0200 	mov.w	r2, #0
 80025a0:	f04f 0300 	mov.w	r3, #0
 80025a4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80025a8:	4659      	mov	r1, fp
 80025aa:	00cb      	lsls	r3, r1, #3
 80025ac:	4651      	mov	r1, sl
 80025ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025b2:	4651      	mov	r1, sl
 80025b4:	00ca      	lsls	r2, r1, #3
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	4642      	mov	r2, r8
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80025c2:	464b      	mov	r3, r9
 80025c4:	460a      	mov	r2, r1
 80025c6:	eb42 0303 	adc.w	r3, r2, r3
 80025ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	663b      	str	r3, [r7, #96]	; 0x60
 80025d6:	667a      	str	r2, [r7, #100]	; 0x64
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80025e4:	4649      	mov	r1, r9
 80025e6:	008b      	lsls	r3, r1, #2
 80025e8:	4641      	mov	r1, r8
 80025ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025ee:	4641      	mov	r1, r8
 80025f0:	008a      	lsls	r2, r1, #2
 80025f2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025f6:	f7fd fe53 	bl	80002a0 <__aeabi_uldivmod>
 80025fa:	4602      	mov	r2, r0
 80025fc:	460b      	mov	r3, r1
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <UART_SetConfig+0x4e4>)
 8002600:	fba3 1302 	umull	r1, r3, r3, r2
 8002604:	095b      	lsrs	r3, r3, #5
 8002606:	2164      	movs	r1, #100	; 0x64
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	3332      	adds	r3, #50	; 0x32
 8002612:	4a08      	ldr	r2, [pc, #32]	; (8002634 <UART_SetConfig+0x4e4>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	095b      	lsrs	r3, r3, #5
 800261a:	f003 020f 	and.w	r2, r3, #15
 800261e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4422      	add	r2, r4
 8002626:	609a      	str	r2, [r3, #8]
}
 8002628:	bf00      	nop
 800262a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800262e:	46bd      	mov	sp, r7
 8002630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002634:	51eb851f 	.word	0x51eb851f

08002638 <main>:
static void timeChange(bool_t buttonState);



int main(void)
{
 8002638:	b5b0      	push	{r4, r5, r7, lr}
 800263a:	b090      	sub	sp, #64	; 0x40
 800263c:	af00      	add	r7, sp, #0

	HAL_Init();
 800263e:	f7fe fb81 	bl	8000d44 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8002642:	f000 f8cd 	bl	80027e0 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe f948 	bl	80008dc <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800264c:	2001      	movs	r0, #1
 800264e:	f7fe f945 	bl	80008dc <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8002652:	2002      	movs	r0, #2
 8002654:	f7fe f942 	bl	80008dc <BSP_LED_Init>

	BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8002658:	2100      	movs	r1, #0
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe f9dc 	bl	8000a18 <BSP_PB_Init>


	uartInit();
 8002660:	f7fe f8de 	bl	8000820 <uartInit>

	delayInit(&delay_led1,calcDelayLed1);
 8002664:	4b28      	ldr	r3, [pc, #160]	; (8002708 <main+0xd0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4619      	mov	r1, r3
 800266a:	4828      	ldr	r0, [pc, #160]	; (800270c <main+0xd4>)
 800266c:	f7fd ff9c 	bl	80005a8 <delayInit>
	delayInit(&delay_led2,calcDelayLed2);
 8002670:	4b27      	ldr	r3, [pc, #156]	; (8002710 <main+0xd8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	4827      	ldr	r0, [pc, #156]	; (8002714 <main+0xdc>)
 8002678:	f7fd ff96 	bl	80005a8 <delayInit>
	debounceFSM_init(DelayDebounce);
 800267c:	2028      	movs	r0, #40	; 0x28
 800267e:	f7fe f819 	bl	80006b4 <debounceFSM_init>

	srand(time(NULL));  // Seed to initialize random function, without it function timeIntervalCalc() will be return the same value.
 8002682:	2000      	movs	r0, #0
 8002684:	f000 faca 	bl	8002c1c <time>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	4613      	mov	r3, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f938 	bl	8002904 <srand>

	uint8_t ascend_msg[] = "Flanco ascendente detectado\n";
 8002694:	4b20      	ldr	r3, [pc, #128]	; (8002718 <main+0xe0>)
 8002696:	f107 0420 	add.w	r4, r7, #32
 800269a:	461d      	mov	r5, r3
 800269c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800269e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026a4:	c407      	stmia	r4!, {r0, r1, r2}
 80026a6:	7023      	strb	r3, [r4, #0]
	uint8_t desc_msg[] = "Flanco descendente detectado\n";
 80026a8:	4b1c      	ldr	r3, [pc, #112]	; (800271c <main+0xe4>)
 80026aa:	463c      	mov	r4, r7
 80026ac:	461d      	mov	r5, r3
 80026ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80026b6:	c407      	stmia	r4!, {r0, r1, r2}
 80026b8:	8023      	strh	r3, [r4, #0]

	while (1) {

		debounceFSM_update();
 80026ba:	f7fe f80f 	bl	80006dc <debounceFSM_update>

		bool_t currentButtonState = readKey();
 80026be:	f7fe f88f 	bl	80007e0 <readKey>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if (currentButtonState != previousButtonState)
 80026c8:	4b15      	ldr	r3, [pc, #84]	; (8002720 <main+0xe8>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d016      	beq.n	8002702 <main+0xca>
		{
			if (currentButtonState)
 80026d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <main+0xb0>
			{
				uartSendString(ascend_msg);
 80026dc:	f107 0320 	add.w	r3, r7, #32
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fe f8cd 	bl	8000880 <uartSendString>
 80026e6:	e003      	b.n	80026f0 <main+0xb8>
			}
			else
			{
				uartSendString(desc_msg);
 80026e8:	463b      	mov	r3, r7
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe f8c8 	bl	8000880 <uartSendString>

			}
			timeChange(currentButtonState);
 80026f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f849 	bl	800278c <timeChange>
			previousButtonState = currentButtonState;
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <main+0xe8>)
 80026fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002700:	7013      	strb	r3, [r2, #0]
		}



		blinkLeds();
 8002702:	f000 f829 	bl	8002758 <blinkLeds>
	while (1) {
 8002706:	e7d8      	b.n	80026ba <main+0x82>
 8002708:	2000001c 	.word	0x2000001c
 800270c:	200000fc 	.word	0x200000fc
 8002710:	20000020 	.word	0x20000020
 8002714:	20000108 	.word	0x20000108
 8002718:	08003ac8 	.word	0x08003ac8
 800271c:	08003ae8 	.word	0x08003ae8
 8002720:	200000f8 	.word	0x200000f8

08002724 <timeIntervalCalc>:

/*
 * @brief Calculate a randomly value between two delay time
 * @return Calculate value
 */
static int timeIntervalCalc(){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
	int InternalCal = (rand() % (BLINKY_DELAY_MAX - BLINKY_DELAY_MIN + 1)) + BLINKY_DELAY_MIN;
 800272a:	f000 f919 	bl	8002960 <rand>
 800272e:	4602      	mov	r2, r0
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <timeIntervalCalc+0x30>)
 8002732:	fb83 1302 	smull	r1, r3, r3, r2
 8002736:	1199      	asrs	r1, r3, #6
 8002738:	17d3      	asrs	r3, r2, #31
 800273a:	1acb      	subs	r3, r1, r3
 800273c:	f240 1191 	movw	r1, #401	; 0x191
 8002740:	fb01 f303 	mul.w	r3, r1, r3
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	3364      	adds	r3, #100	; 0x64
 8002748:	607b      	str	r3, [r7, #4]
	return InternalCal;
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	28db9c69 	.word	0x28db9c69

08002758 <blinkLeds>:

static void blinkLeds(void){
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

	if (delayRead(&delay_led1)) {
 800275c:	4809      	ldr	r0, [pc, #36]	; (8002784 <blinkLeds+0x2c>)
 800275e:	f7fd ff38 	bl	80005d2 <delayRead>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <blinkLeds+0x16>
		BSP_LED_Toggle(LED1);
 8002768:	2000      	movs	r0, #0
 800276a:	f7fe f93b 	bl	80009e4 <BSP_LED_Toggle>
	}
	if (delayRead(&delay_led2)) {
 800276e:	4806      	ldr	r0, [pc, #24]	; (8002788 <blinkLeds+0x30>)
 8002770:	f7fd ff2f 	bl	80005d2 <delayRead>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <blinkLeds+0x28>
		BSP_LED_Toggle(LED2);
 800277a:	2001      	movs	r0, #1
 800277c:	f7fe f932 	bl	80009e4 <BSP_LED_Toggle>
	}

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	200000fc 	.word	0x200000fc
 8002788:	20000108 	.word	0x20000108

0800278c <timeChange>:

static void timeChange(bool_t buttonState){
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]

	if(buttonState){
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <timeChange+0x3c>

		calcDelayLed1 = timeIntervalCalc(); // new led1 delay
 800279c:	f7ff ffc2 	bl	8002724 <timeIntervalCalc>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <timeChange+0x44>)
 80027a4:	6013      	str	r3, [r2, #0]
		calcDelayLed2 = timeIntervalCalc(); // new led2 delay
 80027a6:	f7ff ffbd 	bl	8002724 <timeIntervalCalc>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <timeChange+0x48>)
 80027ae:	6013      	str	r3, [r2, #0]

		delayWrite(&delay_led1, calcDelayLed1);
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <timeChange+0x44>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	4808      	ldr	r0, [pc, #32]	; (80027d8 <timeChange+0x4c>)
 80027b8:	f7fd ff3c 	bl	8000634 <delayWrite>
		delayWrite(&delay_led2, calcDelayLed2);
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <timeChange+0x48>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4806      	ldr	r0, [pc, #24]	; (80027dc <timeChange+0x50>)
 80027c4:	f7fd ff36 	bl	8000634 <delayWrite>

	}
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	2000001c 	.word	0x2000001c
 80027d4:	20000020 	.word	0x20000020
 80027d8:	200000fc 	.word	0x200000fc
 80027dc:	20000108 	.word	0x20000108

080027e0 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b094      	sub	sp, #80	; 0x50
 80027e4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b2c      	ldr	r3, [pc, #176]	; (800289c <SystemClock_Config+0xbc>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	4a2b      	ldr	r2, [pc, #172]	; (800289c <SystemClock_Config+0xbc>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	6413      	str	r3, [r2, #64]	; 0x40
 80027f6:	4b29      	ldr	r3, [pc, #164]	; (800289c <SystemClock_Config+0xbc>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <SystemClock_Config+0xc0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <SystemClock_Config+0xc0>)
 800280c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b23      	ldr	r3, [pc, #140]	; (80028a0 <SystemClock_Config+0xc0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800281e:	2301      	movs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002822:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002826:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002828:	2302      	movs	r3, #2
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800282c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002830:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002832:	2308      	movs	r3, #8
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002836:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800283a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800283c:	2302      	movs	r3, #2
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002840:	2307      	movs	r3, #7
 8002842:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	4618      	mov	r0, r3
 800284a:	f7fe fe9b 	bl	8001584 <HAL_RCC_OscConfig>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002854:	f000 f826 	bl	80028a4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002858:	f7fe fe44 	bl	80014e4 <HAL_PWREx_EnableOverDrive>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8002862:	f000 f81f 	bl	80028a4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002866:	230f      	movs	r3, #15
 8002868:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800286a:	2302      	movs	r3, #2
 800286c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002872:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002876:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800287e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002882:	2105      	movs	r1, #5
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff f8f5 	bl	8001a74 <HAL_RCC_ClockConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8002890:	f000 f808 	bl	80028a4 <Error_Handler>
	}
}
 8002894:	bf00      	nop
 8002896:	3750      	adds	r7, #80	; 0x50
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7fe f867 	bl	800097c <BSP_LED_On>
	while (1)
 80028ae:	e7fe      	b.n	80028ae <Error_Handler+0xa>

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028b6:	e003      	b.n	80028c0 <LoopCopyDataInit>

080028b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028be:	3104      	adds	r1, #4

080028c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028c8:	d3f6      	bcc.n	80028b8 <CopyDataInit>
  ldr  r2, =_sbss
 80028ca:	4a0b      	ldr	r2, [pc, #44]	; (80028f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028cc:	e002      	b.n	80028d4 <LoopFillZerobss>

080028ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028d0:	f842 3b04 	str.w	r3, [r2], #4

080028d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028d8:	d3f9      	bcc.n	80028ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028da:	f7fe f909 	bl	8000af0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028de:	f000 fa15 	bl	8002d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7ff fea9 	bl	8002638 <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80028e8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80028ec:	08003c18 	.word	0x08003c18
  ldr  r0, =_sdata
 80028f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028f4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80028f8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80028fc:	20000260 	.word	0x20000260

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <srand>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4b10      	ldr	r3, [pc, #64]	; (8002948 <srand+0x44>)
 8002908:	681d      	ldr	r5, [r3, #0]
 800290a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800290c:	4604      	mov	r4, r0
 800290e:	b9b3      	cbnz	r3, 800293e <srand+0x3a>
 8002910:	2018      	movs	r0, #24
 8002912:	f000 fa8d 	bl	8002e30 <malloc>
 8002916:	4602      	mov	r2, r0
 8002918:	6328      	str	r0, [r5, #48]	; 0x30
 800291a:	b920      	cbnz	r0, 8002926 <srand+0x22>
 800291c:	4b0b      	ldr	r3, [pc, #44]	; (800294c <srand+0x48>)
 800291e:	480c      	ldr	r0, [pc, #48]	; (8002950 <srand+0x4c>)
 8002920:	2146      	movs	r1, #70	; 0x46
 8002922:	f000 fa1b 	bl	8002d5c <__assert_func>
 8002926:	490b      	ldr	r1, [pc, #44]	; (8002954 <srand+0x50>)
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <srand+0x54>)
 800292a:	e9c0 1300 	strd	r1, r3, [r0]
 800292e:	4b0b      	ldr	r3, [pc, #44]	; (800295c <srand+0x58>)
 8002930:	6083      	str	r3, [r0, #8]
 8002932:	230b      	movs	r3, #11
 8002934:	8183      	strh	r3, [r0, #12]
 8002936:	2100      	movs	r1, #0
 8002938:	2001      	movs	r0, #1
 800293a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800293e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002940:	2200      	movs	r2, #0
 8002942:	611c      	str	r4, [r3, #16]
 8002944:	615a      	str	r2, [r3, #20]
 8002946:	bd38      	pop	{r3, r4, r5, pc}
 8002948:	2000007c 	.word	0x2000007c
 800294c:	08003b28 	.word	0x08003b28
 8002950:	08003b3f 	.word	0x08003b3f
 8002954:	abcd330e 	.word	0xabcd330e
 8002958:	e66d1234 	.word	0xe66d1234
 800295c:	0005deec 	.word	0x0005deec

08002960 <rand>:
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <rand+0x5c>)
 8002962:	b510      	push	{r4, lr}
 8002964:	681c      	ldr	r4, [r3, #0]
 8002966:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002968:	b9b3      	cbnz	r3, 8002998 <rand+0x38>
 800296a:	2018      	movs	r0, #24
 800296c:	f000 fa60 	bl	8002e30 <malloc>
 8002970:	4602      	mov	r2, r0
 8002972:	6320      	str	r0, [r4, #48]	; 0x30
 8002974:	b920      	cbnz	r0, 8002980 <rand+0x20>
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <rand+0x60>)
 8002978:	4812      	ldr	r0, [pc, #72]	; (80029c4 <rand+0x64>)
 800297a:	2152      	movs	r1, #82	; 0x52
 800297c:	f000 f9ee 	bl	8002d5c <__assert_func>
 8002980:	4911      	ldr	r1, [pc, #68]	; (80029c8 <rand+0x68>)
 8002982:	4b12      	ldr	r3, [pc, #72]	; (80029cc <rand+0x6c>)
 8002984:	e9c0 1300 	strd	r1, r3, [r0]
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <rand+0x70>)
 800298a:	6083      	str	r3, [r0, #8]
 800298c:	230b      	movs	r3, #11
 800298e:	8183      	strh	r3, [r0, #12]
 8002990:	2100      	movs	r1, #0
 8002992:	2001      	movs	r0, #1
 8002994:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002998:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800299a:	480e      	ldr	r0, [pc, #56]	; (80029d4 <rand+0x74>)
 800299c:	690b      	ldr	r3, [r1, #16]
 800299e:	694c      	ldr	r4, [r1, #20]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <rand+0x78>)
 80029a2:	4358      	muls	r0, r3
 80029a4:	fb02 0004 	mla	r0, r2, r4, r0
 80029a8:	fba3 3202 	umull	r3, r2, r3, r2
 80029ac:	3301      	adds	r3, #1
 80029ae:	eb40 0002 	adc.w	r0, r0, r2
 80029b2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80029b6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80029ba:	bd10      	pop	{r4, pc}
 80029bc:	2000007c 	.word	0x2000007c
 80029c0:	08003b28 	.word	0x08003b28
 80029c4:	08003b3f 	.word	0x08003b3f
 80029c8:	abcd330e 	.word	0xabcd330e
 80029cc:	e66d1234 	.word	0xe66d1234
 80029d0:	0005deec 	.word	0x0005deec
 80029d4:	5851f42d 	.word	0x5851f42d
 80029d8:	4c957f2d 	.word	0x4c957f2d

080029dc <std>:
 80029dc:	2300      	movs	r3, #0
 80029de:	b510      	push	{r4, lr}
 80029e0:	4604      	mov	r4, r0
 80029e2:	e9c0 3300 	strd	r3, r3, [r0]
 80029e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029ea:	6083      	str	r3, [r0, #8]
 80029ec:	8181      	strh	r1, [r0, #12]
 80029ee:	6643      	str	r3, [r0, #100]	; 0x64
 80029f0:	81c2      	strh	r2, [r0, #14]
 80029f2:	6183      	str	r3, [r0, #24]
 80029f4:	4619      	mov	r1, r3
 80029f6:	2208      	movs	r2, #8
 80029f8:	305c      	adds	r0, #92	; 0x5c
 80029fa:	f000 f906 	bl	8002c0a <memset>
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <std+0x58>)
 8002a00:	6263      	str	r3, [r4, #36]	; 0x24
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <std+0x5c>)
 8002a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <std+0x60>)
 8002a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <std+0x64>)
 8002a0c:	6323      	str	r3, [r4, #48]	; 0x30
 8002a0e:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <std+0x68>)
 8002a10:	6224      	str	r4, [r4, #32]
 8002a12:	429c      	cmp	r4, r3
 8002a14:	d006      	beq.n	8002a24 <std+0x48>
 8002a16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a1a:	4294      	cmp	r4, r2
 8002a1c:	d002      	beq.n	8002a24 <std+0x48>
 8002a1e:	33d0      	adds	r3, #208	; 0xd0
 8002a20:	429c      	cmp	r4, r3
 8002a22:	d105      	bne.n	8002a30 <std+0x54>
 8002a24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a2c:	f000 b992 	b.w	8002d54 <__retarget_lock_init_recursive>
 8002a30:	bd10      	pop	{r4, pc}
 8002a32:	bf00      	nop
 8002a34:	08002b85 	.word	0x08002b85
 8002a38:	08002ba7 	.word	0x08002ba7
 8002a3c:	08002bdf 	.word	0x08002bdf
 8002a40:	08002c03 	.word	0x08002c03
 8002a44:	20000114 	.word	0x20000114

08002a48 <stdio_exit_handler>:
 8002a48:	4a02      	ldr	r2, [pc, #8]	; (8002a54 <stdio_exit_handler+0xc>)
 8002a4a:	4903      	ldr	r1, [pc, #12]	; (8002a58 <stdio_exit_handler+0x10>)
 8002a4c:	4803      	ldr	r0, [pc, #12]	; (8002a5c <stdio_exit_handler+0x14>)
 8002a4e:	f000 b869 	b.w	8002b24 <_fwalk_sglue>
 8002a52:	bf00      	nop
 8002a54:	20000024 	.word	0x20000024
 8002a58:	0800364d 	.word	0x0800364d
 8002a5c:	20000030 	.word	0x20000030

08002a60 <cleanup_stdio>:
 8002a60:	6841      	ldr	r1, [r0, #4]
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <cleanup_stdio+0x34>)
 8002a64:	4299      	cmp	r1, r3
 8002a66:	b510      	push	{r4, lr}
 8002a68:	4604      	mov	r4, r0
 8002a6a:	d001      	beq.n	8002a70 <cleanup_stdio+0x10>
 8002a6c:	f000 fdee 	bl	800364c <_fflush_r>
 8002a70:	68a1      	ldr	r1, [r4, #8]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <cleanup_stdio+0x38>)
 8002a74:	4299      	cmp	r1, r3
 8002a76:	d002      	beq.n	8002a7e <cleanup_stdio+0x1e>
 8002a78:	4620      	mov	r0, r4
 8002a7a:	f000 fde7 	bl	800364c <_fflush_r>
 8002a7e:	68e1      	ldr	r1, [r4, #12]
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <cleanup_stdio+0x3c>)
 8002a82:	4299      	cmp	r1, r3
 8002a84:	d004      	beq.n	8002a90 <cleanup_stdio+0x30>
 8002a86:	4620      	mov	r0, r4
 8002a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a8c:	f000 bdde 	b.w	800364c <_fflush_r>
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	bf00      	nop
 8002a94:	20000114 	.word	0x20000114
 8002a98:	2000017c 	.word	0x2000017c
 8002a9c:	200001e4 	.word	0x200001e4

08002aa0 <global_stdio_init.part.0>:
 8002aa0:	b510      	push	{r4, lr}
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	; (8002ad0 <global_stdio_init.part.0+0x30>)
 8002aa4:	4c0b      	ldr	r4, [pc, #44]	; (8002ad4 <global_stdio_init.part.0+0x34>)
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	; (8002ad8 <global_stdio_init.part.0+0x38>)
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4620      	mov	r0, r4
 8002aac:	2200      	movs	r2, #0
 8002aae:	2104      	movs	r1, #4
 8002ab0:	f7ff ff94 	bl	80029dc <std>
 8002ab4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ab8:	2201      	movs	r2, #1
 8002aba:	2109      	movs	r1, #9
 8002abc:	f7ff ff8e 	bl	80029dc <std>
 8002ac0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002aca:	2112      	movs	r1, #18
 8002acc:	f7ff bf86 	b.w	80029dc <std>
 8002ad0:	2000024c 	.word	0x2000024c
 8002ad4:	20000114 	.word	0x20000114
 8002ad8:	08002a49 	.word	0x08002a49

08002adc <__sfp_lock_acquire>:
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <__sfp_lock_acquire+0x8>)
 8002ade:	f000 b93a 	b.w	8002d56 <__retarget_lock_acquire_recursive>
 8002ae2:	bf00      	nop
 8002ae4:	20000255 	.word	0x20000255

08002ae8 <__sfp_lock_release>:
 8002ae8:	4801      	ldr	r0, [pc, #4]	; (8002af0 <__sfp_lock_release+0x8>)
 8002aea:	f000 b935 	b.w	8002d58 <__retarget_lock_release_recursive>
 8002aee:	bf00      	nop
 8002af0:	20000255 	.word	0x20000255

08002af4 <__sinit>:
 8002af4:	b510      	push	{r4, lr}
 8002af6:	4604      	mov	r4, r0
 8002af8:	f7ff fff0 	bl	8002adc <__sfp_lock_acquire>
 8002afc:	6a23      	ldr	r3, [r4, #32]
 8002afe:	b11b      	cbz	r3, 8002b08 <__sinit+0x14>
 8002b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b04:	f7ff bff0 	b.w	8002ae8 <__sfp_lock_release>
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__sinit+0x28>)
 8002b0a:	6223      	str	r3, [r4, #32]
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__sinit+0x2c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1f5      	bne.n	8002b00 <__sinit+0xc>
 8002b14:	f7ff ffc4 	bl	8002aa0 <global_stdio_init.part.0>
 8002b18:	e7f2      	b.n	8002b00 <__sinit+0xc>
 8002b1a:	bf00      	nop
 8002b1c:	08002a61 	.word	0x08002a61
 8002b20:	2000024c 	.word	0x2000024c

08002b24 <_fwalk_sglue>:
 8002b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b28:	4607      	mov	r7, r0
 8002b2a:	4688      	mov	r8, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b34:	f1b9 0901 	subs.w	r9, r9, #1
 8002b38:	d505      	bpl.n	8002b46 <_fwalk_sglue+0x22>
 8002b3a:	6824      	ldr	r4, [r4, #0]
 8002b3c:	2c00      	cmp	r4, #0
 8002b3e:	d1f7      	bne.n	8002b30 <_fwalk_sglue+0xc>
 8002b40:	4630      	mov	r0, r6
 8002b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b46:	89ab      	ldrh	r3, [r5, #12]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d907      	bls.n	8002b5c <_fwalk_sglue+0x38>
 8002b4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b50:	3301      	adds	r3, #1
 8002b52:	d003      	beq.n	8002b5c <_fwalk_sglue+0x38>
 8002b54:	4629      	mov	r1, r5
 8002b56:	4638      	mov	r0, r7
 8002b58:	47c0      	blx	r8
 8002b5a:	4306      	orrs	r6, r0
 8002b5c:	3568      	adds	r5, #104	; 0x68
 8002b5e:	e7e9      	b.n	8002b34 <_fwalk_sglue+0x10>

08002b60 <iprintf>:
 8002b60:	b40f      	push	{r0, r1, r2, r3}
 8002b62:	b507      	push	{r0, r1, r2, lr}
 8002b64:	4906      	ldr	r1, [pc, #24]	; (8002b80 <iprintf+0x20>)
 8002b66:	ab04      	add	r3, sp, #16
 8002b68:	6808      	ldr	r0, [r1, #0]
 8002b6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b6e:	6881      	ldr	r1, [r0, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	f000 fa3b 	bl	8002fec <_vfiprintf_r>
 8002b76:	b003      	add	sp, #12
 8002b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b7c:	b004      	add	sp, #16
 8002b7e:	4770      	bx	lr
 8002b80:	2000007c 	.word	0x2000007c

08002b84 <__sread>:
 8002b84:	b510      	push	{r4, lr}
 8002b86:	460c      	mov	r4, r1
 8002b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b8c:	f000 f894 	bl	8002cb8 <_read_r>
 8002b90:	2800      	cmp	r0, #0
 8002b92:	bfab      	itete	ge
 8002b94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b96:	89a3      	ldrhlt	r3, [r4, #12]
 8002b98:	181b      	addge	r3, r3, r0
 8002b9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b9e:	bfac      	ite	ge
 8002ba0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ba2:	81a3      	strhlt	r3, [r4, #12]
 8002ba4:	bd10      	pop	{r4, pc}

08002ba6 <__swrite>:
 8002ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002baa:	461f      	mov	r7, r3
 8002bac:	898b      	ldrh	r3, [r1, #12]
 8002bae:	05db      	lsls	r3, r3, #23
 8002bb0:	4605      	mov	r5, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	4616      	mov	r6, r2
 8002bb6:	d505      	bpl.n	8002bc4 <__swrite+0x1e>
 8002bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f000 f868 	bl	8002c94 <_lseek_r>
 8002bc4:	89a3      	ldrh	r3, [r4, #12]
 8002bc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bce:	81a3      	strh	r3, [r4, #12]
 8002bd0:	4632      	mov	r2, r6
 8002bd2:	463b      	mov	r3, r7
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bda:	f000 b87f 	b.w	8002cdc <_write_r>

08002bde <__sseek>:
 8002bde:	b510      	push	{r4, lr}
 8002be0:	460c      	mov	r4, r1
 8002be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be6:	f000 f855 	bl	8002c94 <_lseek_r>
 8002bea:	1c43      	adds	r3, r0, #1
 8002bec:	89a3      	ldrh	r3, [r4, #12]
 8002bee:	bf15      	itete	ne
 8002bf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8002bf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bfa:	81a3      	strheq	r3, [r4, #12]
 8002bfc:	bf18      	it	ne
 8002bfe:	81a3      	strhne	r3, [r4, #12]
 8002c00:	bd10      	pop	{r4, pc}

08002c02 <__sclose>:
 8002c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c06:	f000 b823 	b.w	8002c50 <_close_r>

08002c0a <memset>:
 8002c0a:	4402      	add	r2, r0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d100      	bne.n	8002c14 <memset+0xa>
 8002c12:	4770      	bx	lr
 8002c14:	f803 1b01 	strb.w	r1, [r3], #1
 8002c18:	e7f9      	b.n	8002c0e <memset+0x4>
	...

08002c1c <time>:
 8002c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <time+0x30>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	4669      	mov	r1, sp
 8002c24:	4604      	mov	r4, r0
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	f000 f822 	bl	8002c70 <_gettimeofday_r>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	bfbe      	ittt	lt
 8002c30:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002c34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002c38:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002c40:	b10c      	cbz	r4, 8002c46 <time+0x2a>
 8002c42:	e9c4 0100 	strd	r0, r1, [r4]
 8002c46:	b004      	add	sp, #16
 8002c48:	bd10      	pop	{r4, pc}
 8002c4a:	bf00      	nop
 8002c4c:	2000007c 	.word	0x2000007c

08002c50 <_close_r>:
 8002c50:	b538      	push	{r3, r4, r5, lr}
 8002c52:	4d06      	ldr	r5, [pc, #24]	; (8002c6c <_close_r+0x1c>)
 8002c54:	2300      	movs	r3, #0
 8002c56:	4604      	mov	r4, r0
 8002c58:	4608      	mov	r0, r1
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	f7fe f807 	bl	8000c6e <_close>
 8002c60:	1c43      	adds	r3, r0, #1
 8002c62:	d102      	bne.n	8002c6a <_close_r+0x1a>
 8002c64:	682b      	ldr	r3, [r5, #0]
 8002c66:	b103      	cbz	r3, 8002c6a <_close_r+0x1a>
 8002c68:	6023      	str	r3, [r4, #0]
 8002c6a:	bd38      	pop	{r3, r4, r5, pc}
 8002c6c:	20000250 	.word	0x20000250

08002c70 <_gettimeofday_r>:
 8002c70:	b538      	push	{r3, r4, r5, lr}
 8002c72:	4d07      	ldr	r5, [pc, #28]	; (8002c90 <_gettimeofday_r+0x20>)
 8002c74:	2300      	movs	r3, #0
 8002c76:	4604      	mov	r4, r0
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	602b      	str	r3, [r5, #0]
 8002c7e:	f000 fe95 	bl	80039ac <_gettimeofday>
 8002c82:	1c43      	adds	r3, r0, #1
 8002c84:	d102      	bne.n	8002c8c <_gettimeofday_r+0x1c>
 8002c86:	682b      	ldr	r3, [r5, #0]
 8002c88:	b103      	cbz	r3, 8002c8c <_gettimeofday_r+0x1c>
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	bd38      	pop	{r3, r4, r5, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000250 	.word	0x20000250

08002c94 <_lseek_r>:
 8002c94:	b538      	push	{r3, r4, r5, lr}
 8002c96:	4d07      	ldr	r5, [pc, #28]	; (8002cb4 <_lseek_r+0x20>)
 8002c98:	4604      	mov	r4, r0
 8002c9a:	4608      	mov	r0, r1
 8002c9c:	4611      	mov	r1, r2
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	602a      	str	r2, [r5, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f7fe f80a 	bl	8000cbc <_lseek>
 8002ca8:	1c43      	adds	r3, r0, #1
 8002caa:	d102      	bne.n	8002cb2 <_lseek_r+0x1e>
 8002cac:	682b      	ldr	r3, [r5, #0]
 8002cae:	b103      	cbz	r3, 8002cb2 <_lseek_r+0x1e>
 8002cb0:	6023      	str	r3, [r4, #0]
 8002cb2:	bd38      	pop	{r3, r4, r5, pc}
 8002cb4:	20000250 	.word	0x20000250

08002cb8 <_read_r>:
 8002cb8:	b538      	push	{r3, r4, r5, lr}
 8002cba:	4d07      	ldr	r5, [pc, #28]	; (8002cd8 <_read_r+0x20>)
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	4608      	mov	r0, r1
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	602a      	str	r2, [r5, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f7fd ff98 	bl	8000bfc <_read>
 8002ccc:	1c43      	adds	r3, r0, #1
 8002cce:	d102      	bne.n	8002cd6 <_read_r+0x1e>
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	b103      	cbz	r3, 8002cd6 <_read_r+0x1e>
 8002cd4:	6023      	str	r3, [r4, #0]
 8002cd6:	bd38      	pop	{r3, r4, r5, pc}
 8002cd8:	20000250 	.word	0x20000250

08002cdc <_write_r>:
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4d07      	ldr	r5, [pc, #28]	; (8002cfc <_write_r+0x20>)
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	602a      	str	r2, [r5, #0]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f7fd ffa3 	bl	8000c36 <_write>
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d102      	bne.n	8002cfa <_write_r+0x1e>
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	b103      	cbz	r3, 8002cfa <_write_r+0x1e>
 8002cf8:	6023      	str	r3, [r4, #0]
 8002cfa:	bd38      	pop	{r3, r4, r5, pc}
 8002cfc:	20000250 	.word	0x20000250

08002d00 <__errno>:
 8002d00:	4b01      	ldr	r3, [pc, #4]	; (8002d08 <__errno+0x8>)
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	2000007c 	.word	0x2000007c

08002d0c <__libc_init_array>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	4d0d      	ldr	r5, [pc, #52]	; (8002d44 <__libc_init_array+0x38>)
 8002d10:	4c0d      	ldr	r4, [pc, #52]	; (8002d48 <__libc_init_array+0x3c>)
 8002d12:	1b64      	subs	r4, r4, r5
 8002d14:	10a4      	asrs	r4, r4, #2
 8002d16:	2600      	movs	r6, #0
 8002d18:	42a6      	cmp	r6, r4
 8002d1a:	d109      	bne.n	8002d30 <__libc_init_array+0x24>
 8002d1c:	4d0b      	ldr	r5, [pc, #44]	; (8002d4c <__libc_init_array+0x40>)
 8002d1e:	4c0c      	ldr	r4, [pc, #48]	; (8002d50 <__libc_init_array+0x44>)
 8002d20:	f000 fe4c 	bl	80039bc <_init>
 8002d24:	1b64      	subs	r4, r4, r5
 8002d26:	10a4      	asrs	r4, r4, #2
 8002d28:	2600      	movs	r6, #0
 8002d2a:	42a6      	cmp	r6, r4
 8002d2c:	d105      	bne.n	8002d3a <__libc_init_array+0x2e>
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d34:	4798      	blx	r3
 8002d36:	3601      	adds	r6, #1
 8002d38:	e7ee      	b.n	8002d18 <__libc_init_array+0xc>
 8002d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d3e:	4798      	blx	r3
 8002d40:	3601      	adds	r6, #1
 8002d42:	e7f2      	b.n	8002d2a <__libc_init_array+0x1e>
 8002d44:	08003c10 	.word	0x08003c10
 8002d48:	08003c10 	.word	0x08003c10
 8002d4c:	08003c10 	.word	0x08003c10
 8002d50:	08003c14 	.word	0x08003c14

08002d54 <__retarget_lock_init_recursive>:
 8002d54:	4770      	bx	lr

08002d56 <__retarget_lock_acquire_recursive>:
 8002d56:	4770      	bx	lr

08002d58 <__retarget_lock_release_recursive>:
 8002d58:	4770      	bx	lr
	...

08002d5c <__assert_func>:
 8002d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d5e:	4614      	mov	r4, r2
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b09      	ldr	r3, [pc, #36]	; (8002d88 <__assert_func+0x2c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4605      	mov	r5, r0
 8002d68:	68d8      	ldr	r0, [r3, #12]
 8002d6a:	b14c      	cbz	r4, 8002d80 <__assert_func+0x24>
 8002d6c:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <__assert_func+0x30>)
 8002d6e:	9100      	str	r1, [sp, #0]
 8002d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002d74:	4906      	ldr	r1, [pc, #24]	; (8002d90 <__assert_func+0x34>)
 8002d76:	462b      	mov	r3, r5
 8002d78:	f000 fc90 	bl	800369c <fiprintf>
 8002d7c:	f000 fd46 	bl	800380c <abort>
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <__assert_func+0x38>)
 8002d82:	461c      	mov	r4, r3
 8002d84:	e7f3      	b.n	8002d6e <__assert_func+0x12>
 8002d86:	bf00      	nop
 8002d88:	2000007c 	.word	0x2000007c
 8002d8c:	08003b97 	.word	0x08003b97
 8002d90:	08003ba4 	.word	0x08003ba4
 8002d94:	08003bd2 	.word	0x08003bd2

08002d98 <_free_r>:
 8002d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d9a:	2900      	cmp	r1, #0
 8002d9c:	d044      	beq.n	8002e28 <_free_r+0x90>
 8002d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002da2:	9001      	str	r0, [sp, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f1a1 0404 	sub.w	r4, r1, #4
 8002daa:	bfb8      	it	lt
 8002dac:	18e4      	addlt	r4, r4, r3
 8002dae:	f000 f8e7 	bl	8002f80 <__malloc_lock>
 8002db2:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <_free_r+0x94>)
 8002db4:	9801      	ldr	r0, [sp, #4]
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	b933      	cbnz	r3, 8002dc8 <_free_r+0x30>
 8002dba:	6063      	str	r3, [r4, #4]
 8002dbc:	6014      	str	r4, [r2, #0]
 8002dbe:	b003      	add	sp, #12
 8002dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002dc4:	f000 b8e2 	b.w	8002f8c <__malloc_unlock>
 8002dc8:	42a3      	cmp	r3, r4
 8002dca:	d908      	bls.n	8002dde <_free_r+0x46>
 8002dcc:	6825      	ldr	r5, [r4, #0]
 8002dce:	1961      	adds	r1, r4, r5
 8002dd0:	428b      	cmp	r3, r1
 8002dd2:	bf01      	itttt	eq
 8002dd4:	6819      	ldreq	r1, [r3, #0]
 8002dd6:	685b      	ldreq	r3, [r3, #4]
 8002dd8:	1949      	addeq	r1, r1, r5
 8002dda:	6021      	streq	r1, [r4, #0]
 8002ddc:	e7ed      	b.n	8002dba <_free_r+0x22>
 8002dde:	461a      	mov	r2, r3
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	b10b      	cbz	r3, 8002de8 <_free_r+0x50>
 8002de4:	42a3      	cmp	r3, r4
 8002de6:	d9fa      	bls.n	8002dde <_free_r+0x46>
 8002de8:	6811      	ldr	r1, [r2, #0]
 8002dea:	1855      	adds	r5, r2, r1
 8002dec:	42a5      	cmp	r5, r4
 8002dee:	d10b      	bne.n	8002e08 <_free_r+0x70>
 8002df0:	6824      	ldr	r4, [r4, #0]
 8002df2:	4421      	add	r1, r4
 8002df4:	1854      	adds	r4, r2, r1
 8002df6:	42a3      	cmp	r3, r4
 8002df8:	6011      	str	r1, [r2, #0]
 8002dfa:	d1e0      	bne.n	8002dbe <_free_r+0x26>
 8002dfc:	681c      	ldr	r4, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	6053      	str	r3, [r2, #4]
 8002e02:	440c      	add	r4, r1
 8002e04:	6014      	str	r4, [r2, #0]
 8002e06:	e7da      	b.n	8002dbe <_free_r+0x26>
 8002e08:	d902      	bls.n	8002e10 <_free_r+0x78>
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	6003      	str	r3, [r0, #0]
 8002e0e:	e7d6      	b.n	8002dbe <_free_r+0x26>
 8002e10:	6825      	ldr	r5, [r4, #0]
 8002e12:	1961      	adds	r1, r4, r5
 8002e14:	428b      	cmp	r3, r1
 8002e16:	bf04      	itt	eq
 8002e18:	6819      	ldreq	r1, [r3, #0]
 8002e1a:	685b      	ldreq	r3, [r3, #4]
 8002e1c:	6063      	str	r3, [r4, #4]
 8002e1e:	bf04      	itt	eq
 8002e20:	1949      	addeq	r1, r1, r5
 8002e22:	6021      	streq	r1, [r4, #0]
 8002e24:	6054      	str	r4, [r2, #4]
 8002e26:	e7ca      	b.n	8002dbe <_free_r+0x26>
 8002e28:	b003      	add	sp, #12
 8002e2a:	bd30      	pop	{r4, r5, pc}
 8002e2c:	20000258 	.word	0x20000258

08002e30 <malloc>:
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <malloc+0xc>)
 8002e32:	4601      	mov	r1, r0
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f000 b823 	b.w	8002e80 <_malloc_r>
 8002e3a:	bf00      	nop
 8002e3c:	2000007c 	.word	0x2000007c

08002e40 <sbrk_aligned>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4e0e      	ldr	r6, [pc, #56]	; (8002e7c <sbrk_aligned+0x3c>)
 8002e44:	460c      	mov	r4, r1
 8002e46:	6831      	ldr	r1, [r6, #0]
 8002e48:	4605      	mov	r5, r0
 8002e4a:	b911      	cbnz	r1, 8002e52 <sbrk_aligned+0x12>
 8002e4c:	f000 fcce 	bl	80037ec <_sbrk_r>
 8002e50:	6030      	str	r0, [r6, #0]
 8002e52:	4621      	mov	r1, r4
 8002e54:	4628      	mov	r0, r5
 8002e56:	f000 fcc9 	bl	80037ec <_sbrk_r>
 8002e5a:	1c43      	adds	r3, r0, #1
 8002e5c:	d00a      	beq.n	8002e74 <sbrk_aligned+0x34>
 8002e5e:	1cc4      	adds	r4, r0, #3
 8002e60:	f024 0403 	bic.w	r4, r4, #3
 8002e64:	42a0      	cmp	r0, r4
 8002e66:	d007      	beq.n	8002e78 <sbrk_aligned+0x38>
 8002e68:	1a21      	subs	r1, r4, r0
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f000 fcbe 	bl	80037ec <_sbrk_r>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d101      	bne.n	8002e78 <sbrk_aligned+0x38>
 8002e74:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002e78:	4620      	mov	r0, r4
 8002e7a:	bd70      	pop	{r4, r5, r6, pc}
 8002e7c:	2000025c 	.word	0x2000025c

08002e80 <_malloc_r>:
 8002e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e84:	1ccd      	adds	r5, r1, #3
 8002e86:	f025 0503 	bic.w	r5, r5, #3
 8002e8a:	3508      	adds	r5, #8
 8002e8c:	2d0c      	cmp	r5, #12
 8002e8e:	bf38      	it	cc
 8002e90:	250c      	movcc	r5, #12
 8002e92:	2d00      	cmp	r5, #0
 8002e94:	4607      	mov	r7, r0
 8002e96:	db01      	blt.n	8002e9c <_malloc_r+0x1c>
 8002e98:	42a9      	cmp	r1, r5
 8002e9a:	d905      	bls.n	8002ea8 <_malloc_r+0x28>
 8002e9c:	230c      	movs	r3, #12
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	2600      	movs	r6, #0
 8002ea2:	4630      	mov	r0, r6
 8002ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ea8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002f7c <_malloc_r+0xfc>
 8002eac:	f000 f868 	bl	8002f80 <__malloc_lock>
 8002eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8002eb4:	461c      	mov	r4, r3
 8002eb6:	bb5c      	cbnz	r4, 8002f10 <_malloc_r+0x90>
 8002eb8:	4629      	mov	r1, r5
 8002eba:	4638      	mov	r0, r7
 8002ebc:	f7ff ffc0 	bl	8002e40 <sbrk_aligned>
 8002ec0:	1c43      	adds	r3, r0, #1
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	d155      	bne.n	8002f72 <_malloc_r+0xf2>
 8002ec6:	f8d8 4000 	ldr.w	r4, [r8]
 8002eca:	4626      	mov	r6, r4
 8002ecc:	2e00      	cmp	r6, #0
 8002ece:	d145      	bne.n	8002f5c <_malloc_r+0xdc>
 8002ed0:	2c00      	cmp	r4, #0
 8002ed2:	d048      	beq.n	8002f66 <_malloc_r+0xe6>
 8002ed4:	6823      	ldr	r3, [r4, #0]
 8002ed6:	4631      	mov	r1, r6
 8002ed8:	4638      	mov	r0, r7
 8002eda:	eb04 0903 	add.w	r9, r4, r3
 8002ede:	f000 fc85 	bl	80037ec <_sbrk_r>
 8002ee2:	4581      	cmp	r9, r0
 8002ee4:	d13f      	bne.n	8002f66 <_malloc_r+0xe6>
 8002ee6:	6821      	ldr	r1, [r4, #0]
 8002ee8:	1a6d      	subs	r5, r5, r1
 8002eea:	4629      	mov	r1, r5
 8002eec:	4638      	mov	r0, r7
 8002eee:	f7ff ffa7 	bl	8002e40 <sbrk_aligned>
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	d037      	beq.n	8002f66 <_malloc_r+0xe6>
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	442b      	add	r3, r5
 8002efa:	6023      	str	r3, [r4, #0]
 8002efc:	f8d8 3000 	ldr.w	r3, [r8]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d038      	beq.n	8002f76 <_malloc_r+0xf6>
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	42a2      	cmp	r2, r4
 8002f08:	d12b      	bne.n	8002f62 <_malloc_r+0xe2>
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	e00f      	b.n	8002f30 <_malloc_r+0xb0>
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	1b52      	subs	r2, r2, r5
 8002f14:	d41f      	bmi.n	8002f56 <_malloc_r+0xd6>
 8002f16:	2a0b      	cmp	r2, #11
 8002f18:	d917      	bls.n	8002f4a <_malloc_r+0xca>
 8002f1a:	1961      	adds	r1, r4, r5
 8002f1c:	42a3      	cmp	r3, r4
 8002f1e:	6025      	str	r5, [r4, #0]
 8002f20:	bf18      	it	ne
 8002f22:	6059      	strne	r1, [r3, #4]
 8002f24:	6863      	ldr	r3, [r4, #4]
 8002f26:	bf08      	it	eq
 8002f28:	f8c8 1000 	streq.w	r1, [r8]
 8002f2c:	5162      	str	r2, [r4, r5]
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	4638      	mov	r0, r7
 8002f32:	f104 060b 	add.w	r6, r4, #11
 8002f36:	f000 f829 	bl	8002f8c <__malloc_unlock>
 8002f3a:	f026 0607 	bic.w	r6, r6, #7
 8002f3e:	1d23      	adds	r3, r4, #4
 8002f40:	1af2      	subs	r2, r6, r3
 8002f42:	d0ae      	beq.n	8002ea2 <_malloc_r+0x22>
 8002f44:	1b9b      	subs	r3, r3, r6
 8002f46:	50a3      	str	r3, [r4, r2]
 8002f48:	e7ab      	b.n	8002ea2 <_malloc_r+0x22>
 8002f4a:	42a3      	cmp	r3, r4
 8002f4c:	6862      	ldr	r2, [r4, #4]
 8002f4e:	d1dd      	bne.n	8002f0c <_malloc_r+0x8c>
 8002f50:	f8c8 2000 	str.w	r2, [r8]
 8002f54:	e7ec      	b.n	8002f30 <_malloc_r+0xb0>
 8002f56:	4623      	mov	r3, r4
 8002f58:	6864      	ldr	r4, [r4, #4]
 8002f5a:	e7ac      	b.n	8002eb6 <_malloc_r+0x36>
 8002f5c:	4634      	mov	r4, r6
 8002f5e:	6876      	ldr	r6, [r6, #4]
 8002f60:	e7b4      	b.n	8002ecc <_malloc_r+0x4c>
 8002f62:	4613      	mov	r3, r2
 8002f64:	e7cc      	b.n	8002f00 <_malloc_r+0x80>
 8002f66:	230c      	movs	r3, #12
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f000 f80e 	bl	8002f8c <__malloc_unlock>
 8002f70:	e797      	b.n	8002ea2 <_malloc_r+0x22>
 8002f72:	6025      	str	r5, [r4, #0]
 8002f74:	e7dc      	b.n	8002f30 <_malloc_r+0xb0>
 8002f76:	605b      	str	r3, [r3, #4]
 8002f78:	deff      	udf	#255	; 0xff
 8002f7a:	bf00      	nop
 8002f7c:	20000258 	.word	0x20000258

08002f80 <__malloc_lock>:
 8002f80:	4801      	ldr	r0, [pc, #4]	; (8002f88 <__malloc_lock+0x8>)
 8002f82:	f7ff bee8 	b.w	8002d56 <__retarget_lock_acquire_recursive>
 8002f86:	bf00      	nop
 8002f88:	20000254 	.word	0x20000254

08002f8c <__malloc_unlock>:
 8002f8c:	4801      	ldr	r0, [pc, #4]	; (8002f94 <__malloc_unlock+0x8>)
 8002f8e:	f7ff bee3 	b.w	8002d58 <__retarget_lock_release_recursive>
 8002f92:	bf00      	nop
 8002f94:	20000254 	.word	0x20000254

08002f98 <__sfputc_r>:
 8002f98:	6893      	ldr	r3, [r2, #8]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	b410      	push	{r4}
 8002fa0:	6093      	str	r3, [r2, #8]
 8002fa2:	da08      	bge.n	8002fb6 <__sfputc_r+0x1e>
 8002fa4:	6994      	ldr	r4, [r2, #24]
 8002fa6:	42a3      	cmp	r3, r4
 8002fa8:	db01      	blt.n	8002fae <__sfputc_r+0x16>
 8002faa:	290a      	cmp	r1, #10
 8002fac:	d103      	bne.n	8002fb6 <__sfputc_r+0x1e>
 8002fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fb2:	f000 bb85 	b.w	80036c0 <__swbuf_r>
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	1c58      	adds	r0, r3, #1
 8002fba:	6010      	str	r0, [r2, #0]
 8002fbc:	7019      	strb	r1, [r3, #0]
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <__sfputs_r>:
 8002fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc8:	4606      	mov	r6, r0
 8002fca:	460f      	mov	r7, r1
 8002fcc:	4614      	mov	r4, r2
 8002fce:	18d5      	adds	r5, r2, r3
 8002fd0:	42ac      	cmp	r4, r5
 8002fd2:	d101      	bne.n	8002fd8 <__sfputs_r+0x12>
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	e007      	b.n	8002fe8 <__sfputs_r+0x22>
 8002fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fdc:	463a      	mov	r2, r7
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f7ff ffda 	bl	8002f98 <__sfputc_r>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	d1f3      	bne.n	8002fd0 <__sfputs_r+0xa>
 8002fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002fec <_vfiprintf_r>:
 8002fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ff0:	460d      	mov	r5, r1
 8002ff2:	b09d      	sub	sp, #116	; 0x74
 8002ff4:	4614      	mov	r4, r2
 8002ff6:	4698      	mov	r8, r3
 8002ff8:	4606      	mov	r6, r0
 8002ffa:	b118      	cbz	r0, 8003004 <_vfiprintf_r+0x18>
 8002ffc:	6a03      	ldr	r3, [r0, #32]
 8002ffe:	b90b      	cbnz	r3, 8003004 <_vfiprintf_r+0x18>
 8003000:	f7ff fd78 	bl	8002af4 <__sinit>
 8003004:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003006:	07d9      	lsls	r1, r3, #31
 8003008:	d405      	bmi.n	8003016 <_vfiprintf_r+0x2a>
 800300a:	89ab      	ldrh	r3, [r5, #12]
 800300c:	059a      	lsls	r2, r3, #22
 800300e:	d402      	bmi.n	8003016 <_vfiprintf_r+0x2a>
 8003010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003012:	f7ff fea0 	bl	8002d56 <__retarget_lock_acquire_recursive>
 8003016:	89ab      	ldrh	r3, [r5, #12]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	d501      	bpl.n	8003020 <_vfiprintf_r+0x34>
 800301c:	692b      	ldr	r3, [r5, #16]
 800301e:	b99b      	cbnz	r3, 8003048 <_vfiprintf_r+0x5c>
 8003020:	4629      	mov	r1, r5
 8003022:	4630      	mov	r0, r6
 8003024:	f000 fb8a 	bl	800373c <__swsetup_r>
 8003028:	b170      	cbz	r0, 8003048 <_vfiprintf_r+0x5c>
 800302a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800302c:	07dc      	lsls	r4, r3, #31
 800302e:	d504      	bpl.n	800303a <_vfiprintf_r+0x4e>
 8003030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003034:	b01d      	add	sp, #116	; 0x74
 8003036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800303a:	89ab      	ldrh	r3, [r5, #12]
 800303c:	0598      	lsls	r0, r3, #22
 800303e:	d4f7      	bmi.n	8003030 <_vfiprintf_r+0x44>
 8003040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003042:	f7ff fe89 	bl	8002d58 <__retarget_lock_release_recursive>
 8003046:	e7f3      	b.n	8003030 <_vfiprintf_r+0x44>
 8003048:	2300      	movs	r3, #0
 800304a:	9309      	str	r3, [sp, #36]	; 0x24
 800304c:	2320      	movs	r3, #32
 800304e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003052:	f8cd 800c 	str.w	r8, [sp, #12]
 8003056:	2330      	movs	r3, #48	; 0x30
 8003058:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800320c <_vfiprintf_r+0x220>
 800305c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003060:	f04f 0901 	mov.w	r9, #1
 8003064:	4623      	mov	r3, r4
 8003066:	469a      	mov	sl, r3
 8003068:	f813 2b01 	ldrb.w	r2, [r3], #1
 800306c:	b10a      	cbz	r2, 8003072 <_vfiprintf_r+0x86>
 800306e:	2a25      	cmp	r2, #37	; 0x25
 8003070:	d1f9      	bne.n	8003066 <_vfiprintf_r+0x7a>
 8003072:	ebba 0b04 	subs.w	fp, sl, r4
 8003076:	d00b      	beq.n	8003090 <_vfiprintf_r+0xa4>
 8003078:	465b      	mov	r3, fp
 800307a:	4622      	mov	r2, r4
 800307c:	4629      	mov	r1, r5
 800307e:	4630      	mov	r0, r6
 8003080:	f7ff ffa1 	bl	8002fc6 <__sfputs_r>
 8003084:	3001      	adds	r0, #1
 8003086:	f000 80a9 	beq.w	80031dc <_vfiprintf_r+0x1f0>
 800308a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800308c:	445a      	add	r2, fp
 800308e:	9209      	str	r2, [sp, #36]	; 0x24
 8003090:	f89a 3000 	ldrb.w	r3, [sl]
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 80a1 	beq.w	80031dc <_vfiprintf_r+0x1f0>
 800309a:	2300      	movs	r3, #0
 800309c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80030a4:	f10a 0a01 	add.w	sl, sl, #1
 80030a8:	9304      	str	r3, [sp, #16]
 80030aa:	9307      	str	r3, [sp, #28]
 80030ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80030b0:	931a      	str	r3, [sp, #104]	; 0x68
 80030b2:	4654      	mov	r4, sl
 80030b4:	2205      	movs	r2, #5
 80030b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030ba:	4854      	ldr	r0, [pc, #336]	; (800320c <_vfiprintf_r+0x220>)
 80030bc:	f7fd f8a0 	bl	8000200 <memchr>
 80030c0:	9a04      	ldr	r2, [sp, #16]
 80030c2:	b9d8      	cbnz	r0, 80030fc <_vfiprintf_r+0x110>
 80030c4:	06d1      	lsls	r1, r2, #27
 80030c6:	bf44      	itt	mi
 80030c8:	2320      	movmi	r3, #32
 80030ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030ce:	0713      	lsls	r3, r2, #28
 80030d0:	bf44      	itt	mi
 80030d2:	232b      	movmi	r3, #43	; 0x2b
 80030d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030d8:	f89a 3000 	ldrb.w	r3, [sl]
 80030dc:	2b2a      	cmp	r3, #42	; 0x2a
 80030de:	d015      	beq.n	800310c <_vfiprintf_r+0x120>
 80030e0:	9a07      	ldr	r2, [sp, #28]
 80030e2:	4654      	mov	r4, sl
 80030e4:	2000      	movs	r0, #0
 80030e6:	f04f 0c0a 	mov.w	ip, #10
 80030ea:	4621      	mov	r1, r4
 80030ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030f0:	3b30      	subs	r3, #48	; 0x30
 80030f2:	2b09      	cmp	r3, #9
 80030f4:	d94d      	bls.n	8003192 <_vfiprintf_r+0x1a6>
 80030f6:	b1b0      	cbz	r0, 8003126 <_vfiprintf_r+0x13a>
 80030f8:	9207      	str	r2, [sp, #28]
 80030fa:	e014      	b.n	8003126 <_vfiprintf_r+0x13a>
 80030fc:	eba0 0308 	sub.w	r3, r0, r8
 8003100:	fa09 f303 	lsl.w	r3, r9, r3
 8003104:	4313      	orrs	r3, r2
 8003106:	9304      	str	r3, [sp, #16]
 8003108:	46a2      	mov	sl, r4
 800310a:	e7d2      	b.n	80030b2 <_vfiprintf_r+0xc6>
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	1d19      	adds	r1, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	9103      	str	r1, [sp, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	bfbb      	ittet	lt
 8003118:	425b      	neglt	r3, r3
 800311a:	f042 0202 	orrlt.w	r2, r2, #2
 800311e:	9307      	strge	r3, [sp, #28]
 8003120:	9307      	strlt	r3, [sp, #28]
 8003122:	bfb8      	it	lt
 8003124:	9204      	strlt	r2, [sp, #16]
 8003126:	7823      	ldrb	r3, [r4, #0]
 8003128:	2b2e      	cmp	r3, #46	; 0x2e
 800312a:	d10c      	bne.n	8003146 <_vfiprintf_r+0x15a>
 800312c:	7863      	ldrb	r3, [r4, #1]
 800312e:	2b2a      	cmp	r3, #42	; 0x2a
 8003130:	d134      	bne.n	800319c <_vfiprintf_r+0x1b0>
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	1d1a      	adds	r2, r3, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	9203      	str	r2, [sp, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	bfb8      	it	lt
 800313e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003142:	3402      	adds	r4, #2
 8003144:	9305      	str	r3, [sp, #20]
 8003146:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800321c <_vfiprintf_r+0x230>
 800314a:	7821      	ldrb	r1, [r4, #0]
 800314c:	2203      	movs	r2, #3
 800314e:	4650      	mov	r0, sl
 8003150:	f7fd f856 	bl	8000200 <memchr>
 8003154:	b138      	cbz	r0, 8003166 <_vfiprintf_r+0x17a>
 8003156:	9b04      	ldr	r3, [sp, #16]
 8003158:	eba0 000a 	sub.w	r0, r0, sl
 800315c:	2240      	movs	r2, #64	; 0x40
 800315e:	4082      	lsls	r2, r0
 8003160:	4313      	orrs	r3, r2
 8003162:	3401      	adds	r4, #1
 8003164:	9304      	str	r3, [sp, #16]
 8003166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800316a:	4829      	ldr	r0, [pc, #164]	; (8003210 <_vfiprintf_r+0x224>)
 800316c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003170:	2206      	movs	r2, #6
 8003172:	f7fd f845 	bl	8000200 <memchr>
 8003176:	2800      	cmp	r0, #0
 8003178:	d03f      	beq.n	80031fa <_vfiprintf_r+0x20e>
 800317a:	4b26      	ldr	r3, [pc, #152]	; (8003214 <_vfiprintf_r+0x228>)
 800317c:	bb1b      	cbnz	r3, 80031c6 <_vfiprintf_r+0x1da>
 800317e:	9b03      	ldr	r3, [sp, #12]
 8003180:	3307      	adds	r3, #7
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	3308      	adds	r3, #8
 8003188:	9303      	str	r3, [sp, #12]
 800318a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318c:	443b      	add	r3, r7
 800318e:	9309      	str	r3, [sp, #36]	; 0x24
 8003190:	e768      	b.n	8003064 <_vfiprintf_r+0x78>
 8003192:	fb0c 3202 	mla	r2, ip, r2, r3
 8003196:	460c      	mov	r4, r1
 8003198:	2001      	movs	r0, #1
 800319a:	e7a6      	b.n	80030ea <_vfiprintf_r+0xfe>
 800319c:	2300      	movs	r3, #0
 800319e:	3401      	adds	r4, #1
 80031a0:	9305      	str	r3, [sp, #20]
 80031a2:	4619      	mov	r1, r3
 80031a4:	f04f 0c0a 	mov.w	ip, #10
 80031a8:	4620      	mov	r0, r4
 80031aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80031ae:	3a30      	subs	r2, #48	; 0x30
 80031b0:	2a09      	cmp	r2, #9
 80031b2:	d903      	bls.n	80031bc <_vfiprintf_r+0x1d0>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0c6      	beq.n	8003146 <_vfiprintf_r+0x15a>
 80031b8:	9105      	str	r1, [sp, #20]
 80031ba:	e7c4      	b.n	8003146 <_vfiprintf_r+0x15a>
 80031bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80031c0:	4604      	mov	r4, r0
 80031c2:	2301      	movs	r3, #1
 80031c4:	e7f0      	b.n	80031a8 <_vfiprintf_r+0x1bc>
 80031c6:	ab03      	add	r3, sp, #12
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	462a      	mov	r2, r5
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <_vfiprintf_r+0x22c>)
 80031ce:	a904      	add	r1, sp, #16
 80031d0:	4630      	mov	r0, r6
 80031d2:	f3af 8000 	nop.w
 80031d6:	4607      	mov	r7, r0
 80031d8:	1c78      	adds	r0, r7, #1
 80031da:	d1d6      	bne.n	800318a <_vfiprintf_r+0x19e>
 80031dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80031de:	07d9      	lsls	r1, r3, #31
 80031e0:	d405      	bmi.n	80031ee <_vfiprintf_r+0x202>
 80031e2:	89ab      	ldrh	r3, [r5, #12]
 80031e4:	059a      	lsls	r2, r3, #22
 80031e6:	d402      	bmi.n	80031ee <_vfiprintf_r+0x202>
 80031e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80031ea:	f7ff fdb5 	bl	8002d58 <__retarget_lock_release_recursive>
 80031ee:	89ab      	ldrh	r3, [r5, #12]
 80031f0:	065b      	lsls	r3, r3, #25
 80031f2:	f53f af1d 	bmi.w	8003030 <_vfiprintf_r+0x44>
 80031f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031f8:	e71c      	b.n	8003034 <_vfiprintf_r+0x48>
 80031fa:	ab03      	add	r3, sp, #12
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	462a      	mov	r2, r5
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <_vfiprintf_r+0x22c>)
 8003202:	a904      	add	r1, sp, #16
 8003204:	4630      	mov	r0, r6
 8003206:	f000 f879 	bl	80032fc <_printf_i>
 800320a:	e7e4      	b.n	80031d6 <_vfiprintf_r+0x1ea>
 800320c:	08003bd3 	.word	0x08003bd3
 8003210:	08003bdd 	.word	0x08003bdd
 8003214:	00000000 	.word	0x00000000
 8003218:	08002fc7 	.word	0x08002fc7
 800321c:	08003bd9 	.word	0x08003bd9

08003220 <_printf_common>:
 8003220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003224:	4616      	mov	r6, r2
 8003226:	4699      	mov	r9, r3
 8003228:	688a      	ldr	r2, [r1, #8]
 800322a:	690b      	ldr	r3, [r1, #16]
 800322c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003230:	4293      	cmp	r3, r2
 8003232:	bfb8      	it	lt
 8003234:	4613      	movlt	r3, r2
 8003236:	6033      	str	r3, [r6, #0]
 8003238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800323c:	4607      	mov	r7, r0
 800323e:	460c      	mov	r4, r1
 8003240:	b10a      	cbz	r2, 8003246 <_printf_common+0x26>
 8003242:	3301      	adds	r3, #1
 8003244:	6033      	str	r3, [r6, #0]
 8003246:	6823      	ldr	r3, [r4, #0]
 8003248:	0699      	lsls	r1, r3, #26
 800324a:	bf42      	ittt	mi
 800324c:	6833      	ldrmi	r3, [r6, #0]
 800324e:	3302      	addmi	r3, #2
 8003250:	6033      	strmi	r3, [r6, #0]
 8003252:	6825      	ldr	r5, [r4, #0]
 8003254:	f015 0506 	ands.w	r5, r5, #6
 8003258:	d106      	bne.n	8003268 <_printf_common+0x48>
 800325a:	f104 0a19 	add.w	sl, r4, #25
 800325e:	68e3      	ldr	r3, [r4, #12]
 8003260:	6832      	ldr	r2, [r6, #0]
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	42ab      	cmp	r3, r5
 8003266:	dc26      	bgt.n	80032b6 <_printf_common+0x96>
 8003268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800326c:	1e13      	subs	r3, r2, #0
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	bf18      	it	ne
 8003272:	2301      	movne	r3, #1
 8003274:	0692      	lsls	r2, r2, #26
 8003276:	d42b      	bmi.n	80032d0 <_printf_common+0xb0>
 8003278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800327c:	4649      	mov	r1, r9
 800327e:	4638      	mov	r0, r7
 8003280:	47c0      	blx	r8
 8003282:	3001      	adds	r0, #1
 8003284:	d01e      	beq.n	80032c4 <_printf_common+0xa4>
 8003286:	6823      	ldr	r3, [r4, #0]
 8003288:	6922      	ldr	r2, [r4, #16]
 800328a:	f003 0306 	and.w	r3, r3, #6
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf02      	ittt	eq
 8003292:	68e5      	ldreq	r5, [r4, #12]
 8003294:	6833      	ldreq	r3, [r6, #0]
 8003296:	1aed      	subeq	r5, r5, r3
 8003298:	68a3      	ldr	r3, [r4, #8]
 800329a:	bf0c      	ite	eq
 800329c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032a0:	2500      	movne	r5, #0
 80032a2:	4293      	cmp	r3, r2
 80032a4:	bfc4      	itt	gt
 80032a6:	1a9b      	subgt	r3, r3, r2
 80032a8:	18ed      	addgt	r5, r5, r3
 80032aa:	2600      	movs	r6, #0
 80032ac:	341a      	adds	r4, #26
 80032ae:	42b5      	cmp	r5, r6
 80032b0:	d11a      	bne.n	80032e8 <_printf_common+0xc8>
 80032b2:	2000      	movs	r0, #0
 80032b4:	e008      	b.n	80032c8 <_printf_common+0xa8>
 80032b6:	2301      	movs	r3, #1
 80032b8:	4652      	mov	r2, sl
 80032ba:	4649      	mov	r1, r9
 80032bc:	4638      	mov	r0, r7
 80032be:	47c0      	blx	r8
 80032c0:	3001      	adds	r0, #1
 80032c2:	d103      	bne.n	80032cc <_printf_common+0xac>
 80032c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032cc:	3501      	adds	r5, #1
 80032ce:	e7c6      	b.n	800325e <_printf_common+0x3e>
 80032d0:	18e1      	adds	r1, r4, r3
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	2030      	movs	r0, #48	; 0x30
 80032d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032da:	4422      	add	r2, r4
 80032dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032e4:	3302      	adds	r3, #2
 80032e6:	e7c7      	b.n	8003278 <_printf_common+0x58>
 80032e8:	2301      	movs	r3, #1
 80032ea:	4622      	mov	r2, r4
 80032ec:	4649      	mov	r1, r9
 80032ee:	4638      	mov	r0, r7
 80032f0:	47c0      	blx	r8
 80032f2:	3001      	adds	r0, #1
 80032f4:	d0e6      	beq.n	80032c4 <_printf_common+0xa4>
 80032f6:	3601      	adds	r6, #1
 80032f8:	e7d9      	b.n	80032ae <_printf_common+0x8e>
	...

080032fc <_printf_i>:
 80032fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	7e0f      	ldrb	r7, [r1, #24]
 8003302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003304:	2f78      	cmp	r7, #120	; 0x78
 8003306:	4691      	mov	r9, r2
 8003308:	4680      	mov	r8, r0
 800330a:	460c      	mov	r4, r1
 800330c:	469a      	mov	sl, r3
 800330e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003312:	d807      	bhi.n	8003324 <_printf_i+0x28>
 8003314:	2f62      	cmp	r7, #98	; 0x62
 8003316:	d80a      	bhi.n	800332e <_printf_i+0x32>
 8003318:	2f00      	cmp	r7, #0
 800331a:	f000 80d4 	beq.w	80034c6 <_printf_i+0x1ca>
 800331e:	2f58      	cmp	r7, #88	; 0x58
 8003320:	f000 80c0 	beq.w	80034a4 <_printf_i+0x1a8>
 8003324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800332c:	e03a      	b.n	80033a4 <_printf_i+0xa8>
 800332e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003332:	2b15      	cmp	r3, #21
 8003334:	d8f6      	bhi.n	8003324 <_printf_i+0x28>
 8003336:	a101      	add	r1, pc, #4	; (adr r1, 800333c <_printf_i+0x40>)
 8003338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800333c:	08003395 	.word	0x08003395
 8003340:	080033a9 	.word	0x080033a9
 8003344:	08003325 	.word	0x08003325
 8003348:	08003325 	.word	0x08003325
 800334c:	08003325 	.word	0x08003325
 8003350:	08003325 	.word	0x08003325
 8003354:	080033a9 	.word	0x080033a9
 8003358:	08003325 	.word	0x08003325
 800335c:	08003325 	.word	0x08003325
 8003360:	08003325 	.word	0x08003325
 8003364:	08003325 	.word	0x08003325
 8003368:	080034ad 	.word	0x080034ad
 800336c:	080033d5 	.word	0x080033d5
 8003370:	08003467 	.word	0x08003467
 8003374:	08003325 	.word	0x08003325
 8003378:	08003325 	.word	0x08003325
 800337c:	080034cf 	.word	0x080034cf
 8003380:	08003325 	.word	0x08003325
 8003384:	080033d5 	.word	0x080033d5
 8003388:	08003325 	.word	0x08003325
 800338c:	08003325 	.word	0x08003325
 8003390:	0800346f 	.word	0x0800346f
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	1d1a      	adds	r2, r3, #4
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	602a      	str	r2, [r5, #0]
 800339c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80033a4:	2301      	movs	r3, #1
 80033a6:	e09f      	b.n	80034e8 <_printf_i+0x1ec>
 80033a8:	6820      	ldr	r0, [r4, #0]
 80033aa:	682b      	ldr	r3, [r5, #0]
 80033ac:	0607      	lsls	r7, r0, #24
 80033ae:	f103 0104 	add.w	r1, r3, #4
 80033b2:	6029      	str	r1, [r5, #0]
 80033b4:	d501      	bpl.n	80033ba <_printf_i+0xbe>
 80033b6:	681e      	ldr	r6, [r3, #0]
 80033b8:	e003      	b.n	80033c2 <_printf_i+0xc6>
 80033ba:	0646      	lsls	r6, r0, #25
 80033bc:	d5fb      	bpl.n	80033b6 <_printf_i+0xba>
 80033be:	f9b3 6000 	ldrsh.w	r6, [r3]
 80033c2:	2e00      	cmp	r6, #0
 80033c4:	da03      	bge.n	80033ce <_printf_i+0xd2>
 80033c6:	232d      	movs	r3, #45	; 0x2d
 80033c8:	4276      	negs	r6, r6
 80033ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ce:	485a      	ldr	r0, [pc, #360]	; (8003538 <_printf_i+0x23c>)
 80033d0:	230a      	movs	r3, #10
 80033d2:	e012      	b.n	80033fa <_printf_i+0xfe>
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6820      	ldr	r0, [r4, #0]
 80033d8:	1d19      	adds	r1, r3, #4
 80033da:	6029      	str	r1, [r5, #0]
 80033dc:	0605      	lsls	r5, r0, #24
 80033de:	d501      	bpl.n	80033e4 <_printf_i+0xe8>
 80033e0:	681e      	ldr	r6, [r3, #0]
 80033e2:	e002      	b.n	80033ea <_printf_i+0xee>
 80033e4:	0641      	lsls	r1, r0, #25
 80033e6:	d5fb      	bpl.n	80033e0 <_printf_i+0xe4>
 80033e8:	881e      	ldrh	r6, [r3, #0]
 80033ea:	4853      	ldr	r0, [pc, #332]	; (8003538 <_printf_i+0x23c>)
 80033ec:	2f6f      	cmp	r7, #111	; 0x6f
 80033ee:	bf0c      	ite	eq
 80033f0:	2308      	moveq	r3, #8
 80033f2:	230a      	movne	r3, #10
 80033f4:	2100      	movs	r1, #0
 80033f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033fa:	6865      	ldr	r5, [r4, #4]
 80033fc:	60a5      	str	r5, [r4, #8]
 80033fe:	2d00      	cmp	r5, #0
 8003400:	bfa2      	ittt	ge
 8003402:	6821      	ldrge	r1, [r4, #0]
 8003404:	f021 0104 	bicge.w	r1, r1, #4
 8003408:	6021      	strge	r1, [r4, #0]
 800340a:	b90e      	cbnz	r6, 8003410 <_printf_i+0x114>
 800340c:	2d00      	cmp	r5, #0
 800340e:	d04b      	beq.n	80034a8 <_printf_i+0x1ac>
 8003410:	4615      	mov	r5, r2
 8003412:	fbb6 f1f3 	udiv	r1, r6, r3
 8003416:	fb03 6711 	mls	r7, r3, r1, r6
 800341a:	5dc7      	ldrb	r7, [r0, r7]
 800341c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003420:	4637      	mov	r7, r6
 8003422:	42bb      	cmp	r3, r7
 8003424:	460e      	mov	r6, r1
 8003426:	d9f4      	bls.n	8003412 <_printf_i+0x116>
 8003428:	2b08      	cmp	r3, #8
 800342a:	d10b      	bne.n	8003444 <_printf_i+0x148>
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	07de      	lsls	r6, r3, #31
 8003430:	d508      	bpl.n	8003444 <_printf_i+0x148>
 8003432:	6923      	ldr	r3, [r4, #16]
 8003434:	6861      	ldr	r1, [r4, #4]
 8003436:	4299      	cmp	r1, r3
 8003438:	bfde      	ittt	le
 800343a:	2330      	movle	r3, #48	; 0x30
 800343c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003440:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003444:	1b52      	subs	r2, r2, r5
 8003446:	6122      	str	r2, [r4, #16]
 8003448:	f8cd a000 	str.w	sl, [sp]
 800344c:	464b      	mov	r3, r9
 800344e:	aa03      	add	r2, sp, #12
 8003450:	4621      	mov	r1, r4
 8003452:	4640      	mov	r0, r8
 8003454:	f7ff fee4 	bl	8003220 <_printf_common>
 8003458:	3001      	adds	r0, #1
 800345a:	d14a      	bne.n	80034f2 <_printf_i+0x1f6>
 800345c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003460:	b004      	add	sp, #16
 8003462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	f043 0320 	orr.w	r3, r3, #32
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	4833      	ldr	r0, [pc, #204]	; (800353c <_printf_i+0x240>)
 8003470:	2778      	movs	r7, #120	; 0x78
 8003472:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	6829      	ldr	r1, [r5, #0]
 800347a:	061f      	lsls	r7, r3, #24
 800347c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003480:	d402      	bmi.n	8003488 <_printf_i+0x18c>
 8003482:	065f      	lsls	r7, r3, #25
 8003484:	bf48      	it	mi
 8003486:	b2b6      	uxthmi	r6, r6
 8003488:	07df      	lsls	r7, r3, #31
 800348a:	bf48      	it	mi
 800348c:	f043 0320 	orrmi.w	r3, r3, #32
 8003490:	6029      	str	r1, [r5, #0]
 8003492:	bf48      	it	mi
 8003494:	6023      	strmi	r3, [r4, #0]
 8003496:	b91e      	cbnz	r6, 80034a0 <_printf_i+0x1a4>
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	f023 0320 	bic.w	r3, r3, #32
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	2310      	movs	r3, #16
 80034a2:	e7a7      	b.n	80033f4 <_printf_i+0xf8>
 80034a4:	4824      	ldr	r0, [pc, #144]	; (8003538 <_printf_i+0x23c>)
 80034a6:	e7e4      	b.n	8003472 <_printf_i+0x176>
 80034a8:	4615      	mov	r5, r2
 80034aa:	e7bd      	b.n	8003428 <_printf_i+0x12c>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	6826      	ldr	r6, [r4, #0]
 80034b0:	6961      	ldr	r1, [r4, #20]
 80034b2:	1d18      	adds	r0, r3, #4
 80034b4:	6028      	str	r0, [r5, #0]
 80034b6:	0635      	lsls	r5, r6, #24
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	d501      	bpl.n	80034c0 <_printf_i+0x1c4>
 80034bc:	6019      	str	r1, [r3, #0]
 80034be:	e002      	b.n	80034c6 <_printf_i+0x1ca>
 80034c0:	0670      	lsls	r0, r6, #25
 80034c2:	d5fb      	bpl.n	80034bc <_printf_i+0x1c0>
 80034c4:	8019      	strh	r1, [r3, #0]
 80034c6:	2300      	movs	r3, #0
 80034c8:	6123      	str	r3, [r4, #16]
 80034ca:	4615      	mov	r5, r2
 80034cc:	e7bc      	b.n	8003448 <_printf_i+0x14c>
 80034ce:	682b      	ldr	r3, [r5, #0]
 80034d0:	1d1a      	adds	r2, r3, #4
 80034d2:	602a      	str	r2, [r5, #0]
 80034d4:	681d      	ldr	r5, [r3, #0]
 80034d6:	6862      	ldr	r2, [r4, #4]
 80034d8:	2100      	movs	r1, #0
 80034da:	4628      	mov	r0, r5
 80034dc:	f7fc fe90 	bl	8000200 <memchr>
 80034e0:	b108      	cbz	r0, 80034e6 <_printf_i+0x1ea>
 80034e2:	1b40      	subs	r0, r0, r5
 80034e4:	6060      	str	r0, [r4, #4]
 80034e6:	6863      	ldr	r3, [r4, #4]
 80034e8:	6123      	str	r3, [r4, #16]
 80034ea:	2300      	movs	r3, #0
 80034ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034f0:	e7aa      	b.n	8003448 <_printf_i+0x14c>
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	462a      	mov	r2, r5
 80034f6:	4649      	mov	r1, r9
 80034f8:	4640      	mov	r0, r8
 80034fa:	47d0      	blx	sl
 80034fc:	3001      	adds	r0, #1
 80034fe:	d0ad      	beq.n	800345c <_printf_i+0x160>
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	079b      	lsls	r3, r3, #30
 8003504:	d413      	bmi.n	800352e <_printf_i+0x232>
 8003506:	68e0      	ldr	r0, [r4, #12]
 8003508:	9b03      	ldr	r3, [sp, #12]
 800350a:	4298      	cmp	r0, r3
 800350c:	bfb8      	it	lt
 800350e:	4618      	movlt	r0, r3
 8003510:	e7a6      	b.n	8003460 <_printf_i+0x164>
 8003512:	2301      	movs	r3, #1
 8003514:	4632      	mov	r2, r6
 8003516:	4649      	mov	r1, r9
 8003518:	4640      	mov	r0, r8
 800351a:	47d0      	blx	sl
 800351c:	3001      	adds	r0, #1
 800351e:	d09d      	beq.n	800345c <_printf_i+0x160>
 8003520:	3501      	adds	r5, #1
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	9903      	ldr	r1, [sp, #12]
 8003526:	1a5b      	subs	r3, r3, r1
 8003528:	42ab      	cmp	r3, r5
 800352a:	dcf2      	bgt.n	8003512 <_printf_i+0x216>
 800352c:	e7eb      	b.n	8003506 <_printf_i+0x20a>
 800352e:	2500      	movs	r5, #0
 8003530:	f104 0619 	add.w	r6, r4, #25
 8003534:	e7f5      	b.n	8003522 <_printf_i+0x226>
 8003536:	bf00      	nop
 8003538:	08003be4 	.word	0x08003be4
 800353c:	08003bf5 	.word	0x08003bf5

08003540 <__sflush_r>:
 8003540:	898a      	ldrh	r2, [r1, #12]
 8003542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003546:	4605      	mov	r5, r0
 8003548:	0710      	lsls	r0, r2, #28
 800354a:	460c      	mov	r4, r1
 800354c:	d458      	bmi.n	8003600 <__sflush_r+0xc0>
 800354e:	684b      	ldr	r3, [r1, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	dc05      	bgt.n	8003560 <__sflush_r+0x20>
 8003554:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	dc02      	bgt.n	8003560 <__sflush_r+0x20>
 800355a:	2000      	movs	r0, #0
 800355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003560:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003562:	2e00      	cmp	r6, #0
 8003564:	d0f9      	beq.n	800355a <__sflush_r+0x1a>
 8003566:	2300      	movs	r3, #0
 8003568:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800356c:	682f      	ldr	r7, [r5, #0]
 800356e:	6a21      	ldr	r1, [r4, #32]
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	d032      	beq.n	80035da <__sflush_r+0x9a>
 8003574:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003576:	89a3      	ldrh	r3, [r4, #12]
 8003578:	075a      	lsls	r2, r3, #29
 800357a:	d505      	bpl.n	8003588 <__sflush_r+0x48>
 800357c:	6863      	ldr	r3, [r4, #4]
 800357e:	1ac0      	subs	r0, r0, r3
 8003580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003582:	b10b      	cbz	r3, 8003588 <__sflush_r+0x48>
 8003584:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003586:	1ac0      	subs	r0, r0, r3
 8003588:	2300      	movs	r3, #0
 800358a:	4602      	mov	r2, r0
 800358c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800358e:	6a21      	ldr	r1, [r4, #32]
 8003590:	4628      	mov	r0, r5
 8003592:	47b0      	blx	r6
 8003594:	1c43      	adds	r3, r0, #1
 8003596:	89a3      	ldrh	r3, [r4, #12]
 8003598:	d106      	bne.n	80035a8 <__sflush_r+0x68>
 800359a:	6829      	ldr	r1, [r5, #0]
 800359c:	291d      	cmp	r1, #29
 800359e:	d82b      	bhi.n	80035f8 <__sflush_r+0xb8>
 80035a0:	4a29      	ldr	r2, [pc, #164]	; (8003648 <__sflush_r+0x108>)
 80035a2:	410a      	asrs	r2, r1
 80035a4:	07d6      	lsls	r6, r2, #31
 80035a6:	d427      	bmi.n	80035f8 <__sflush_r+0xb8>
 80035a8:	2200      	movs	r2, #0
 80035aa:	6062      	str	r2, [r4, #4]
 80035ac:	04d9      	lsls	r1, r3, #19
 80035ae:	6922      	ldr	r2, [r4, #16]
 80035b0:	6022      	str	r2, [r4, #0]
 80035b2:	d504      	bpl.n	80035be <__sflush_r+0x7e>
 80035b4:	1c42      	adds	r2, r0, #1
 80035b6:	d101      	bne.n	80035bc <__sflush_r+0x7c>
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	b903      	cbnz	r3, 80035be <__sflush_r+0x7e>
 80035bc:	6560      	str	r0, [r4, #84]	; 0x54
 80035be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80035c0:	602f      	str	r7, [r5, #0]
 80035c2:	2900      	cmp	r1, #0
 80035c4:	d0c9      	beq.n	800355a <__sflush_r+0x1a>
 80035c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80035ca:	4299      	cmp	r1, r3
 80035cc:	d002      	beq.n	80035d4 <__sflush_r+0x94>
 80035ce:	4628      	mov	r0, r5
 80035d0:	f7ff fbe2 	bl	8002d98 <_free_r>
 80035d4:	2000      	movs	r0, #0
 80035d6:	6360      	str	r0, [r4, #52]	; 0x34
 80035d8:	e7c0      	b.n	800355c <__sflush_r+0x1c>
 80035da:	2301      	movs	r3, #1
 80035dc:	4628      	mov	r0, r5
 80035de:	47b0      	blx	r6
 80035e0:	1c41      	adds	r1, r0, #1
 80035e2:	d1c8      	bne.n	8003576 <__sflush_r+0x36>
 80035e4:	682b      	ldr	r3, [r5, #0]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0c5      	beq.n	8003576 <__sflush_r+0x36>
 80035ea:	2b1d      	cmp	r3, #29
 80035ec:	d001      	beq.n	80035f2 <__sflush_r+0xb2>
 80035ee:	2b16      	cmp	r3, #22
 80035f0:	d101      	bne.n	80035f6 <__sflush_r+0xb6>
 80035f2:	602f      	str	r7, [r5, #0]
 80035f4:	e7b1      	b.n	800355a <__sflush_r+0x1a>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035fc:	81a3      	strh	r3, [r4, #12]
 80035fe:	e7ad      	b.n	800355c <__sflush_r+0x1c>
 8003600:	690f      	ldr	r7, [r1, #16]
 8003602:	2f00      	cmp	r7, #0
 8003604:	d0a9      	beq.n	800355a <__sflush_r+0x1a>
 8003606:	0793      	lsls	r3, r2, #30
 8003608:	680e      	ldr	r6, [r1, #0]
 800360a:	bf08      	it	eq
 800360c:	694b      	ldreq	r3, [r1, #20]
 800360e:	600f      	str	r7, [r1, #0]
 8003610:	bf18      	it	ne
 8003612:	2300      	movne	r3, #0
 8003614:	eba6 0807 	sub.w	r8, r6, r7
 8003618:	608b      	str	r3, [r1, #8]
 800361a:	f1b8 0f00 	cmp.w	r8, #0
 800361e:	dd9c      	ble.n	800355a <__sflush_r+0x1a>
 8003620:	6a21      	ldr	r1, [r4, #32]
 8003622:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003624:	4643      	mov	r3, r8
 8003626:	463a      	mov	r2, r7
 8003628:	4628      	mov	r0, r5
 800362a:	47b0      	blx	r6
 800362c:	2800      	cmp	r0, #0
 800362e:	dc06      	bgt.n	800363e <__sflush_r+0xfe>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003636:	81a3      	strh	r3, [r4, #12]
 8003638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800363c:	e78e      	b.n	800355c <__sflush_r+0x1c>
 800363e:	4407      	add	r7, r0
 8003640:	eba8 0800 	sub.w	r8, r8, r0
 8003644:	e7e9      	b.n	800361a <__sflush_r+0xda>
 8003646:	bf00      	nop
 8003648:	dfbffffe 	.word	0xdfbffffe

0800364c <_fflush_r>:
 800364c:	b538      	push	{r3, r4, r5, lr}
 800364e:	690b      	ldr	r3, [r1, #16]
 8003650:	4605      	mov	r5, r0
 8003652:	460c      	mov	r4, r1
 8003654:	b913      	cbnz	r3, 800365c <_fflush_r+0x10>
 8003656:	2500      	movs	r5, #0
 8003658:	4628      	mov	r0, r5
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	b118      	cbz	r0, 8003666 <_fflush_r+0x1a>
 800365e:	6a03      	ldr	r3, [r0, #32]
 8003660:	b90b      	cbnz	r3, 8003666 <_fflush_r+0x1a>
 8003662:	f7ff fa47 	bl	8002af4 <__sinit>
 8003666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f3      	beq.n	8003656 <_fflush_r+0xa>
 800366e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003670:	07d0      	lsls	r0, r2, #31
 8003672:	d404      	bmi.n	800367e <_fflush_r+0x32>
 8003674:	0599      	lsls	r1, r3, #22
 8003676:	d402      	bmi.n	800367e <_fflush_r+0x32>
 8003678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800367a:	f7ff fb6c 	bl	8002d56 <__retarget_lock_acquire_recursive>
 800367e:	4628      	mov	r0, r5
 8003680:	4621      	mov	r1, r4
 8003682:	f7ff ff5d 	bl	8003540 <__sflush_r>
 8003686:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003688:	07da      	lsls	r2, r3, #31
 800368a:	4605      	mov	r5, r0
 800368c:	d4e4      	bmi.n	8003658 <_fflush_r+0xc>
 800368e:	89a3      	ldrh	r3, [r4, #12]
 8003690:	059b      	lsls	r3, r3, #22
 8003692:	d4e1      	bmi.n	8003658 <_fflush_r+0xc>
 8003694:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003696:	f7ff fb5f 	bl	8002d58 <__retarget_lock_release_recursive>
 800369a:	e7dd      	b.n	8003658 <_fflush_r+0xc>

0800369c <fiprintf>:
 800369c:	b40e      	push	{r1, r2, r3}
 800369e:	b503      	push	{r0, r1, lr}
 80036a0:	4601      	mov	r1, r0
 80036a2:	ab03      	add	r3, sp, #12
 80036a4:	4805      	ldr	r0, [pc, #20]	; (80036bc <fiprintf+0x20>)
 80036a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036aa:	6800      	ldr	r0, [r0, #0]
 80036ac:	9301      	str	r3, [sp, #4]
 80036ae:	f7ff fc9d 	bl	8002fec <_vfiprintf_r>
 80036b2:	b002      	add	sp, #8
 80036b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80036b8:	b003      	add	sp, #12
 80036ba:	4770      	bx	lr
 80036bc:	2000007c 	.word	0x2000007c

080036c0 <__swbuf_r>:
 80036c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c2:	460e      	mov	r6, r1
 80036c4:	4614      	mov	r4, r2
 80036c6:	4605      	mov	r5, r0
 80036c8:	b118      	cbz	r0, 80036d2 <__swbuf_r+0x12>
 80036ca:	6a03      	ldr	r3, [r0, #32]
 80036cc:	b90b      	cbnz	r3, 80036d2 <__swbuf_r+0x12>
 80036ce:	f7ff fa11 	bl	8002af4 <__sinit>
 80036d2:	69a3      	ldr	r3, [r4, #24]
 80036d4:	60a3      	str	r3, [r4, #8]
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	071a      	lsls	r2, r3, #28
 80036da:	d525      	bpl.n	8003728 <__swbuf_r+0x68>
 80036dc:	6923      	ldr	r3, [r4, #16]
 80036de:	b31b      	cbz	r3, 8003728 <__swbuf_r+0x68>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	6922      	ldr	r2, [r4, #16]
 80036e4:	1a98      	subs	r0, r3, r2
 80036e6:	6963      	ldr	r3, [r4, #20]
 80036e8:	b2f6      	uxtb	r6, r6
 80036ea:	4283      	cmp	r3, r0
 80036ec:	4637      	mov	r7, r6
 80036ee:	dc04      	bgt.n	80036fa <__swbuf_r+0x3a>
 80036f0:	4621      	mov	r1, r4
 80036f2:	4628      	mov	r0, r5
 80036f4:	f7ff ffaa 	bl	800364c <_fflush_r>
 80036f8:	b9e0      	cbnz	r0, 8003734 <__swbuf_r+0x74>
 80036fa:	68a3      	ldr	r3, [r4, #8]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	60a3      	str	r3, [r4, #8]
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	6022      	str	r2, [r4, #0]
 8003706:	701e      	strb	r6, [r3, #0]
 8003708:	6962      	ldr	r2, [r4, #20]
 800370a:	1c43      	adds	r3, r0, #1
 800370c:	429a      	cmp	r2, r3
 800370e:	d004      	beq.n	800371a <__swbuf_r+0x5a>
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	07db      	lsls	r3, r3, #31
 8003714:	d506      	bpl.n	8003724 <__swbuf_r+0x64>
 8003716:	2e0a      	cmp	r6, #10
 8003718:	d104      	bne.n	8003724 <__swbuf_r+0x64>
 800371a:	4621      	mov	r1, r4
 800371c:	4628      	mov	r0, r5
 800371e:	f7ff ff95 	bl	800364c <_fflush_r>
 8003722:	b938      	cbnz	r0, 8003734 <__swbuf_r+0x74>
 8003724:	4638      	mov	r0, r7
 8003726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003728:	4621      	mov	r1, r4
 800372a:	4628      	mov	r0, r5
 800372c:	f000 f806 	bl	800373c <__swsetup_r>
 8003730:	2800      	cmp	r0, #0
 8003732:	d0d5      	beq.n	80036e0 <__swbuf_r+0x20>
 8003734:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003738:	e7f4      	b.n	8003724 <__swbuf_r+0x64>
	...

0800373c <__swsetup_r>:
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <__swsetup_r+0xac>)
 8003740:	4605      	mov	r5, r0
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	460c      	mov	r4, r1
 8003746:	b118      	cbz	r0, 8003750 <__swsetup_r+0x14>
 8003748:	6a03      	ldr	r3, [r0, #32]
 800374a:	b90b      	cbnz	r3, 8003750 <__swsetup_r+0x14>
 800374c:	f7ff f9d2 	bl	8002af4 <__sinit>
 8003750:	89a3      	ldrh	r3, [r4, #12]
 8003752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003756:	0718      	lsls	r0, r3, #28
 8003758:	d422      	bmi.n	80037a0 <__swsetup_r+0x64>
 800375a:	06d9      	lsls	r1, r3, #27
 800375c:	d407      	bmi.n	800376e <__swsetup_r+0x32>
 800375e:	2309      	movs	r3, #9
 8003760:	602b      	str	r3, [r5, #0]
 8003762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003766:	81a3      	strh	r3, [r4, #12]
 8003768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800376c:	e034      	b.n	80037d8 <__swsetup_r+0x9c>
 800376e:	0758      	lsls	r0, r3, #29
 8003770:	d512      	bpl.n	8003798 <__swsetup_r+0x5c>
 8003772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003774:	b141      	cbz	r1, 8003788 <__swsetup_r+0x4c>
 8003776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800377a:	4299      	cmp	r1, r3
 800377c:	d002      	beq.n	8003784 <__swsetup_r+0x48>
 800377e:	4628      	mov	r0, r5
 8003780:	f7ff fb0a 	bl	8002d98 <_free_r>
 8003784:	2300      	movs	r3, #0
 8003786:	6363      	str	r3, [r4, #52]	; 0x34
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	2300      	movs	r3, #0
 8003792:	6063      	str	r3, [r4, #4]
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	89a3      	ldrh	r3, [r4, #12]
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	81a3      	strh	r3, [r4, #12]
 80037a0:	6923      	ldr	r3, [r4, #16]
 80037a2:	b94b      	cbnz	r3, 80037b8 <__swsetup_r+0x7c>
 80037a4:	89a3      	ldrh	r3, [r4, #12]
 80037a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80037aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037ae:	d003      	beq.n	80037b8 <__swsetup_r+0x7c>
 80037b0:	4621      	mov	r1, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	f000 f857 	bl	8003866 <__smakebuf_r>
 80037b8:	89a0      	ldrh	r0, [r4, #12]
 80037ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80037be:	f010 0301 	ands.w	r3, r0, #1
 80037c2:	d00a      	beq.n	80037da <__swsetup_r+0x9e>
 80037c4:	2300      	movs	r3, #0
 80037c6:	60a3      	str	r3, [r4, #8]
 80037c8:	6963      	ldr	r3, [r4, #20]
 80037ca:	425b      	negs	r3, r3
 80037cc:	61a3      	str	r3, [r4, #24]
 80037ce:	6923      	ldr	r3, [r4, #16]
 80037d0:	b943      	cbnz	r3, 80037e4 <__swsetup_r+0xa8>
 80037d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80037d6:	d1c4      	bne.n	8003762 <__swsetup_r+0x26>
 80037d8:	bd38      	pop	{r3, r4, r5, pc}
 80037da:	0781      	lsls	r1, r0, #30
 80037dc:	bf58      	it	pl
 80037de:	6963      	ldrpl	r3, [r4, #20]
 80037e0:	60a3      	str	r3, [r4, #8]
 80037e2:	e7f4      	b.n	80037ce <__swsetup_r+0x92>
 80037e4:	2000      	movs	r0, #0
 80037e6:	e7f7      	b.n	80037d8 <__swsetup_r+0x9c>
 80037e8:	2000007c 	.word	0x2000007c

080037ec <_sbrk_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4d06      	ldr	r5, [pc, #24]	; (8003808 <_sbrk_r+0x1c>)
 80037f0:	2300      	movs	r3, #0
 80037f2:	4604      	mov	r4, r0
 80037f4:	4608      	mov	r0, r1
 80037f6:	602b      	str	r3, [r5, #0]
 80037f8:	f7fd fa6e 	bl	8000cd8 <_sbrk>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d102      	bne.n	8003806 <_sbrk_r+0x1a>
 8003800:	682b      	ldr	r3, [r5, #0]
 8003802:	b103      	cbz	r3, 8003806 <_sbrk_r+0x1a>
 8003804:	6023      	str	r3, [r4, #0]
 8003806:	bd38      	pop	{r3, r4, r5, pc}
 8003808:	20000250 	.word	0x20000250

0800380c <abort>:
 800380c:	b508      	push	{r3, lr}
 800380e:	2006      	movs	r0, #6
 8003810:	f000 f88e 	bl	8003930 <raise>
 8003814:	2001      	movs	r0, #1
 8003816:	f7fd f9e7 	bl	8000be8 <_exit>

0800381a <__swhatbuf_r>:
 800381a:	b570      	push	{r4, r5, r6, lr}
 800381c:	460c      	mov	r4, r1
 800381e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003822:	2900      	cmp	r1, #0
 8003824:	b096      	sub	sp, #88	; 0x58
 8003826:	4615      	mov	r5, r2
 8003828:	461e      	mov	r6, r3
 800382a:	da0d      	bge.n	8003848 <__swhatbuf_r+0x2e>
 800382c:	89a3      	ldrh	r3, [r4, #12]
 800382e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	bf0c      	ite	eq
 8003838:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800383c:	2340      	movne	r3, #64	; 0x40
 800383e:	2000      	movs	r0, #0
 8003840:	6031      	str	r1, [r6, #0]
 8003842:	602b      	str	r3, [r5, #0]
 8003844:	b016      	add	sp, #88	; 0x58
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	466a      	mov	r2, sp
 800384a:	f000 f879 	bl	8003940 <_fstat_r>
 800384e:	2800      	cmp	r0, #0
 8003850:	dbec      	blt.n	800382c <__swhatbuf_r+0x12>
 8003852:	9901      	ldr	r1, [sp, #4]
 8003854:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003858:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800385c:	4259      	negs	r1, r3
 800385e:	4159      	adcs	r1, r3
 8003860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003864:	e7eb      	b.n	800383e <__swhatbuf_r+0x24>

08003866 <__smakebuf_r>:
 8003866:	898b      	ldrh	r3, [r1, #12]
 8003868:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800386a:	079d      	lsls	r5, r3, #30
 800386c:	4606      	mov	r6, r0
 800386e:	460c      	mov	r4, r1
 8003870:	d507      	bpl.n	8003882 <__smakebuf_r+0x1c>
 8003872:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	2301      	movs	r3, #1
 800387c:	6163      	str	r3, [r4, #20]
 800387e:	b002      	add	sp, #8
 8003880:	bd70      	pop	{r4, r5, r6, pc}
 8003882:	ab01      	add	r3, sp, #4
 8003884:	466a      	mov	r2, sp
 8003886:	f7ff ffc8 	bl	800381a <__swhatbuf_r>
 800388a:	9900      	ldr	r1, [sp, #0]
 800388c:	4605      	mov	r5, r0
 800388e:	4630      	mov	r0, r6
 8003890:	f7ff faf6 	bl	8002e80 <_malloc_r>
 8003894:	b948      	cbnz	r0, 80038aa <__smakebuf_r+0x44>
 8003896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800389a:	059a      	lsls	r2, r3, #22
 800389c:	d4ef      	bmi.n	800387e <__smakebuf_r+0x18>
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	f043 0302 	orr.w	r3, r3, #2
 80038a6:	81a3      	strh	r3, [r4, #12]
 80038a8:	e7e3      	b.n	8003872 <__smakebuf_r+0xc>
 80038aa:	89a3      	ldrh	r3, [r4, #12]
 80038ac:	6020      	str	r0, [r4, #0]
 80038ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	9b00      	ldr	r3, [sp, #0]
 80038b6:	6163      	str	r3, [r4, #20]
 80038b8:	9b01      	ldr	r3, [sp, #4]
 80038ba:	6120      	str	r0, [r4, #16]
 80038bc:	b15b      	cbz	r3, 80038d6 <__smakebuf_r+0x70>
 80038be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038c2:	4630      	mov	r0, r6
 80038c4:	f000 f84e 	bl	8003964 <_isatty_r>
 80038c8:	b128      	cbz	r0, 80038d6 <__smakebuf_r+0x70>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f023 0303 	bic.w	r3, r3, #3
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	81a3      	strh	r3, [r4, #12]
 80038d6:	89a3      	ldrh	r3, [r4, #12]
 80038d8:	431d      	orrs	r5, r3
 80038da:	81a5      	strh	r5, [r4, #12]
 80038dc:	e7cf      	b.n	800387e <__smakebuf_r+0x18>

080038de <_raise_r>:
 80038de:	291f      	cmp	r1, #31
 80038e0:	b538      	push	{r3, r4, r5, lr}
 80038e2:	4604      	mov	r4, r0
 80038e4:	460d      	mov	r5, r1
 80038e6:	d904      	bls.n	80038f2 <_raise_r+0x14>
 80038e8:	2316      	movs	r3, #22
 80038ea:	6003      	str	r3, [r0, #0]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038f0:	bd38      	pop	{r3, r4, r5, pc}
 80038f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80038f4:	b112      	cbz	r2, 80038fc <_raise_r+0x1e>
 80038f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80038fa:	b94b      	cbnz	r3, 8003910 <_raise_r+0x32>
 80038fc:	4620      	mov	r0, r4
 80038fe:	f000 f853 	bl	80039a8 <_getpid_r>
 8003902:	462a      	mov	r2, r5
 8003904:	4601      	mov	r1, r0
 8003906:	4620      	mov	r0, r4
 8003908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800390c:	f000 b83a 	b.w	8003984 <_kill_r>
 8003910:	2b01      	cmp	r3, #1
 8003912:	d00a      	beq.n	800392a <_raise_r+0x4c>
 8003914:	1c59      	adds	r1, r3, #1
 8003916:	d103      	bne.n	8003920 <_raise_r+0x42>
 8003918:	2316      	movs	r3, #22
 800391a:	6003      	str	r3, [r0, #0]
 800391c:	2001      	movs	r0, #1
 800391e:	e7e7      	b.n	80038f0 <_raise_r+0x12>
 8003920:	2400      	movs	r4, #0
 8003922:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003926:	4628      	mov	r0, r5
 8003928:	4798      	blx	r3
 800392a:	2000      	movs	r0, #0
 800392c:	e7e0      	b.n	80038f0 <_raise_r+0x12>
	...

08003930 <raise>:
 8003930:	4b02      	ldr	r3, [pc, #8]	; (800393c <raise+0xc>)
 8003932:	4601      	mov	r1, r0
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	f7ff bfd2 	b.w	80038de <_raise_r>
 800393a:	bf00      	nop
 800393c:	2000007c 	.word	0x2000007c

08003940 <_fstat_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d07      	ldr	r5, [pc, #28]	; (8003960 <_fstat_r+0x20>)
 8003944:	2300      	movs	r3, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	602b      	str	r3, [r5, #0]
 800394e:	f7fd f99a 	bl	8000c86 <_fstat>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	d102      	bne.n	800395c <_fstat_r+0x1c>
 8003956:	682b      	ldr	r3, [r5, #0]
 8003958:	b103      	cbz	r3, 800395c <_fstat_r+0x1c>
 800395a:	6023      	str	r3, [r4, #0]
 800395c:	bd38      	pop	{r3, r4, r5, pc}
 800395e:	bf00      	nop
 8003960:	20000250 	.word	0x20000250

08003964 <_isatty_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	4d06      	ldr	r5, [pc, #24]	; (8003980 <_isatty_r+0x1c>)
 8003968:	2300      	movs	r3, #0
 800396a:	4604      	mov	r4, r0
 800396c:	4608      	mov	r0, r1
 800396e:	602b      	str	r3, [r5, #0]
 8003970:	f7fd f999 	bl	8000ca6 <_isatty>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d102      	bne.n	800397e <_isatty_r+0x1a>
 8003978:	682b      	ldr	r3, [r5, #0]
 800397a:	b103      	cbz	r3, 800397e <_isatty_r+0x1a>
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	20000250 	.word	0x20000250

08003984 <_kill_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	4d07      	ldr	r5, [pc, #28]	; (80039a4 <_kill_r+0x20>)
 8003988:	2300      	movs	r3, #0
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	f7fd f919 	bl	8000bc8 <_kill>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	d102      	bne.n	80039a0 <_kill_r+0x1c>
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	b103      	cbz	r3, 80039a0 <_kill_r+0x1c>
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
 80039a2:	bf00      	nop
 80039a4:	20000250 	.word	0x20000250

080039a8 <_getpid_r>:
 80039a8:	f7fd b906 	b.w	8000bb8 <_getpid>

080039ac <_gettimeofday>:
 80039ac:	4b02      	ldr	r3, [pc, #8]	; (80039b8 <_gettimeofday+0xc>)
 80039ae:	2258      	movs	r2, #88	; 0x58
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b6:	4770      	bx	lr
 80039b8:	20000250 	.word	0x20000250

080039bc <_init>:
 80039bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039be:	bf00      	nop
 80039c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c2:	bc08      	pop	{r3}
 80039c4:	469e      	mov	lr, r3
 80039c6:	4770      	bx	lr

080039c8 <_fini>:
 80039c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ca:	bf00      	nop
 80039cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ce:	bc08      	pop	{r3}
 80039d0:	469e      	mov	lr, r3
 80039d2:	4770      	bx	lr
