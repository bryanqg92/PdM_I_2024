
PRACTICA 5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003744  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  080038f4  080038f4  000138f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003af0  08003af0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af0  08003af0  00013af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          000001dc  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000025c  2000025c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000096e5  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001def  00000000  00000000  000297d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000898  00000000  00000000  0002b5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000667  00000000  00000000  0002be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026b87  00000000  00000000  0002c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d3a3  00000000  00000000  0005304e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3684  00000000  00000000  000603f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002a5c  00000000  00000000  00143a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001464d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080038dc 	.word	0x080038dc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	080038dc 	.word	0x080038dc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Error_Handler>:
#include "stm32f4xx_nucleo_144.h"
#include <API_Delay.h>



static void Error_Handler(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f9cd 	bl	8000930 <BSP_LED_On>
	while (1){}
 8000596:	e7fe      	b.n	8000596 <Error_Handler+0xa>

08000598 <delayInit>:
}

void delayInit(delay_t *delay, tick_t duration) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	if (duration <= 0){
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <delayInit+0x16>
		Error_Handler();
 80005a8:	f7ff fff0 	bl	800058c <Error_Handler>
	}
	else{
		delay->duration = duration;
		delay->running = false;
	}
}
 80005ac:	e005      	b.n	80005ba <delayInit+0x22>
		delay->duration = duration;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	605a      	str	r2, [r3, #4]
		delay->running = false;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	721a      	strb	r2, [r3, #8]
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <delayRead>:

bool_t delayRead(delay_t *delay) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]

	bool state = false;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d020      	beq.n	8000616 <delayRead+0x54>

		if (!delay->running) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7a1b      	ldrb	r3, [r3, #8]
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <delayRead+0x32>
			delay->startTime = HAL_GetTick();
 80005e2:	f000 fbe9 	bl	8000db8 <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	721a      	strb	r2, [r3, #8]
 80005f2:	e012      	b.n	800061a <delayRead+0x58>
		}

		else {

			tick_t currentTime = HAL_GetTick();
 80005f4:	f000 fbe0 	bl	8000db8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]

			if (currentTime - delay->startTime >= delay->duration) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	d307      	bcc.n	800061a <delayRead+0x58>
				delay->running = false;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	721a      	strb	r2, [r3, #8]
				state = true;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e001      	b.n	800061a <delayRead+0x58>
			}
		}
	}
	else{
		Error_Handler();
 8000616:	f7ff ffb9 	bl	800058c <Error_Handler>
	}

	return state;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	if(delay!=NULL && duration > 0){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <delayWrite+0x1e>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <delayWrite+0x1e>
		delay->duration = duration;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	e002      	b.n	8000648 <delayWrite+0x24>
	}
	else{
		Error_Handler();
 8000642:	f7ff ffa3 	bl	800058c <Error_Handler>
	}
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <FSM_error_handler>:
delay_t debounceInit; 

/**
 * @brief Manejador de errores de la máquina de estado.
 */
static void FSM_error_handler(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	buttonState = BSP_PB_GetState(BUTTON_USER);
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fa0f 	bl	8000a78 <BSP_PB_GetState>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	bf14      	ite	ne
 8000660:	2301      	movne	r3, #1
 8000662:	2300      	moveq	r3, #0
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <FSM_error_handler+0x48>)
 8000668:	701a      	strb	r2, [r3, #0]

	if (buttonState == GPIO_PIN_RESET){
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <FSM_error_handler+0x48>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d009      	beq.n	800068c <FSM_error_handler+0x3c>
		isKeyPressed = false;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <FSM_error_handler+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
		fsmState = BUTTON_UP;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <FSM_error_handler+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
		{
			BSP_LED_On(LED2);
		}
	}

}
 8000684:	e006      	b.n	8000694 <FSM_error_handler+0x44>
			BSP_LED_On(LED2);
 8000686:	2001      	movs	r0, #1
 8000688:	f000 f952 	bl	8000930 <BSP_LED_On>
		while (buttonState == GPIO_PIN_SET)
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <FSM_error_handler+0x48>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d1f8      	bne.n	8000686 <FSM_error_handler+0x36>
}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	2000009e 	.word	0x2000009e
 800069c:	2000009d 	.word	0x2000009d
 80006a0:	2000009c 	.word	0x2000009c

080006a4 <debounceFSM_init>:

/**
 * @brief Inicializa la máquina de estado del debounce.
 * @param debounceTime Tiempo de debounce en milisegundos.
 */
void debounceFSM_init(uint32_t debounceTime) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	fsmState = BUTTON_UP;
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <debounceFSM_init+0x20>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceInit, debounceTime);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	4804      	ldr	r0, [pc, #16]	; (80006c8 <debounceFSM_init+0x24>)
 80006b6:	f7ff ff6f 	bl	8000598 <delayInit>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	200000a0 	.word	0x200000a0

080006cc <debounceFSM_update>:

/**
 * @brief Actualiza la máquina de estado del debounce.
 */
void debounceFSM_update() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	buttonState = BSP_PB_GetState(BUTTON_USER);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 f9d1 	bl	8000a78 <BSP_PB_GetState>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	bf14      	ite	ne
 80006dc:	2301      	movne	r3, #1
 80006de:	2300      	moveq	r3, #0
 80006e0:	b2da      	uxtb	r2, r3
 80006e2:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <debounceFSM_update+0xe4>)
 80006e4:	701a      	strb	r2, [r3, #0]


	switch(fsmState) {
 80006e6:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <debounceFSM_update+0xe8>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b03      	cmp	r3, #3
 80006ec:	d854      	bhi.n	8000798 <debounceFSM_update+0xcc>
 80006ee:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <debounceFSM_update+0x28>)
 80006f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f4:	08000705 	.word	0x08000705
 80006f8:	0800071b 	.word	0x0800071b
 80006fc:	08000749 	.word	0x08000749
 8000700:	08000765 	.word	0x08000765

	case BUTTON_UP:

		if (buttonState == GPIO_PIN_SET){
 8000704:	4b2a      	ldr	r3, [pc, #168]	; (80007b0 <debounceFSM_update+0xe4>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d048      	beq.n	800079e <debounceFSM_update+0xd2>
			delayRead(&debounceInit);
 800070c:	482a      	ldr	r0, [pc, #168]	; (80007b8 <debounceFSM_update+0xec>)
 800070e:	f7ff ff58 	bl	80005c2 <delayRead>
			fsmState = BUTTON_FALLING;
 8000712:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <debounceFSM_update+0xe8>)
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000718:	e041      	b.n	800079e <debounceFSM_update+0xd2>


	case BUTTON_FALLING:

		if (delayRead(&debounceInit)) {
 800071a:	4827      	ldr	r0, [pc, #156]	; (80007b8 <debounceFSM_update+0xec>)
 800071c:	f7ff ff51 	bl	80005c2 <delayRead>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d03d      	beq.n	80007a2 <debounceFSM_update+0xd6>
			if (buttonState == GPIO_PIN_SET){
 8000726:	4b22      	ldr	r3, [pc, #136]	; (80007b0 <debounceFSM_update+0xe4>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d008      	beq.n	8000740 <debounceFSM_update+0x74>
				fsmState = BUTTON_DOWN;
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <debounceFSM_update+0xe8>)
 8000730:	2202      	movs	r2, #2
 8000732:	701a      	strb	r2, [r3, #0]
				isKeyPressed = true;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <debounceFSM_update+0xf0>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
				buttonPressed();
 800073a:	f000 f853 	bl	80007e4 <buttonPressed>
			else {
				fsmState = BUTTON_UP;
			}
		}

		break;
 800073e:	e030      	b.n	80007a2 <debounceFSM_update+0xd6>
				fsmState = BUTTON_UP;
 8000740:	4b1c      	ldr	r3, [pc, #112]	; (80007b4 <debounceFSM_update+0xe8>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
		break;
 8000746:	e02c      	b.n	80007a2 <debounceFSM_update+0xd6>

	case BUTTON_DOWN:

		if (buttonState == GPIO_PIN_RESET){
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <debounceFSM_update+0xe4>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d027      	beq.n	80007a6 <debounceFSM_update+0xda>
			delayRead(&debounceInit);
 8000756:	4818      	ldr	r0, [pc, #96]	; (80007b8 <debounceFSM_update+0xec>)
 8000758:	f7ff ff33 	bl	80005c2 <delayRead>
			fsmState = BUTTON_RAISING;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <debounceFSM_update+0xe8>)
 800075e:	2203      	movs	r2, #3
 8000760:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000762:	e020      	b.n	80007a6 <debounceFSM_update+0xda>

	case BUTTON_RAISING:

		if (delayRead(&debounceInit)) {
 8000764:	4814      	ldr	r0, [pc, #80]	; (80007b8 <debounceFSM_update+0xec>)
 8000766:	f7ff ff2c 	bl	80005c2 <delayRead>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d01c      	beq.n	80007aa <debounceFSM_update+0xde>

			if (buttonState == GPIO_PIN_RESET){
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <debounceFSM_update+0xe4>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d008      	beq.n	8000790 <debounceFSM_update+0xc4>
				fsmState = BUTTON_UP;
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <debounceFSM_update+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	701a      	strb	r2, [r3, #0]
				isKeyPressed = false;
 8000784:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <debounceFSM_update+0xf0>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]
				buttonReleased();
 800078a:	f000 f832 	bl	80007f2 <buttonReleased>
				fsmState = BUTTON_DOWN;
			}
		}


		break;
 800078e:	e00c      	b.n	80007aa <debounceFSM_update+0xde>
				fsmState = BUTTON_DOWN;
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <debounceFSM_update+0xe8>)
 8000792:	2202      	movs	r2, #2
 8000794:	701a      	strb	r2, [r3, #0]
		break;
 8000796:	e008      	b.n	80007aa <debounceFSM_update+0xde>


	default:
		FSM_error_handler();
 8000798:	f7ff ff5a 	bl	8000650 <FSM_error_handler>
		break;
 800079c:	e006      	b.n	80007ac <debounceFSM_update+0xe0>
		break;
 800079e:	bf00      	nop
 80007a0:	e004      	b.n	80007ac <debounceFSM_update+0xe0>
		break;
 80007a2:	bf00      	nop
 80007a4:	e002      	b.n	80007ac <debounceFSM_update+0xe0>
		break;
 80007a6:	bf00      	nop
 80007a8:	e000      	b.n	80007ac <debounceFSM_update+0xe0>
		break;
 80007aa:	bf00      	nop
	}
}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000009e 	.word	0x2000009e
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	2000009d 	.word	0x2000009d

080007c0 <readKey>:

/**
 * @brief Lee el estado del botón.
 * @return Estado del botón (presionado o no).
 */
bool_t readKey() {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
	bool_t read = isKeyPressed;
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <readKey+0x20>)
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
	isKeyPressed = false;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <readKey+0x20>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
	return read;
 80007d2:	79fb      	ldrb	r3, [r7, #7]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr
 80007e0:	2000009d 	.word	0x2000009d

080007e4 <buttonPressed>:

/**
 * @brief Manejador de evento para el botón presionado.
 */
void buttonPressed() {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f000 f8a1 	bl	8000930 <BSP_LED_On>
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <buttonReleased>:

/**
 * @brief Manejador de evento para el botón liberado.
 */
void buttonReleased() {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED3);
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 f8b4 	bl	8000964 <BSP_LED_Off>
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <uartInit>:

static void Error_Handler(void);



bool_t uartInit() {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0


    UartHandle.Instance = USARTx;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <uartInit+0x54>)
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <uartInit+0x58>)
 8000808:	601a      	str	r2, [r3, #0]
    UartHandle.Init.BaudRate = 9600;
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <uartInit+0x54>)
 800080c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000810:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <uartInit+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <uartInit+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <uartInit+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
    UartHandle.Init.Mode = UART_MODE_TX_RX;
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <uartInit+0x54>)
 8000826:	220c      	movs	r2, #12
 8000828:	615a      	str	r2, [r3, #20]
    UartHandle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <uartInit+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
    UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <uartInit+0x54>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]

    if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000836:	4807      	ldr	r0, [pc, #28]	; (8000854 <uartInit+0x54>)
 8000838:	f001 fb16 	bl	8001e68 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <uartInit+0x46>
        Error_Handler();
 8000842:	f000 f81f 	bl	8000884 <Error_Handler>
    }


    printf("\n\r UART configured as follows:"
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <uartInit+0x5c>)
 8000848:	f002 f91a 	bl	8002a80 <iprintf>
           "\n\r\t HwFlowCtl      =   NONE"
           "\n\r\t OverSampling  =   16 \n\r"
    );


	return true;
 800084c:	2301      	movs	r3, #1
}
 800084e:	4618      	mov	r0, r3
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000ac 	.word	0x200000ac
 8000858:	40004800 	.word	0x40004800
 800085c:	080038f4 	.word	0x080038f4

08000860 <__io_putchar>:

void uartReceiveStringSize(uint8_t *pstring, uint16_t size) {
	HAL_UART_Receive(&UartHandle, pstring, size, UART_TIMEOUT_MS);
}

PUTCHAR_PROTOTYPE {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART3 and Loop until the end of transmission */
	HAL_UART_Transmit(&UartHandle, (uint8_t*) &ch, 1, UART_TIMEOUT_MS);
 8000868:	1d39      	adds	r1, r7, #4
 800086a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800086e:	2201      	movs	r2, #1
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <__io_putchar+0x20>)
 8000872:	f001 fb46 	bl	8001f02 <HAL_UART_Transmit>

	return ch;
 8000876:	687b      	ldr	r3, [r7, #4]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000ac 	.word	0x200000ac

08000884 <Error_Handler>:



static void Error_Handler(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	while(1){
		BSP_LED_On(LED2);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f851 	bl	8000930 <BSP_LED_On>
 800088e:	e7fb      	b.n	8000888 <Error_Handler+0x4>

08000890 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d10e      	bne.n	80008be <BSP_LED_Init+0x2e>
 80008a0:	2300      	movs	r3, #0
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <BSP_LED_Init+0x94>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a8:	4a1e      	ldr	r2, [pc, #120]	; (8000924 <BSP_LED_Init+0x94>)
 80008aa:	f043 0302 	orr.w	r3, r3, #2
 80008ae:	6313      	str	r3, [r2, #48]	; 0x30
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <BSP_LED_Init+0x94>)
 80008b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b4:	f003 0302 	and.w	r3, r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	e00d      	b.n	80008da <BSP_LED_Init+0x4a>
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <BSP_LED_Init+0x94>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <BSP_LED_Init+0x94>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <BSP_LED_Init+0x94>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4a12      	ldr	r2, [pc, #72]	; (8000928 <BSP_LED_Init+0x98>)
 80008de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	4a0e      	ldr	r2, [pc, #56]	; (800092c <BSP_LED_Init+0x9c>)
 80008f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f8:	f107 0214 	add.w	r2, r7, #20
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 fb78 	bl	8000ff4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000904:	79fb      	ldrb	r3, [r7, #7]
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <BSP_LED_Init+0x9c>)
 8000908:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800090c:	79fb      	ldrb	r3, [r7, #7]
 800090e:	4a06      	ldr	r2, [pc, #24]	; (8000928 <BSP_LED_Init+0x98>)
 8000910:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000914:	2200      	movs	r2, #0
 8000916:	4619      	mov	r1, r3
 8000918:	f000 fd30 	bl	800137c <HAL_GPIO_WritePin>
}
 800091c:	bf00      	nop
 800091e:	3728      	adds	r7, #40	; 0x28
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	080039e8 	.word	0x080039e8
 800092c:	20000000 	.word	0x20000000

08000930 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	4a07      	ldr	r2, [pc, #28]	; (800095c <BSP_LED_On+0x2c>)
 800093e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	4a06      	ldr	r2, [pc, #24]	; (8000960 <BSP_LED_On+0x30>)
 8000946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094a:	2201      	movs	r2, #1
 800094c:	4619      	mov	r1, r3
 800094e:	f000 fd15 	bl	800137c <HAL_GPIO_WritePin>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000000 	.word	0x20000000
 8000960:	080039e8 	.word	0x080039e8

08000964 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <BSP_LED_Off+0x2c>)
 8000972:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <BSP_LED_Off+0x30>)
 800097a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097e:	2200      	movs	r2, #0
 8000980:	4619      	mov	r1, r3
 8000982:	f000 fcfb 	bl	800137c <HAL_GPIO_WritePin>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000000 	.word	0x20000000
 8000994:	080039e8 	.word	0x080039e8

08000998 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009a2:	79fb      	ldrb	r3, [r7, #7]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <BSP_LED_Toggle+0x2c>)
 80009a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	4906      	ldr	r1, [pc, #24]	; (80009c8 <BSP_LED_Toggle+0x30>)
 80009ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4610      	mov	r0, r2
 80009b6:	f000 fcfa 	bl	80013ae <HAL_GPIO_TogglePin>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000000 	.word	0x20000000
 80009c8:	080039e8 	.word	0x080039e8

080009cc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	460a      	mov	r2, r1
 80009d6:	71fb      	strb	r3, [r7, #7]
 80009d8:	4613      	mov	r3, r2
 80009da:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <BSP_PB_Init+0xa4>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a22      	ldr	r2, [pc, #136]	; (8000a70 <BSP_PB_Init+0xa4>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b20      	ldr	r3, [pc, #128]	; (8000a70 <BSP_PB_Init+0xa4>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d112      	bne.n	8000a24 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80009fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a02:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	4a18      	ldr	r2, [pc, #96]	; (8000a74 <BSP_PB_Init+0xa8>)
 8000a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a18:	f107 020c 	add.w	r2, r7, #12
 8000a1c:	4611      	mov	r1, r2
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 fae8 	bl	8000ff4 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000a24:	79bb      	ldrb	r3, [r7, #6]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d11d      	bne.n	8000a66 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8000a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000a34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a38:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <BSP_PB_Init+0xa8>)
 8000a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a42:	f107 020c 	add.w	r2, r7, #12
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fad3 	bl	8000ff4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8000a4e:	2328      	movs	r3, #40	; 0x28
 8000a50:	b25b      	sxtb	r3, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	210f      	movs	r1, #15
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fa95 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000a5c:	2328      	movs	r3, #40	; 0x28
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 faac 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800
 8000a74:	2000000c 	.word	0x2000000c

08000a78 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <BSP_PB_GetState+0x28>)
 8000a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 fc5b 	bl	800134c <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000000c 	.word	0x2000000c

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <SystemInit+0x60>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aae:	4a15      	ldr	r2, [pc, #84]	; (8000b04 <SystemInit+0x60>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <SystemInit+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <SystemInit+0x64>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <SystemInit+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <SystemInit+0x64>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <SystemInit+0x64>)
 8000ad0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <SystemInit+0x64>)
 8000adc:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <SystemInit+0x68>)
 8000ade:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <SystemInit+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <SystemInit+0x64>)
 8000ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <SystemInit+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <SystemInit+0x60>)
 8000af4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000af8:	609a      	str	r2, [r3, #8]
#endif
}
 8000afa:	bf00      	nop
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	24003010 	.word	0x24003010

08000b10 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000b64:	f000 f914 	bl	8000d90 <HAL_IncTick>
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	return 1;
 8000b70:	2301      	movs	r3, #1
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <_kill>:

int _kill(int pid, int sig)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b86:	f002 f84b 	bl	8002c20 <__errno>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2216      	movs	r2, #22
 8000b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <_exit>:

void _exit (int status)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff ffe7 	bl	8000b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000bae:	e7fe      	b.n	8000bae <_exit+0x12>

08000bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	e00a      	b.n	8000bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bc2:	f3af 8000 	nop.w
 8000bc6:	4601      	mov	r1, r0
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697a      	ldr	r2, [r7, #20]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	dbf0      	blt.n	8000bc2 <_read+0x12>
	}

return len;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}

08000bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e009      	b.n	8000c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	60ba      	str	r2, [r7, #8]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fe2b 	bl	8000860 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697a      	ldr	r2, [r7, #20]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dbf1      	blt.n	8000bfc <_write+0x12>
	}
	return len;
 8000c18:	687b      	ldr	r3, [r7, #4]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3718      	adds	r7, #24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <_close>:

int _close(int file)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b083      	sub	sp, #12
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
	return -1;
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
 8000c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <_isatty>:

int _isatty(int file)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
	return 1;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f001 ffb0 	bl	8002c20 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20030000 	.word	0x20030000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	200000f0 	.word	0x200000f0
 8000cf4:	20000260 	.word	0x20000260

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x34>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_Init+0x34>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_Init+0x34>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a07      	ldr	r2, [pc, #28]	; (8000d2c <HAL_Init+0x34>)
 8000d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d14:	2003      	movs	r0, #3
 8000d16:	f000 f92b 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d1a:	200f      	movs	r0, #15
 8000d1c:	f000 f808 	bl	8000d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d20:	f000 fbb2 	bl	8001488 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x54>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <HAL_InitTick+0x58>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f943 	bl	8000fda <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d6c:	f000 f90b 	bl	8000f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	; (8000d8c <HAL_InitTick+0x5c>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000010 	.word	0x20000010
 8000d88:	20000018 	.word	0x20000018
 8000d8c:	20000014 	.word	0x20000014

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000018 	.word	0x20000018
 8000db4:	200000f4 	.word	0x200000f4

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000f4 	.word	0x200000f4

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
 800100e:	e177      	b.n	8001300 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	429a      	cmp	r2, r3
 800102a:	f040 8166 	bne.w	80012fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d005      	beq.n	8001046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001042:	2b02      	cmp	r3, #2
 8001044:	d130      	bne.n	80010a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	2203      	movs	r2, #3
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800107c:	2201      	movs	r2, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	091b      	lsrs	r3, r3, #4
 8001092:	f003 0201 	and.w	r2, r3, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d017      	beq.n	80010e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	689a      	ldr	r2, [r3, #8]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d123      	bne.n	8001138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	08da      	lsrs	r2, r3, #3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	3208      	adds	r2, #8
 80010f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	220f      	movs	r2, #15
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	08da      	lsrs	r2, r3, #3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3208      	adds	r2, #8
 8001132:	69b9      	ldr	r1, [r7, #24]
 8001134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 0203 	and.w	r2, r3, #3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80c0 	beq.w	80012fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b66      	ldr	r3, [pc, #408]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a65      	ldr	r2, [pc, #404]	; (8001318 <HAL_GPIO_Init+0x324>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_GPIO_Init+0x324>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001196:	4a61      	ldr	r2, [pc, #388]	; (800131c <HAL_GPIO_Init+0x328>)
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	089b      	lsrs	r3, r3, #2
 800119c:	3302      	adds	r3, #2
 800119e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	220f      	movs	r2, #15
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4013      	ands	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a58      	ldr	r2, [pc, #352]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d037      	beq.n	8001232 <HAL_GPIO_Init+0x23e>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a57      	ldr	r2, [pc, #348]	; (8001324 <HAL_GPIO_Init+0x330>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0x23a>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <HAL_GPIO_Init+0x334>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d02b      	beq.n	800122a <HAL_GPIO_Init+0x236>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a55      	ldr	r2, [pc, #340]	; (800132c <HAL_GPIO_Init+0x338>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d025      	beq.n	8001226 <HAL_GPIO_Init+0x232>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a54      	ldr	r2, [pc, #336]	; (8001330 <HAL_GPIO_Init+0x33c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01f      	beq.n	8001222 <HAL_GPIO_Init+0x22e>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a53      	ldr	r2, [pc, #332]	; (8001334 <HAL_GPIO_Init+0x340>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x22a>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a52      	ldr	r2, [pc, #328]	; (8001338 <HAL_GPIO_Init+0x344>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x226>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a51      	ldr	r2, [pc, #324]	; (800133c <HAL_GPIO_Init+0x348>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x222>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a50      	ldr	r2, [pc, #320]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x21e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x350>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x21a>
 800120a:	2309      	movs	r3, #9
 800120c:	e012      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800120e:	230a      	movs	r3, #10
 8001210:	e010      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001212:	2308      	movs	r3, #8
 8001214:	e00e      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001216:	2307      	movs	r3, #7
 8001218:	e00c      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800121a:	2306      	movs	r3, #6
 800121c:	e00a      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800121e:	2305      	movs	r3, #5
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001222:	2304      	movs	r3, #4
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x240>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x240>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x328>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001252:	4b3d      	ldr	r3, [pc, #244]	; (8001348 <HAL_GPIO_Init+0x354>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_GPIO_Init+0x354>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_GPIO_Init+0x354>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a0:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012a6:	4b28      	ldr	r3, [pc, #160]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d0:	4b1d      	ldr	r3, [pc, #116]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <HAL_GPIO_Init+0x354>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f ae84 	bls.w	8001010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40021400 	.word	0x40021400
 8001338:	40021800 	.word	0x40021800
 800133c:	40021c00 	.word	0x40021c00
 8001340:	40022000 	.word	0x40022000
 8001344:	40022400 	.word	0x40022400
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	400b      	ands	r3, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_UART_MspInit+0x9c>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_UART_MspInit+0x9c>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <HAL_UART_MspInit+0x9c>)
 80013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_UART_MspInit+0x9c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <HAL_UART_MspInit+0x9c>)
 8001412:	f043 0308 	orr.w	r3, r3, #8
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_UART_MspInit+0x9c>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_UART_MspInit+0x9c>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <HAL_UART_MspInit+0x9c>)
 800142e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001432:	6413      	str	r3, [r2, #64]	; 0x40
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_UART_MspInit+0x9c>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8001440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001446:	2302      	movs	r3, #2
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800144e:	2303      	movs	r3, #3
 8001450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8001452:	2307      	movs	r3, #7
 8001454:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	4809      	ldr	r0, [pc, #36]	; (8001484 <HAL_UART_MspInit+0xa0>)
 800145e:	f7ff fdc9 	bl	8000ff4 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8001462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8001468:	2307      	movs	r3, #7
 800146a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4804      	ldr	r0, [pc, #16]	; (8001484 <HAL_UART_MspInit+0xa0>)
 8001474:	f7ff fdbe 	bl	8000ff4 <HAL_GPIO_Init>
}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40020c00 	.word	0x40020c00

08001488 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b20      	ldr	r3, [pc, #128]	; (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	4a1f      	ldr	r2, [pc, #124]	; (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	; 0x40
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_PWREx_EnableOverDrive+0x94>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff fc78 	bl	8000db8 <HAL_GetTick>
 80014c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ca:	e009      	b.n	80014e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014cc:	f7ff fc74 	bl	8000db8 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014da:	d901      	bls.n	80014e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e01f      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <HAL_PWREx_EnableOverDrive+0x98>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d1ee      	bne.n	80014cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff fc60 	bl	8000db8 <HAL_GetTick>
 80014f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014fa:	e009      	b.n	8001510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014fc:	f7ff fc5c 	bl	8000db8 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800150a:	d901      	bls.n	8001510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e007      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_PWREx_EnableOverDrive+0x98>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001518:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800151c:	d1ee      	bne.n	80014fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	420e0040 	.word	0x420e0040
 8001530:	40007000 	.word	0x40007000
 8001534:	420e0044 	.word	0x420e0044

08001538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e267      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d075      	beq.n	8001642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	4b88      	ldr	r3, [pc, #544]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b04      	cmp	r3, #4
 8001560:	d00c      	beq.n	800157c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001562:	4b85      	ldr	r3, [pc, #532]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156a:	2b08      	cmp	r3, #8
 800156c:	d112      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156e:	4b82      	ldr	r3, [pc, #520]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800157a:	d10b      	bne.n	8001594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	4b7e      	ldr	r3, [pc, #504]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d05b      	beq.n	8001640 <HAL_RCC_OscConfig+0x108>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d157      	bne.n	8001640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e242      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d106      	bne.n	80015ac <HAL_RCC_OscConfig+0x74>
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a75      	ldr	r2, [pc, #468]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x98>
 80015b6:	4b70      	ldr	r3, [pc, #448]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a6f      	ldr	r2, [pc, #444]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b6d      	ldr	r3, [pc, #436]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6c      	ldr	r2, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xb0>
 80015d0:	4b69      	ldr	r3, [pc, #420]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a68      	ldr	r2, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b66      	ldr	r3, [pc, #408]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a65      	ldr	r2, [pc, #404]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fbe2 	bl	8000db8 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbde 	bl	8000db8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e207      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160a:	4b5b      	ldr	r3, [pc, #364]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xc0>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fbce 	bl	8000db8 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fbca 	bl	8000db8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	; 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e1f3      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001632:	4b51      	ldr	r3, [pc, #324]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0xe8>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d063      	beq.n	8001716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800165a:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001662:	2b08      	cmp	r3, #8
 8001664:	d11c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d116      	bne.n	80016a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d001      	beq.n	800168a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e1c7      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	4937      	ldr	r1, [pc, #220]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800169e:	e03a      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d020      	beq.n	80016ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016a8:	4b34      	ldr	r3, [pc, #208]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fb83 	bl	8000db8 <HAL_GetTick>
 80016b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fb7f 	bl	8000db8 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e1a8      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c8:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	4b28      	ldr	r3, [pc, #160]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4925      	ldr	r1, [pc, #148]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	600b      	str	r3, [r1, #0]
 80016e8:	e015      	b.n	8001716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x244>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb62 	bl	8000db8 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb5e 	bl	8000db8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e187      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d036      	beq.n	8001790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d016      	beq.n	8001758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fb42 	bl	8000db8 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fb3e 	bl	8000db8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e167      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <HAL_RCC_OscConfig+0x240>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f0      	beq.n	8001738 <HAL_RCC_OscConfig+0x200>
 8001756:	e01b      	b.n	8001790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <HAL_RCC_OscConfig+0x248>)
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800175e:	f7ff fb2b 	bl	8000db8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001764:	e00e      	b.n	8001784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fb27 	bl	8000db8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d907      	bls.n	8001784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e150      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 8001778:	40023800 	.word	0x40023800
 800177c:	42470000 	.word	0x42470000
 8001780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	4b88      	ldr	r3, [pc, #544]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ea      	bne.n	8001766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8097 	beq.w	80018cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017a2:	4b81      	ldr	r3, [pc, #516]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10f      	bne.n	80017ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b7d      	ldr	r3, [pc, #500]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a7c      	ldr	r2, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b7a      	ldr	r3, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b77      	ldr	r3, [pc, #476]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d118      	bne.n	800180c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017da:	4b74      	ldr	r3, [pc, #464]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a73      	ldr	r2, [pc, #460]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 80017e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fae7 	bl	8000db8 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ee:	f7ff fae3 	bl	8000db8 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e10c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001800:	4b6a      	ldr	r3, [pc, #424]	; (80019ac <HAL_RCC_OscConfig+0x474>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d106      	bne.n	8001822 <HAL_RCC_OscConfig+0x2ea>
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a63      	ldr	r2, [pc, #396]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x30c>
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800182c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6713      	str	r3, [r2, #112]	; 0x70
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183a:	4a5b      	ldr	r2, [pc, #364]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6713      	str	r3, [r2, #112]	; 0x70
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x324>
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6713      	str	r3, [r2, #112]	; 0x70
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001854:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d015      	beq.n	8001890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff faa8 	bl	8000db8 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff faa4 	bl	8000db8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0cb      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0ee      	beq.n	800186c <HAL_RCC_OscConfig+0x334>
 800188e:	e014      	b.n	80018ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001890:	f7ff fa92 	bl	8000db8 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fa8e 	bl	8000db8 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e0b5      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ee      	bne.n	8001898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a38      	ldr	r2, [pc, #224]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a1 	beq.w	8001a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018d6:	4b34      	ldr	r3, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d05c      	beq.n	800199c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d141      	bne.n	800196e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fa62 	bl	8000db8 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7ff fa5e 	bl	8000db8 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e087      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	019b      	lsls	r3, r3, #6
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	085b      	lsrs	r3, r3, #1
 800192e:	3b01      	subs	r3, #1
 8001930:	041b      	lsls	r3, r3, #16
 8001932:	431a      	orrs	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001938:	061b      	lsls	r3, r3, #24
 800193a:	491b      	ldr	r1, [pc, #108]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001946:	f7ff fa37 	bl	8000db8 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fa33 	bl	8000db8 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e05c      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x416>
 800196c:	e054      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <HAL_RCC_OscConfig+0x478>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fa20 	bl	8000db8 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800197c:	f7ff fa1c 	bl	8000db8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e045      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_RCC_OscConfig+0x470>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f0      	bne.n	800197c <HAL_RCC_OscConfig+0x444>
 800199a:	e03d      	b.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d107      	bne.n	80019b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e038      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
 80019a8:	40023800 	.word	0x40023800
 80019ac:	40007000 	.word	0x40007000
 80019b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_RCC_OscConfig+0x4ec>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d028      	beq.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d121      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d11a      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019e4:	4013      	ands	r3, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	085b      	lsrs	r3, r3, #1
 80019fc:	3b01      	subs	r3, #1
 80019fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0cc      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b68      	ldr	r3, [pc, #416]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d90c      	bls.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b63      	ldr	r3, [pc, #396]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0b8      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0304 	and.w	r3, r3, #4
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a7c:	4b59      	ldr	r3, [pc, #356]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	4a58      	ldr	r2, [pc, #352]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a94:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a52      	ldr	r2, [pc, #328]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b50      	ldr	r3, [pc, #320]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	494d      	ldr	r1, [pc, #308]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d044      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d119      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e07f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ae2:	2b03      	cmp	r3, #3
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e06f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e067      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b06:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f023 0203 	bic.w	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b18:	f7ff f94e 	bl	8000db8 <HAL_GetTick>
 8001b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b1e:	e00a      	b.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b20:	f7ff f94a 	bl	8000db8 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d901      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e04f      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	4b2b      	ldr	r3, [pc, #172]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 020c 	and.w	r2, r3, #12
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d1eb      	bne.n	8001b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d20c      	bcs.n	8001b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e032      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	4916      	ldr	r1, [pc, #88]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	490e      	ldr	r1, [pc, #56]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bae:	f000 f821 	bl	8001bf4 <HAL_RCC_GetSysClockFreq>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	490a      	ldr	r1, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	5ccb      	ldrb	r3, [r1, r3]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_RCC_ClockConfig+0x1c4>)
 8001bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f8ae 	bl	8000d30 <HAL_InitTick>

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023c00 	.word	0x40023c00
 8001be4:	40023800 	.word	0x40023800
 8001be8:	080039f0 	.word	0x080039f0
 8001bec:	20000010 	.word	0x20000010
 8001bf0:	20000014 	.word	0x20000014

08001bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bf8:	b094      	sub	sp, #80	; 0x50
 8001bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001c00:	2300      	movs	r3, #0
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c04:	2300      	movs	r3, #0
 8001c06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c0c:	4b79      	ldr	r3, [pc, #484]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d00d      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x40>
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	f200 80e1 	bhi.w	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d002      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x34>
 8001c22:	2b04      	cmp	r3, #4
 8001c24:	d003      	beq.n	8001c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8001c26:	e0db      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c28:	4b73      	ldr	r3, [pc, #460]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001c2c:	e0db      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x208>)
 8001c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c32:	e0d8      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c34:	4b6f      	ldr	r3, [pc, #444]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d063      	beq.n	8001d12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
 8001c62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001c66:	4622      	mov	r2, r4
 8001c68:	462b      	mov	r3, r5
 8001c6a:	f04f 0000 	mov.w	r0, #0
 8001c6e:	f04f 0100 	mov.w	r1, #0
 8001c72:	0159      	lsls	r1, r3, #5
 8001c74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c78:	0150      	lsls	r0, r2, #5
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4621      	mov	r1, r4
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	6139      	str	r1, [r7, #16]
 8001c84:	4629      	mov	r1, r5
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c98:	4659      	mov	r1, fp
 8001c9a:	018b      	lsls	r3, r1, #6
 8001c9c:	4651      	mov	r1, sl
 8001c9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca2:	4651      	mov	r1, sl
 8001ca4:	018a      	lsls	r2, r1, #6
 8001ca6:	4651      	mov	r1, sl
 8001ca8:	ebb2 0801 	subs.w	r8, r2, r1
 8001cac:	4659      	mov	r1, fp
 8001cae:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc6:	4690      	mov	r8, r2
 8001cc8:	4699      	mov	r9, r3
 8001cca:	4623      	mov	r3, r4
 8001ccc:	eb18 0303 	adds.w	r3, r8, r3
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	462b      	mov	r3, r5
 8001cd4:	eb49 0303 	adc.w	r3, r9, r3
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	024b      	lsls	r3, r1, #9
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	024a      	lsls	r2, r1, #9
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d04:	f7fe fac4 	bl	8000290 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d10:	e058      	b.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	099b      	lsrs	r3, r3, #6
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4611      	mov	r1, r2
 8001d1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d22:	623b      	str	r3, [r7, #32]
 8001d24:	2300      	movs	r3, #0
 8001d26:	627b      	str	r3, [r7, #36]	; 0x24
 8001d28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d2c:	4642      	mov	r2, r8
 8001d2e:	464b      	mov	r3, r9
 8001d30:	f04f 0000 	mov.w	r0, #0
 8001d34:	f04f 0100 	mov.w	r1, #0
 8001d38:	0159      	lsls	r1, r3, #5
 8001d3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3e:	0150      	lsls	r0, r2, #5
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4641      	mov	r1, r8
 8001d46:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d4a:	4649      	mov	r1, r9
 8001d4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d50:	f04f 0200 	mov.w	r2, #0
 8001d54:	f04f 0300 	mov.w	r3, #0
 8001d58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d64:	ebb2 040a 	subs.w	r4, r2, sl
 8001d68:	eb63 050b 	sbc.w	r5, r3, fp
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	00eb      	lsls	r3, r5, #3
 8001d76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d7a:	00e2      	lsls	r2, r4, #3
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	461d      	mov	r5, r3
 8001d80:	4643      	mov	r3, r8
 8001d82:	18e3      	adds	r3, r4, r3
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	464b      	mov	r3, r9
 8001d88:	eb45 0303 	adc.w	r3, r5, r3
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	028b      	lsls	r3, r1, #10
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da4:	4621      	mov	r1, r4
 8001da6:	028a      	lsls	r2, r1, #10
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	61bb      	str	r3, [r7, #24]
 8001db2:	61fa      	str	r2, [r7, #28]
 8001db4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001db8:	f7fe fa6a 	bl	8000290 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	0c1b      	lsrs	r3, r3, #16
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001dde:	e002      	b.n	8001de6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001de2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001de6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3750      	adds	r7, #80	; 0x50
 8001dec:	46bd      	mov	sp, r7
 8001dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000010 	.word	0x20000010

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a9b      	lsrs	r3, r3, #10
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4903      	ldr	r1, [pc, #12]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	08003a00 	.word	0x08003a00

08001e40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e44:	f7ff ffdc 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	0b5b      	lsrs	r3, r3, #13
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	4903      	ldr	r1, [pc, #12]	; (8001e64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e56:	5ccb      	ldrb	r3, [r1, r3]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	08003a00 	.word	0x08003a00

08001e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e03f      	b.n	8001efa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d106      	bne.n	8001e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff faa8 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2224      	movs	r2, #36	; 0x24
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f929 	bl	8002104 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b08a      	sub	sp, #40	; 0x28
 8001f06:	af02      	add	r7, sp, #8
 8001f08:	60f8      	str	r0, [r7, #12]
 8001f0a:	60b9      	str	r1, [r7, #8]
 8001f0c:	603b      	str	r3, [r7, #0]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b20      	cmp	r3, #32
 8001f20:	d17c      	bne.n	800201c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <HAL_UART_Transmit+0x2c>
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e075      	b.n	800201e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_UART_Transmit+0x3e>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e06e      	b.n	800201e <HAL_UART_Transmit+0x11c>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2221      	movs	r2, #33	; 0x21
 8001f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f56:	f7fe ff2f 	bl	8000db8 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f70:	d108      	bne.n	8001f84 <HAL_UART_Transmit+0x82>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e003      	b.n	8001f8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f94:	e02a      	b.n	8001fec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f840 	bl	8002026 <UART_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e036      	b.n	800201e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e007      	b.n	8001fde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1cf      	bne.n	8001f96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2140      	movs	r1, #64	; 0x40
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f810 	bl	8002026 <UART_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e006      	b.n	800201e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2220      	movs	r2, #32
 8002014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	e000      	b.n	800201e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800201c:	2302      	movs	r3, #2
  }
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b090      	sub	sp, #64	; 0x40
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4613      	mov	r3, r2
 8002034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002036:	e050      	b.n	80020da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800203e:	d04c      	beq.n	80020da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <UART_WaitOnFlagUntilTimeout+0x30>
 8002046:	f7fe feb7 	bl	8000db8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002052:	429a      	cmp	r2, r3
 8002054:	d241      	bcs.n	80020da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002060:	e853 3f00 	ldrex	r3, [r3]
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	330c      	adds	r3, #12
 8002074:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002076:	637a      	str	r2, [r7, #52]	; 0x34
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800207a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800207c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800207e:	e841 2300 	strex	r3, r2, [r1]
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e5      	bne.n	8002056 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3314      	adds	r3, #20
 8002090:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	e853 3f00 	ldrex	r3, [r3]
 8002098:	613b      	str	r3, [r7, #16]
   return(result);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f023 0301 	bic.w	r3, r3, #1
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3314      	adds	r3, #20
 80020a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020aa:	623a      	str	r2, [r7, #32]
 80020ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ae:	69f9      	ldr	r1, [r7, #28]
 80020b0:	6a3a      	ldr	r2, [r7, #32]
 80020b2:	e841 2300 	strex	r3, r2, [r1]
 80020b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1e5      	bne.n	800208a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2220      	movs	r2, #32
 80020c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2220      	movs	r2, #32
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e00f      	b.n	80020fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4013      	ands	r3, r2
 80020e4:	68ba      	ldr	r2, [r7, #8]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	461a      	mov	r2, r3
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d09f      	beq.n	8002038 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3740      	adds	r7, #64	; 0x40
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b0c0      	sub	sp, #256	; 0x100
 800210a:	af00      	add	r7, sp, #0
 800210c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	68d9      	ldr	r1, [r3, #12]
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	ea40 0301 	orr.w	r3, r0, r1
 800212c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800212e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	431a      	orrs	r2, r3
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	431a      	orrs	r2, r3
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800215c:	f021 010c 	bic.w	r1, r1, #12
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800216a:	430b      	orrs	r3, r1
 800216c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800216e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800217a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800217e:	6999      	ldr	r1, [r3, #24]
 8002180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	ea40 0301 	orr.w	r3, r0, r1
 800218a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800218c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b8f      	ldr	r3, [pc, #572]	; (80023d0 <UART_SetConfig+0x2cc>)
 8002194:	429a      	cmp	r2, r3
 8002196:	d005      	beq.n	80021a4 <UART_SetConfig+0xa0>
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b8d      	ldr	r3, [pc, #564]	; (80023d4 <UART_SetConfig+0x2d0>)
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d104      	bne.n	80021ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021a4:	f7ff fe4c 	bl	8001e40 <HAL_RCC_GetPCLK2Freq>
 80021a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80021ac:	e003      	b.n	80021b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80021ae:	f7ff fe33 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80021b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021c0:	f040 810c 	bne.w	80023dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80021ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80021d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80021d6:	4622      	mov	r2, r4
 80021d8:	462b      	mov	r3, r5
 80021da:	1891      	adds	r1, r2, r2
 80021dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80021de:	415b      	adcs	r3, r3
 80021e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021e6:	4621      	mov	r1, r4
 80021e8:	eb12 0801 	adds.w	r8, r2, r1
 80021ec:	4629      	mov	r1, r5
 80021ee:	eb43 0901 	adc.w	r9, r3, r1
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002206:	4690      	mov	r8, r2
 8002208:	4699      	mov	r9, r3
 800220a:	4623      	mov	r3, r4
 800220c:	eb18 0303 	adds.w	r3, r8, r3
 8002210:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002214:	462b      	mov	r3, r5
 8002216:	eb49 0303 	adc.w	r3, r9, r3
 800221a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800221e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800222a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800222e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002232:	460b      	mov	r3, r1
 8002234:	18db      	adds	r3, r3, r3
 8002236:	653b      	str	r3, [r7, #80]	; 0x50
 8002238:	4613      	mov	r3, r2
 800223a:	eb42 0303 	adc.w	r3, r2, r3
 800223e:	657b      	str	r3, [r7, #84]	; 0x54
 8002240:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002244:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002248:	f7fe f822 	bl	8000290 <__aeabi_uldivmod>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4b61      	ldr	r3, [pc, #388]	; (80023d8 <UART_SetConfig+0x2d4>)
 8002252:	fba3 2302 	umull	r2, r3, r3, r2
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	011c      	lsls	r4, r3, #4
 800225a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800225e:	2200      	movs	r2, #0
 8002260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002264:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002268:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800226c:	4642      	mov	r2, r8
 800226e:	464b      	mov	r3, r9
 8002270:	1891      	adds	r1, r2, r2
 8002272:	64b9      	str	r1, [r7, #72]	; 0x48
 8002274:	415b      	adcs	r3, r3
 8002276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002278:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800227c:	4641      	mov	r1, r8
 800227e:	eb12 0a01 	adds.w	sl, r2, r1
 8002282:	4649      	mov	r1, r9
 8002284:	eb43 0b01 	adc.w	fp, r3, r1
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002294:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800229c:	4692      	mov	sl, r2
 800229e:	469b      	mov	fp, r3
 80022a0:	4643      	mov	r3, r8
 80022a2:	eb1a 0303 	adds.w	r3, sl, r3
 80022a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022aa:	464b      	mov	r3, r9
 80022ac:	eb4b 0303 	adc.w	r3, fp, r3
 80022b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80022c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80022c8:	460b      	mov	r3, r1
 80022ca:	18db      	adds	r3, r3, r3
 80022cc:	643b      	str	r3, [r7, #64]	; 0x40
 80022ce:	4613      	mov	r3, r2
 80022d0:	eb42 0303 	adc.w	r3, r2, r3
 80022d4:	647b      	str	r3, [r7, #68]	; 0x44
 80022d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80022de:	f7fd ffd7 	bl	8000290 <__aeabi_uldivmod>
 80022e2:	4602      	mov	r2, r0
 80022e4:	460b      	mov	r3, r1
 80022e6:	4611      	mov	r1, r2
 80022e8:	4b3b      	ldr	r3, [pc, #236]	; (80023d8 <UART_SetConfig+0x2d4>)
 80022ea:	fba3 2301 	umull	r2, r3, r3, r1
 80022ee:	095b      	lsrs	r3, r3, #5
 80022f0:	2264      	movs	r2, #100	; 0x64
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	1acb      	subs	r3, r1, r3
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80022fe:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <UART_SetConfig+0x2d4>)
 8002300:	fba3 2302 	umull	r2, r3, r3, r2
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800230c:	441c      	add	r4, r3
 800230e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002312:	2200      	movs	r2, #0
 8002314:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002318:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800231c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002320:	4642      	mov	r2, r8
 8002322:	464b      	mov	r3, r9
 8002324:	1891      	adds	r1, r2, r2
 8002326:	63b9      	str	r1, [r7, #56]	; 0x38
 8002328:	415b      	adcs	r3, r3
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800232c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002330:	4641      	mov	r1, r8
 8002332:	1851      	adds	r1, r2, r1
 8002334:	6339      	str	r1, [r7, #48]	; 0x30
 8002336:	4649      	mov	r1, r9
 8002338:	414b      	adcs	r3, r1
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002348:	4659      	mov	r1, fp
 800234a:	00cb      	lsls	r3, r1, #3
 800234c:	4651      	mov	r1, sl
 800234e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002352:	4651      	mov	r1, sl
 8002354:	00ca      	lsls	r2, r1, #3
 8002356:	4610      	mov	r0, r2
 8002358:	4619      	mov	r1, r3
 800235a:	4603      	mov	r3, r0
 800235c:	4642      	mov	r2, r8
 800235e:	189b      	adds	r3, r3, r2
 8002360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002364:	464b      	mov	r3, r9
 8002366:	460a      	mov	r2, r1
 8002368:	eb42 0303 	adc.w	r3, r2, r3
 800236c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800237c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002380:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002384:	460b      	mov	r3, r1
 8002386:	18db      	adds	r3, r3, r3
 8002388:	62bb      	str	r3, [r7, #40]	; 0x28
 800238a:	4613      	mov	r3, r2
 800238c:	eb42 0303 	adc.w	r3, r2, r3
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002392:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002396:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800239a:	f7fd ff79 	bl	8000290 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <UART_SetConfig+0x2d4>)
 80023a4:	fba3 1302 	umull	r1, r3, r3, r2
 80023a8:	095b      	lsrs	r3, r3, #5
 80023aa:	2164      	movs	r1, #100	; 0x64
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	3332      	adds	r3, #50	; 0x32
 80023b6:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <UART_SetConfig+0x2d4>)
 80023b8:	fba2 2303 	umull	r2, r3, r2, r3
 80023bc:	095b      	lsrs	r3, r3, #5
 80023be:	f003 0207 	and.w	r2, r3, #7
 80023c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4422      	add	r2, r4
 80023ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80023cc:	e106      	b.n	80025dc <UART_SetConfig+0x4d8>
 80023ce:	bf00      	nop
 80023d0:	40011000 	.word	0x40011000
 80023d4:	40011400 	.word	0x40011400
 80023d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80023e0:	2200      	movs	r2, #0
 80023e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023ee:	4642      	mov	r2, r8
 80023f0:	464b      	mov	r3, r9
 80023f2:	1891      	adds	r1, r2, r2
 80023f4:	6239      	str	r1, [r7, #32]
 80023f6:	415b      	adcs	r3, r3
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023fe:	4641      	mov	r1, r8
 8002400:	1854      	adds	r4, r2, r1
 8002402:	4649      	mov	r1, r9
 8002404:	eb43 0501 	adc.w	r5, r3, r1
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	00eb      	lsls	r3, r5, #3
 8002412:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002416:	00e2      	lsls	r2, r4, #3
 8002418:	4614      	mov	r4, r2
 800241a:	461d      	mov	r5, r3
 800241c:	4643      	mov	r3, r8
 800241e:	18e3      	adds	r3, r4, r3
 8002420:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002424:	464b      	mov	r3, r9
 8002426:	eb45 0303 	adc.w	r3, r5, r3
 800242a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800242e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800243a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800244a:	4629      	mov	r1, r5
 800244c:	008b      	lsls	r3, r1, #2
 800244e:	4621      	mov	r1, r4
 8002450:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002454:	4621      	mov	r1, r4
 8002456:	008a      	lsls	r2, r1, #2
 8002458:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800245c:	f7fd ff18 	bl	8000290 <__aeabi_uldivmod>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <UART_SetConfig+0x4e4>)
 8002466:	fba3 2302 	umull	r2, r3, r3, r2
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	011c      	lsls	r4, r3, #4
 800246e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002478:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800247c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	61b9      	str	r1, [r7, #24]
 8002488:	415b      	adcs	r3, r3
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002490:	4641      	mov	r1, r8
 8002492:	1851      	adds	r1, r2, r1
 8002494:	6139      	str	r1, [r7, #16]
 8002496:	4649      	mov	r1, r9
 8002498:	414b      	adcs	r3, r1
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024a8:	4659      	mov	r1, fp
 80024aa:	00cb      	lsls	r3, r1, #3
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b2:	4651      	mov	r1, sl
 80024b4:	00ca      	lsls	r2, r1, #3
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	4642      	mov	r2, r8
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80024c4:	464b      	mov	r3, r9
 80024c6:	460a      	mov	r2, r1
 80024c8:	eb42 0303 	adc.w	r3, r2, r3
 80024cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80024da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80024e8:	4649      	mov	r1, r9
 80024ea:	008b      	lsls	r3, r1, #2
 80024ec:	4641      	mov	r1, r8
 80024ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024f2:	4641      	mov	r1, r8
 80024f4:	008a      	lsls	r2, r1, #2
 80024f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80024fa:	f7fd fec9 	bl	8000290 <__aeabi_uldivmod>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4611      	mov	r1, r2
 8002504:	4b38      	ldr	r3, [pc, #224]	; (80025e8 <UART_SetConfig+0x4e4>)
 8002506:	fba3 2301 	umull	r2, r3, r3, r1
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2264      	movs	r2, #100	; 0x64
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	1acb      	subs	r3, r1, r3
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	3332      	adds	r3, #50	; 0x32
 8002518:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <UART_SetConfig+0x4e4>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002524:	441c      	add	r4, r3
 8002526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800252a:	2200      	movs	r2, #0
 800252c:	673b      	str	r3, [r7, #112]	; 0x70
 800252e:	677a      	str	r2, [r7, #116]	; 0x74
 8002530:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002534:	4642      	mov	r2, r8
 8002536:	464b      	mov	r3, r9
 8002538:	1891      	adds	r1, r2, r2
 800253a:	60b9      	str	r1, [r7, #8]
 800253c:	415b      	adcs	r3, r3
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002544:	4641      	mov	r1, r8
 8002546:	1851      	adds	r1, r2, r1
 8002548:	6039      	str	r1, [r7, #0]
 800254a:	4649      	mov	r1, r9
 800254c:	414b      	adcs	r3, r1
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	f04f 0200 	mov.w	r2, #0
 8002554:	f04f 0300 	mov.w	r3, #0
 8002558:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800255c:	4659      	mov	r1, fp
 800255e:	00cb      	lsls	r3, r1, #3
 8002560:	4651      	mov	r1, sl
 8002562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002566:	4651      	mov	r1, sl
 8002568:	00ca      	lsls	r2, r1, #3
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	4603      	mov	r3, r0
 8002570:	4642      	mov	r2, r8
 8002572:	189b      	adds	r3, r3, r2
 8002574:	66bb      	str	r3, [r7, #104]	; 0x68
 8002576:	464b      	mov	r3, r9
 8002578:	460a      	mov	r2, r1
 800257a:	eb42 0303 	adc.w	r3, r2, r3
 800257e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	663b      	str	r3, [r7, #96]	; 0x60
 800258a:	667a      	str	r2, [r7, #100]	; 0x64
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002598:	4649      	mov	r1, r9
 800259a:	008b      	lsls	r3, r1, #2
 800259c:	4641      	mov	r1, r8
 800259e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025a2:	4641      	mov	r1, r8
 80025a4:	008a      	lsls	r2, r1, #2
 80025a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80025aa:	f7fd fe71 	bl	8000290 <__aeabi_uldivmod>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <UART_SetConfig+0x4e4>)
 80025b4:	fba3 1302 	umull	r1, r3, r3, r2
 80025b8:	095b      	lsrs	r3, r3, #5
 80025ba:	2164      	movs	r1, #100	; 0x64
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	3332      	adds	r3, #50	; 0x32
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <UART_SetConfig+0x4e4>)
 80025c8:	fba2 2303 	umull	r2, r3, r2, r3
 80025cc:	095b      	lsrs	r3, r3, #5
 80025ce:	f003 020f 	and.w	r2, r3, #15
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4422      	add	r2, r4
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	bf00      	nop
 80025de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025e8:	51eb851f 	.word	0x51eb851f

080025ec <timeIntervalCalc>:

/*
 * @brief Calculate a randomly value between two delay time
 * @return Calculate value
 */
int timeIntervalCalc(){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
	int InternalCal = (rand() % (BLINKY_DELAY_MAX - BLINKY_DELAY_MIN + 1)) + BLINKY_DELAY_MIN;
 80025f2:	f000 f945 	bl	8002880 <rand>
 80025f6:	4602      	mov	r2, r0
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <timeIntervalCalc+0x30>)
 80025fa:	fb83 1302 	smull	r1, r3, r3, r2
 80025fe:	1199      	asrs	r1, r3, #6
 8002600:	17d3      	asrs	r3, r2, #31
 8002602:	1acb      	subs	r3, r1, r3
 8002604:	f240 1191 	movw	r1, #401	; 0x191
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	3364      	adds	r3, #100	; 0x64
 8002610:	607b      	str	r3, [r7, #4]
	return InternalCal;
 8002612:	687b      	ldr	r3, [r7, #4]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	28db9c69 	.word	0x28db9c69

08002620 <blinkLeds>:

void blinkLeds(){
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0

	if (delayRead(&delay_led1)) {
 8002624:	4809      	ldr	r0, [pc, #36]	; (800264c <blinkLeds+0x2c>)
 8002626:	f7fd ffcc 	bl	80005c2 <delayRead>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <blinkLeds+0x16>
		BSP_LED_Toggle(LED1);
 8002630:	2000      	movs	r0, #0
 8002632:	f7fe f9b1 	bl	8000998 <BSP_LED_Toggle>
	}
	if (delayRead(&delay_led2)) {
 8002636:	4806      	ldr	r0, [pc, #24]	; (8002650 <blinkLeds+0x30>)
 8002638:	f7fd ffc3 	bl	80005c2 <delayRead>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <blinkLeds+0x28>
		BSP_LED_Toggle(LED2);
 8002642:	2001      	movs	r0, #1
 8002644:	f7fe f9a8 	bl	8000998 <BSP_LED_Toggle>
	}

}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}
 800264c:	200000f8 	.word	0x200000f8
 8002650:	20000104 	.word	0x20000104

08002654 <main>:

int main(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0

	HAL_Init();
 8002658:	f7fe fb4e 	bl	8000cf8 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 800265c:	f000 f850 	bl	8002700 <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe f915 	bl	8000890 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8002666:	2001      	movs	r0, #1
 8002668:	f7fe f912 	bl	8000890 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 800266c:	2002      	movs	r0, #2
 800266e:	f7fe f90f 	bl	8000890 <BSP_LED_Init>

	BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8002672:	2100      	movs	r1, #0
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f9a9 	bl	80009cc <BSP_PB_Init>


	uartInit();
 800267a:	f7fe f8c1 	bl	8000800 <uartInit>

	delayInit(&delay_led1,calcDelayLed1);
 800267e:	4b1c      	ldr	r3, [pc, #112]	; (80026f0 <main+0x9c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	481b      	ldr	r0, [pc, #108]	; (80026f4 <main+0xa0>)
 8002686:	f7fd ff87 	bl	8000598 <delayInit>
	delayInit(&delay_led2,calcDelayLed2);
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <main+0xa4>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4619      	mov	r1, r3
 8002690:	481a      	ldr	r0, [pc, #104]	; (80026fc <main+0xa8>)
 8002692:	f7fd ff81 	bl	8000598 <delayInit>
	debounceFSM_init(DelayDebounce);
 8002696:	200a      	movs	r0, #10
 8002698:	f7fe f804 	bl	80006a4 <debounceFSM_init>

	srand(time(NULL));  // Seed to initialize random function, without it function timeIntervalCalc() will be return the same value.
 800269c:	2000      	movs	r0, #0
 800269e:	f000 fa4d 	bl	8002b3c <time>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 f8bb 	bl	8002824 <srand>

	while (1) {

		debounceFSM_update();
 80026ae:	f7fe f80d 	bl	80006cc <debounceFSM_update>

		if(readKey()){
 80026b2:	f7fe f885 	bl	80007c0 <readKey>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <main+0x94>

			calcDelayLed1 = timeIntervalCalc(); // new led1 delay
 80026bc:	f7ff ff96 	bl	80025ec <timeIntervalCalc>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4a0b      	ldr	r2, [pc, #44]	; (80026f0 <main+0x9c>)
 80026c4:	6013      	str	r3, [r2, #0]
			calcDelayLed2 = timeIntervalCalc(); // new led2 delay
 80026c6:	f7ff ff91 	bl	80025ec <timeIntervalCalc>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a0a      	ldr	r2, [pc, #40]	; (80026f8 <main+0xa4>)
 80026ce:	6013      	str	r3, [r2, #0]

			delayWrite(&delay_led1, calcDelayLed1);
 80026d0:	4b07      	ldr	r3, [pc, #28]	; (80026f0 <main+0x9c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4807      	ldr	r0, [pc, #28]	; (80026f4 <main+0xa0>)
 80026d8:	f7fd ffa4 	bl	8000624 <delayWrite>
			delayWrite(&delay_led2, calcDelayLed2);
 80026dc:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <main+0xa4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4806      	ldr	r0, [pc, #24]	; (80026fc <main+0xa8>)
 80026e4:	f7fd ff9e 	bl	8000624 <delayWrite>

		}

		blinkLeds();
 80026e8:	f7ff ff9a 	bl	8002620 <blinkLeds>
		debounceFSM_update();
 80026ec:	e7df      	b.n	80026ae <main+0x5a>
 80026ee:	bf00      	nop
 80026f0:	2000001c 	.word	0x2000001c
 80026f4:	200000f8 	.word	0x200000f8
 80026f8:	20000020 	.word	0x20000020
 80026fc:	20000104 	.word	0x20000104

08002700 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b094      	sub	sp, #80	; 0x50
 8002704:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b2c      	ldr	r3, [pc, #176]	; (80027bc <SystemClock_Config+0xbc>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	4a2b      	ldr	r2, [pc, #172]	; (80027bc <SystemClock_Config+0xbc>)
 8002710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002714:	6413      	str	r3, [r2, #64]	; 0x40
 8002716:	4b29      	ldr	r3, [pc, #164]	; (80027bc <SystemClock_Config+0xbc>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <SystemClock_Config+0xc0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <SystemClock_Config+0xc0>)
 800272c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <SystemClock_Config+0xc0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800273e:	2301      	movs	r3, #1
 8002740:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002742:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002746:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002748:	2302      	movs	r3, #2
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800274c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002750:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002752:	2308      	movs	r3, #8
 8002754:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8002756:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800275a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800275c:	2302      	movs	r3, #2
 800275e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8002760:	2307      	movs	r3, #7
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	4618      	mov	r0, r3
 800276a:	f7fe fee5 	bl	8001538 <HAL_RCC_OscConfig>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d001      	beq.n	8002778 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002774:	f000 f826 	bl	80027c4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002778:	f7fe fe8e 	bl	8001498 <HAL_PWREx_EnableOverDrive>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8002782:	f000 f81f 	bl	80027c4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002786:	230f      	movs	r3, #15
 8002788:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800278a:	2302      	movs	r3, #2
 800278c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002792:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800279e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a2:	2105      	movs	r1, #5
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff f93f 	bl	8001a28 <HAL_RCC_ClockConfig>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80027b0:	f000 f808 	bl	80027c4 <Error_Handler>
	}
}
 80027b4:	bf00      	nop
 80027b6:	3750      	adds	r7, #80	; 0x50
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40007000 	.word	0x40007000

080027c4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7fe f8b1 	bl	8000930 <BSP_LED_On>
	while (1)
 80027ce:	e7fe      	b.n	80027ce <Error_Handler+0xa>

080027d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002808 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027d6:	e003      	b.n	80027e0 <LoopCopyDataInit>

080027d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027de:	3104      	adds	r1, #4

080027e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027e8:	d3f6      	bcc.n	80027d8 <CopyDataInit>
  ldr  r2, =_sbss
 80027ea:	4a0b      	ldr	r2, [pc, #44]	; (8002818 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027ec:	e002      	b.n	80027f4 <LoopFillZerobss>

080027ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027f0:	f842 3b04 	str.w	r3, [r2], #4

080027f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027f8:	d3f9      	bcc.n	80027ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027fa:	f7fe f953 	bl	8000aa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fe:	f000 fa15 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002802:	f7ff ff27 	bl	8002654 <main>
  bx  lr    
 8002806:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002808:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800280c:	08003af8 	.word	0x08003af8
  ldr  r0, =_sdata
 8002810:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002814:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8002818:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800281c:	2000025c 	.word	0x2000025c

08002820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002820:	e7fe      	b.n	8002820 <ADC_IRQHandler>
	...

08002824 <srand>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4b10      	ldr	r3, [pc, #64]	; (8002868 <srand+0x44>)
 8002828:	681d      	ldr	r5, [r3, #0]
 800282a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800282c:	4604      	mov	r4, r0
 800282e:	b9b3      	cbnz	r3, 800285e <srand+0x3a>
 8002830:	2018      	movs	r0, #24
 8002832:	f000 fa8d 	bl	8002d50 <malloc>
 8002836:	4602      	mov	r2, r0
 8002838:	6328      	str	r0, [r5, #48]	; 0x30
 800283a:	b920      	cbnz	r0, 8002846 <srand+0x22>
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <srand+0x48>)
 800283e:	480c      	ldr	r0, [pc, #48]	; (8002870 <srand+0x4c>)
 8002840:	2146      	movs	r1, #70	; 0x46
 8002842:	f000 fa1b 	bl	8002c7c <__assert_func>
 8002846:	490b      	ldr	r1, [pc, #44]	; (8002874 <srand+0x50>)
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <srand+0x54>)
 800284a:	e9c0 1300 	strd	r1, r3, [r0]
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <srand+0x58>)
 8002850:	6083      	str	r3, [r0, #8]
 8002852:	230b      	movs	r3, #11
 8002854:	8183      	strh	r3, [r0, #12]
 8002856:	2100      	movs	r1, #0
 8002858:	2001      	movs	r0, #1
 800285a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800285e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002860:	2200      	movs	r2, #0
 8002862:	611c      	str	r4, [r3, #16]
 8002864:	615a      	str	r2, [r3, #20]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	2000007c 	.word	0x2000007c
 800286c:	08003a08 	.word	0x08003a08
 8002870:	08003a1f 	.word	0x08003a1f
 8002874:	abcd330e 	.word	0xabcd330e
 8002878:	e66d1234 	.word	0xe66d1234
 800287c:	0005deec 	.word	0x0005deec

08002880 <rand>:
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <rand+0x5c>)
 8002882:	b510      	push	{r4, lr}
 8002884:	681c      	ldr	r4, [r3, #0]
 8002886:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002888:	b9b3      	cbnz	r3, 80028b8 <rand+0x38>
 800288a:	2018      	movs	r0, #24
 800288c:	f000 fa60 	bl	8002d50 <malloc>
 8002890:	4602      	mov	r2, r0
 8002892:	6320      	str	r0, [r4, #48]	; 0x30
 8002894:	b920      	cbnz	r0, 80028a0 <rand+0x20>
 8002896:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <rand+0x60>)
 8002898:	4812      	ldr	r0, [pc, #72]	; (80028e4 <rand+0x64>)
 800289a:	2152      	movs	r1, #82	; 0x52
 800289c:	f000 f9ee 	bl	8002c7c <__assert_func>
 80028a0:	4911      	ldr	r1, [pc, #68]	; (80028e8 <rand+0x68>)
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <rand+0x6c>)
 80028a4:	e9c0 1300 	strd	r1, r3, [r0]
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <rand+0x70>)
 80028aa:	6083      	str	r3, [r0, #8]
 80028ac:	230b      	movs	r3, #11
 80028ae:	8183      	strh	r3, [r0, #12]
 80028b0:	2100      	movs	r1, #0
 80028b2:	2001      	movs	r0, #1
 80028b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80028b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80028ba:	480e      	ldr	r0, [pc, #56]	; (80028f4 <rand+0x74>)
 80028bc:	690b      	ldr	r3, [r1, #16]
 80028be:	694c      	ldr	r4, [r1, #20]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	; (80028f8 <rand+0x78>)
 80028c2:	4358      	muls	r0, r3
 80028c4:	fb02 0004 	mla	r0, r2, r4, r0
 80028c8:	fba3 3202 	umull	r3, r2, r3, r2
 80028cc:	3301      	adds	r3, #1
 80028ce:	eb40 0002 	adc.w	r0, r0, r2
 80028d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80028d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80028da:	bd10      	pop	{r4, pc}
 80028dc:	2000007c 	.word	0x2000007c
 80028e0:	08003a08 	.word	0x08003a08
 80028e4:	08003a1f 	.word	0x08003a1f
 80028e8:	abcd330e 	.word	0xabcd330e
 80028ec:	e66d1234 	.word	0xe66d1234
 80028f0:	0005deec 	.word	0x0005deec
 80028f4:	5851f42d 	.word	0x5851f42d
 80028f8:	4c957f2d 	.word	0x4c957f2d

080028fc <std>:
 80028fc:	2300      	movs	r3, #0
 80028fe:	b510      	push	{r4, lr}
 8002900:	4604      	mov	r4, r0
 8002902:	e9c0 3300 	strd	r3, r3, [r0]
 8002906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800290a:	6083      	str	r3, [r0, #8]
 800290c:	8181      	strh	r1, [r0, #12]
 800290e:	6643      	str	r3, [r0, #100]	; 0x64
 8002910:	81c2      	strh	r2, [r0, #14]
 8002912:	6183      	str	r3, [r0, #24]
 8002914:	4619      	mov	r1, r3
 8002916:	2208      	movs	r2, #8
 8002918:	305c      	adds	r0, #92	; 0x5c
 800291a:	f000 f906 	bl	8002b2a <memset>
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <std+0x58>)
 8002920:	6263      	str	r3, [r4, #36]	; 0x24
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <std+0x5c>)
 8002924:	62a3      	str	r3, [r4, #40]	; 0x28
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <std+0x60>)
 8002928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <std+0x64>)
 800292c:	6323      	str	r3, [r4, #48]	; 0x30
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <std+0x68>)
 8002930:	6224      	str	r4, [r4, #32]
 8002932:	429c      	cmp	r4, r3
 8002934:	d006      	beq.n	8002944 <std+0x48>
 8002936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800293a:	4294      	cmp	r4, r2
 800293c:	d002      	beq.n	8002944 <std+0x48>
 800293e:	33d0      	adds	r3, #208	; 0xd0
 8002940:	429c      	cmp	r4, r3
 8002942:	d105      	bne.n	8002950 <std+0x54>
 8002944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800294c:	f000 b992 	b.w	8002c74 <__retarget_lock_init_recursive>
 8002950:	bd10      	pop	{r4, pc}
 8002952:	bf00      	nop
 8002954:	08002aa5 	.word	0x08002aa5
 8002958:	08002ac7 	.word	0x08002ac7
 800295c:	08002aff 	.word	0x08002aff
 8002960:	08002b23 	.word	0x08002b23
 8002964:	20000110 	.word	0x20000110

08002968 <stdio_exit_handler>:
 8002968:	4a02      	ldr	r2, [pc, #8]	; (8002974 <stdio_exit_handler+0xc>)
 800296a:	4903      	ldr	r1, [pc, #12]	; (8002978 <stdio_exit_handler+0x10>)
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <stdio_exit_handler+0x14>)
 800296e:	f000 b869 	b.w	8002a44 <_fwalk_sglue>
 8002972:	bf00      	nop
 8002974:	20000024 	.word	0x20000024
 8002978:	0800356d 	.word	0x0800356d
 800297c:	20000030 	.word	0x20000030

08002980 <cleanup_stdio>:
 8002980:	6841      	ldr	r1, [r0, #4]
 8002982:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <cleanup_stdio+0x34>)
 8002984:	4299      	cmp	r1, r3
 8002986:	b510      	push	{r4, lr}
 8002988:	4604      	mov	r4, r0
 800298a:	d001      	beq.n	8002990 <cleanup_stdio+0x10>
 800298c:	f000 fdee 	bl	800356c <_fflush_r>
 8002990:	68a1      	ldr	r1, [r4, #8]
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <cleanup_stdio+0x38>)
 8002994:	4299      	cmp	r1, r3
 8002996:	d002      	beq.n	800299e <cleanup_stdio+0x1e>
 8002998:	4620      	mov	r0, r4
 800299a:	f000 fde7 	bl	800356c <_fflush_r>
 800299e:	68e1      	ldr	r1, [r4, #12]
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <cleanup_stdio+0x3c>)
 80029a2:	4299      	cmp	r1, r3
 80029a4:	d004      	beq.n	80029b0 <cleanup_stdio+0x30>
 80029a6:	4620      	mov	r0, r4
 80029a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ac:	f000 bdde 	b.w	800356c <_fflush_r>
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	bf00      	nop
 80029b4:	20000110 	.word	0x20000110
 80029b8:	20000178 	.word	0x20000178
 80029bc:	200001e0 	.word	0x200001e0

080029c0 <global_stdio_init.part.0>:
 80029c0:	b510      	push	{r4, lr}
 80029c2:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <global_stdio_init.part.0+0x30>)
 80029c4:	4c0b      	ldr	r4, [pc, #44]	; (80029f4 <global_stdio_init.part.0+0x34>)
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <global_stdio_init.part.0+0x38>)
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	4620      	mov	r0, r4
 80029cc:	2200      	movs	r2, #0
 80029ce:	2104      	movs	r1, #4
 80029d0:	f7ff ff94 	bl	80028fc <std>
 80029d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80029d8:	2201      	movs	r2, #1
 80029da:	2109      	movs	r1, #9
 80029dc:	f7ff ff8e 	bl	80028fc <std>
 80029e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80029e4:	2202      	movs	r2, #2
 80029e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029ea:	2112      	movs	r1, #18
 80029ec:	f7ff bf86 	b.w	80028fc <std>
 80029f0:	20000248 	.word	0x20000248
 80029f4:	20000110 	.word	0x20000110
 80029f8:	08002969 	.word	0x08002969

080029fc <__sfp_lock_acquire>:
 80029fc:	4801      	ldr	r0, [pc, #4]	; (8002a04 <__sfp_lock_acquire+0x8>)
 80029fe:	f000 b93a 	b.w	8002c76 <__retarget_lock_acquire_recursive>
 8002a02:	bf00      	nop
 8002a04:	20000251 	.word	0x20000251

08002a08 <__sfp_lock_release>:
 8002a08:	4801      	ldr	r0, [pc, #4]	; (8002a10 <__sfp_lock_release+0x8>)
 8002a0a:	f000 b935 	b.w	8002c78 <__retarget_lock_release_recursive>
 8002a0e:	bf00      	nop
 8002a10:	20000251 	.word	0x20000251

08002a14 <__sinit>:
 8002a14:	b510      	push	{r4, lr}
 8002a16:	4604      	mov	r4, r0
 8002a18:	f7ff fff0 	bl	80029fc <__sfp_lock_acquire>
 8002a1c:	6a23      	ldr	r3, [r4, #32]
 8002a1e:	b11b      	cbz	r3, 8002a28 <__sinit+0x14>
 8002a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a24:	f7ff bff0 	b.w	8002a08 <__sfp_lock_release>
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__sinit+0x28>)
 8002a2a:	6223      	str	r3, [r4, #32]
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <__sinit+0x2c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f5      	bne.n	8002a20 <__sinit+0xc>
 8002a34:	f7ff ffc4 	bl	80029c0 <global_stdio_init.part.0>
 8002a38:	e7f2      	b.n	8002a20 <__sinit+0xc>
 8002a3a:	bf00      	nop
 8002a3c:	08002981 	.word	0x08002981
 8002a40:	20000248 	.word	0x20000248

08002a44 <_fwalk_sglue>:
 8002a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a48:	4607      	mov	r7, r0
 8002a4a:	4688      	mov	r8, r1
 8002a4c:	4614      	mov	r4, r2
 8002a4e:	2600      	movs	r6, #0
 8002a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a54:	f1b9 0901 	subs.w	r9, r9, #1
 8002a58:	d505      	bpl.n	8002a66 <_fwalk_sglue+0x22>
 8002a5a:	6824      	ldr	r4, [r4, #0]
 8002a5c:	2c00      	cmp	r4, #0
 8002a5e:	d1f7      	bne.n	8002a50 <_fwalk_sglue+0xc>
 8002a60:	4630      	mov	r0, r6
 8002a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a66:	89ab      	ldrh	r3, [r5, #12]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d907      	bls.n	8002a7c <_fwalk_sglue+0x38>
 8002a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a70:	3301      	adds	r3, #1
 8002a72:	d003      	beq.n	8002a7c <_fwalk_sglue+0x38>
 8002a74:	4629      	mov	r1, r5
 8002a76:	4638      	mov	r0, r7
 8002a78:	47c0      	blx	r8
 8002a7a:	4306      	orrs	r6, r0
 8002a7c:	3568      	adds	r5, #104	; 0x68
 8002a7e:	e7e9      	b.n	8002a54 <_fwalk_sglue+0x10>

08002a80 <iprintf>:
 8002a80:	b40f      	push	{r0, r1, r2, r3}
 8002a82:	b507      	push	{r0, r1, r2, lr}
 8002a84:	4906      	ldr	r1, [pc, #24]	; (8002aa0 <iprintf+0x20>)
 8002a86:	ab04      	add	r3, sp, #16
 8002a88:	6808      	ldr	r0, [r1, #0]
 8002a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a8e:	6881      	ldr	r1, [r0, #8]
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	f000 fa3b 	bl	8002f0c <_vfiprintf_r>
 8002a96:	b003      	add	sp, #12
 8002a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a9c:	b004      	add	sp, #16
 8002a9e:	4770      	bx	lr
 8002aa0:	2000007c 	.word	0x2000007c

08002aa4 <__sread>:
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	460c      	mov	r4, r1
 8002aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aac:	f000 f894 	bl	8002bd8 <_read_r>
 8002ab0:	2800      	cmp	r0, #0
 8002ab2:	bfab      	itete	ge
 8002ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ab8:	181b      	addge	r3, r3, r0
 8002aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002abe:	bfac      	ite	ge
 8002ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ac2:	81a3      	strhlt	r3, [r4, #12]
 8002ac4:	bd10      	pop	{r4, pc}

08002ac6 <__swrite>:
 8002ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aca:	461f      	mov	r7, r3
 8002acc:	898b      	ldrh	r3, [r1, #12]
 8002ace:	05db      	lsls	r3, r3, #23
 8002ad0:	4605      	mov	r5, r0
 8002ad2:	460c      	mov	r4, r1
 8002ad4:	4616      	mov	r6, r2
 8002ad6:	d505      	bpl.n	8002ae4 <__swrite+0x1e>
 8002ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002adc:	2302      	movs	r3, #2
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f000 f868 	bl	8002bb4 <_lseek_r>
 8002ae4:	89a3      	ldrh	r3, [r4, #12]
 8002ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	4632      	mov	r2, r6
 8002af2:	463b      	mov	r3, r7
 8002af4:	4628      	mov	r0, r5
 8002af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002afa:	f000 b87f 	b.w	8002bfc <_write_r>

08002afe <__sseek>:
 8002afe:	b510      	push	{r4, lr}
 8002b00:	460c      	mov	r4, r1
 8002b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b06:	f000 f855 	bl	8002bb4 <_lseek_r>
 8002b0a:	1c43      	adds	r3, r0, #1
 8002b0c:	89a3      	ldrh	r3, [r4, #12]
 8002b0e:	bf15      	itete	ne
 8002b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b1a:	81a3      	strheq	r3, [r4, #12]
 8002b1c:	bf18      	it	ne
 8002b1e:	81a3      	strhne	r3, [r4, #12]
 8002b20:	bd10      	pop	{r4, pc}

08002b22 <__sclose>:
 8002b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b26:	f000 b823 	b.w	8002b70 <_close_r>

08002b2a <memset>:
 8002b2a:	4402      	add	r2, r0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d100      	bne.n	8002b34 <memset+0xa>
 8002b32:	4770      	bx	lr
 8002b34:	f803 1b01 	strb.w	r1, [r3], #1
 8002b38:	e7f9      	b.n	8002b2e <memset+0x4>
	...

08002b3c <time>:
 8002b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <time+0x30>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	4669      	mov	r1, sp
 8002b44:	4604      	mov	r4, r0
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	f000 f822 	bl	8002b90 <_gettimeofday_r>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	bfbe      	ittt	lt
 8002b50:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002b54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b58:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002b5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002b60:	b10c      	cbz	r4, 8002b66 <time+0x2a>
 8002b62:	e9c4 0100 	strd	r0, r1, [r4]
 8002b66:	b004      	add	sp, #16
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000007c 	.word	0x2000007c

08002b70 <_close_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_close_r+0x1c>)
 8002b74:	2300      	movs	r3, #0
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	f7fe f851 	bl	8000c22 <_close>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_close_r+0x1a>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_close_r+0x1a>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	2000024c 	.word	0x2000024c

08002b90 <_gettimeofday_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d07      	ldr	r5, [pc, #28]	; (8002bb0 <_gettimeofday_r+0x20>)
 8002b94:	2300      	movs	r3, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	f000 fe95 	bl	80038cc <_gettimeofday>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	d102      	bne.n	8002bac <_gettimeofday_r+0x1c>
 8002ba6:	682b      	ldr	r3, [r5, #0]
 8002ba8:	b103      	cbz	r3, 8002bac <_gettimeofday_r+0x1c>
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000024c 	.word	0x2000024c

08002bb4 <_lseek_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4d07      	ldr	r5, [pc, #28]	; (8002bd4 <_lseek_r+0x20>)
 8002bb8:	4604      	mov	r4, r0
 8002bba:	4608      	mov	r0, r1
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	602a      	str	r2, [r5, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	f7fe f854 	bl	8000c70 <_lseek>
 8002bc8:	1c43      	adds	r3, r0, #1
 8002bca:	d102      	bne.n	8002bd2 <_lseek_r+0x1e>
 8002bcc:	682b      	ldr	r3, [r5, #0]
 8002bce:	b103      	cbz	r3, 8002bd2 <_lseek_r+0x1e>
 8002bd0:	6023      	str	r3, [r4, #0]
 8002bd2:	bd38      	pop	{r3, r4, r5, pc}
 8002bd4:	2000024c 	.word	0x2000024c

08002bd8 <_read_r>:
 8002bd8:	b538      	push	{r3, r4, r5, lr}
 8002bda:	4d07      	ldr	r5, [pc, #28]	; (8002bf8 <_read_r+0x20>)
 8002bdc:	4604      	mov	r4, r0
 8002bde:	4608      	mov	r0, r1
 8002be0:	4611      	mov	r1, r2
 8002be2:	2200      	movs	r2, #0
 8002be4:	602a      	str	r2, [r5, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	f7fd ffe2 	bl	8000bb0 <_read>
 8002bec:	1c43      	adds	r3, r0, #1
 8002bee:	d102      	bne.n	8002bf6 <_read_r+0x1e>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	b103      	cbz	r3, 8002bf6 <_read_r+0x1e>
 8002bf4:	6023      	str	r3, [r4, #0]
 8002bf6:	bd38      	pop	{r3, r4, r5, pc}
 8002bf8:	2000024c 	.word	0x2000024c

08002bfc <_write_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4d07      	ldr	r5, [pc, #28]	; (8002c1c <_write_r+0x20>)
 8002c00:	4604      	mov	r4, r0
 8002c02:	4608      	mov	r0, r1
 8002c04:	4611      	mov	r1, r2
 8002c06:	2200      	movs	r2, #0
 8002c08:	602a      	str	r2, [r5, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7fd ffed 	bl	8000bea <_write>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d102      	bne.n	8002c1a <_write_r+0x1e>
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	b103      	cbz	r3, 8002c1a <_write_r+0x1e>
 8002c18:	6023      	str	r3, [r4, #0]
 8002c1a:	bd38      	pop	{r3, r4, r5, pc}
 8002c1c:	2000024c 	.word	0x2000024c

08002c20 <__errno>:
 8002c20:	4b01      	ldr	r3, [pc, #4]	; (8002c28 <__errno+0x8>)
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000007c 	.word	0x2000007c

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4d0d      	ldr	r5, [pc, #52]	; (8002c64 <__libc_init_array+0x38>)
 8002c30:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c32:	1b64      	subs	r4, r4, r5
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	2600      	movs	r6, #0
 8002c38:	42a6      	cmp	r6, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	4d0b      	ldr	r5, [pc, #44]	; (8002c6c <__libc_init_array+0x40>)
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__libc_init_array+0x44>)
 8002c40:	f000 fe4c 	bl	80038dc <_init>
 8002c44:	1b64      	subs	r4, r4, r5
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	2600      	movs	r6, #0
 8002c4a:	42a6      	cmp	r6, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c54:	4798      	blx	r3
 8002c56:	3601      	adds	r6, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5e:	4798      	blx	r3
 8002c60:	3601      	adds	r6, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003af0 	.word	0x08003af0
 8002c68:	08003af0 	.word	0x08003af0
 8002c6c:	08003af0 	.word	0x08003af0
 8002c70:	08003af4 	.word	0x08003af4

08002c74 <__retarget_lock_init_recursive>:
 8002c74:	4770      	bx	lr

08002c76 <__retarget_lock_acquire_recursive>:
 8002c76:	4770      	bx	lr

08002c78 <__retarget_lock_release_recursive>:
 8002c78:	4770      	bx	lr
	...

08002c7c <__assert_func>:
 8002c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c7e:	4614      	mov	r4, r2
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <__assert_func+0x2c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4605      	mov	r5, r0
 8002c88:	68d8      	ldr	r0, [r3, #12]
 8002c8a:	b14c      	cbz	r4, 8002ca0 <__assert_func+0x24>
 8002c8c:	4b07      	ldr	r3, [pc, #28]	; (8002cac <__assert_func+0x30>)
 8002c8e:	9100      	str	r1, [sp, #0]
 8002c90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002c94:	4906      	ldr	r1, [pc, #24]	; (8002cb0 <__assert_func+0x34>)
 8002c96:	462b      	mov	r3, r5
 8002c98:	f000 fc90 	bl	80035bc <fiprintf>
 8002c9c:	f000 fd46 	bl	800372c <abort>
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__assert_func+0x38>)
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	e7f3      	b.n	8002c8e <__assert_func+0x12>
 8002ca6:	bf00      	nop
 8002ca8:	2000007c 	.word	0x2000007c
 8002cac:	08003a77 	.word	0x08003a77
 8002cb0:	08003a84 	.word	0x08003a84
 8002cb4:	08003ab2 	.word	0x08003ab2

08002cb8 <_free_r>:
 8002cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002cba:	2900      	cmp	r1, #0
 8002cbc:	d044      	beq.n	8002d48 <_free_r+0x90>
 8002cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cc2:	9001      	str	r0, [sp, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8002cca:	bfb8      	it	lt
 8002ccc:	18e4      	addlt	r4, r4, r3
 8002cce:	f000 f8e7 	bl	8002ea0 <__malloc_lock>
 8002cd2:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <_free_r+0x94>)
 8002cd4:	9801      	ldr	r0, [sp, #4]
 8002cd6:	6813      	ldr	r3, [r2, #0]
 8002cd8:	b933      	cbnz	r3, 8002ce8 <_free_r+0x30>
 8002cda:	6063      	str	r3, [r4, #4]
 8002cdc:	6014      	str	r4, [r2, #0]
 8002cde:	b003      	add	sp, #12
 8002ce0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ce4:	f000 b8e2 	b.w	8002eac <__malloc_unlock>
 8002ce8:	42a3      	cmp	r3, r4
 8002cea:	d908      	bls.n	8002cfe <_free_r+0x46>
 8002cec:	6825      	ldr	r5, [r4, #0]
 8002cee:	1961      	adds	r1, r4, r5
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	bf01      	itttt	eq
 8002cf4:	6819      	ldreq	r1, [r3, #0]
 8002cf6:	685b      	ldreq	r3, [r3, #4]
 8002cf8:	1949      	addeq	r1, r1, r5
 8002cfa:	6021      	streq	r1, [r4, #0]
 8002cfc:	e7ed      	b.n	8002cda <_free_r+0x22>
 8002cfe:	461a      	mov	r2, r3
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	b10b      	cbz	r3, 8002d08 <_free_r+0x50>
 8002d04:	42a3      	cmp	r3, r4
 8002d06:	d9fa      	bls.n	8002cfe <_free_r+0x46>
 8002d08:	6811      	ldr	r1, [r2, #0]
 8002d0a:	1855      	adds	r5, r2, r1
 8002d0c:	42a5      	cmp	r5, r4
 8002d0e:	d10b      	bne.n	8002d28 <_free_r+0x70>
 8002d10:	6824      	ldr	r4, [r4, #0]
 8002d12:	4421      	add	r1, r4
 8002d14:	1854      	adds	r4, r2, r1
 8002d16:	42a3      	cmp	r3, r4
 8002d18:	6011      	str	r1, [r2, #0]
 8002d1a:	d1e0      	bne.n	8002cde <_free_r+0x26>
 8002d1c:	681c      	ldr	r4, [r3, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	6053      	str	r3, [r2, #4]
 8002d22:	440c      	add	r4, r1
 8002d24:	6014      	str	r4, [r2, #0]
 8002d26:	e7da      	b.n	8002cde <_free_r+0x26>
 8002d28:	d902      	bls.n	8002d30 <_free_r+0x78>
 8002d2a:	230c      	movs	r3, #12
 8002d2c:	6003      	str	r3, [r0, #0]
 8002d2e:	e7d6      	b.n	8002cde <_free_r+0x26>
 8002d30:	6825      	ldr	r5, [r4, #0]
 8002d32:	1961      	adds	r1, r4, r5
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf04      	itt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	6063      	str	r3, [r4, #4]
 8002d3e:	bf04      	itt	eq
 8002d40:	1949      	addeq	r1, r1, r5
 8002d42:	6021      	streq	r1, [r4, #0]
 8002d44:	6054      	str	r4, [r2, #4]
 8002d46:	e7ca      	b.n	8002cde <_free_r+0x26>
 8002d48:	b003      	add	sp, #12
 8002d4a:	bd30      	pop	{r4, r5, pc}
 8002d4c:	20000254 	.word	0x20000254

08002d50 <malloc>:
 8002d50:	4b02      	ldr	r3, [pc, #8]	; (8002d5c <malloc+0xc>)
 8002d52:	4601      	mov	r1, r0
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	f000 b823 	b.w	8002da0 <_malloc_r>
 8002d5a:	bf00      	nop
 8002d5c:	2000007c 	.word	0x2000007c

08002d60 <sbrk_aligned>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	4e0e      	ldr	r6, [pc, #56]	; (8002d9c <sbrk_aligned+0x3c>)
 8002d64:	460c      	mov	r4, r1
 8002d66:	6831      	ldr	r1, [r6, #0]
 8002d68:	4605      	mov	r5, r0
 8002d6a:	b911      	cbnz	r1, 8002d72 <sbrk_aligned+0x12>
 8002d6c:	f000 fcce 	bl	800370c <_sbrk_r>
 8002d70:	6030      	str	r0, [r6, #0]
 8002d72:	4621      	mov	r1, r4
 8002d74:	4628      	mov	r0, r5
 8002d76:	f000 fcc9 	bl	800370c <_sbrk_r>
 8002d7a:	1c43      	adds	r3, r0, #1
 8002d7c:	d00a      	beq.n	8002d94 <sbrk_aligned+0x34>
 8002d7e:	1cc4      	adds	r4, r0, #3
 8002d80:	f024 0403 	bic.w	r4, r4, #3
 8002d84:	42a0      	cmp	r0, r4
 8002d86:	d007      	beq.n	8002d98 <sbrk_aligned+0x38>
 8002d88:	1a21      	subs	r1, r4, r0
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 fcbe 	bl	800370c <_sbrk_r>
 8002d90:	3001      	adds	r0, #1
 8002d92:	d101      	bne.n	8002d98 <sbrk_aligned+0x38>
 8002d94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d98:	4620      	mov	r0, r4
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	20000258 	.word	0x20000258

08002da0 <_malloc_r>:
 8002da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002da4:	1ccd      	adds	r5, r1, #3
 8002da6:	f025 0503 	bic.w	r5, r5, #3
 8002daa:	3508      	adds	r5, #8
 8002dac:	2d0c      	cmp	r5, #12
 8002dae:	bf38      	it	cc
 8002db0:	250c      	movcc	r5, #12
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	4607      	mov	r7, r0
 8002db6:	db01      	blt.n	8002dbc <_malloc_r+0x1c>
 8002db8:	42a9      	cmp	r1, r5
 8002dba:	d905      	bls.n	8002dc8 <_malloc_r+0x28>
 8002dbc:	230c      	movs	r3, #12
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	2600      	movs	r6, #0
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dc8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e9c <_malloc_r+0xfc>
 8002dcc:	f000 f868 	bl	8002ea0 <__malloc_lock>
 8002dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	bb5c      	cbnz	r4, 8002e30 <_malloc_r+0x90>
 8002dd8:	4629      	mov	r1, r5
 8002dda:	4638      	mov	r0, r7
 8002ddc:	f7ff ffc0 	bl	8002d60 <sbrk_aligned>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	4604      	mov	r4, r0
 8002de4:	d155      	bne.n	8002e92 <_malloc_r+0xf2>
 8002de6:	f8d8 4000 	ldr.w	r4, [r8]
 8002dea:	4626      	mov	r6, r4
 8002dec:	2e00      	cmp	r6, #0
 8002dee:	d145      	bne.n	8002e7c <_malloc_r+0xdc>
 8002df0:	2c00      	cmp	r4, #0
 8002df2:	d048      	beq.n	8002e86 <_malloc_r+0xe6>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	4631      	mov	r1, r6
 8002df8:	4638      	mov	r0, r7
 8002dfa:	eb04 0903 	add.w	r9, r4, r3
 8002dfe:	f000 fc85 	bl	800370c <_sbrk_r>
 8002e02:	4581      	cmp	r9, r0
 8002e04:	d13f      	bne.n	8002e86 <_malloc_r+0xe6>
 8002e06:	6821      	ldr	r1, [r4, #0]
 8002e08:	1a6d      	subs	r5, r5, r1
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4638      	mov	r0, r7
 8002e0e:	f7ff ffa7 	bl	8002d60 <sbrk_aligned>
 8002e12:	3001      	adds	r0, #1
 8002e14:	d037      	beq.n	8002e86 <_malloc_r+0xe6>
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	442b      	add	r3, r5
 8002e1a:	6023      	str	r3, [r4, #0]
 8002e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d038      	beq.n	8002e96 <_malloc_r+0xf6>
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	42a2      	cmp	r2, r4
 8002e28:	d12b      	bne.n	8002e82 <_malloc_r+0xe2>
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	605a      	str	r2, [r3, #4]
 8002e2e:	e00f      	b.n	8002e50 <_malloc_r+0xb0>
 8002e30:	6822      	ldr	r2, [r4, #0]
 8002e32:	1b52      	subs	r2, r2, r5
 8002e34:	d41f      	bmi.n	8002e76 <_malloc_r+0xd6>
 8002e36:	2a0b      	cmp	r2, #11
 8002e38:	d917      	bls.n	8002e6a <_malloc_r+0xca>
 8002e3a:	1961      	adds	r1, r4, r5
 8002e3c:	42a3      	cmp	r3, r4
 8002e3e:	6025      	str	r5, [r4, #0]
 8002e40:	bf18      	it	ne
 8002e42:	6059      	strne	r1, [r3, #4]
 8002e44:	6863      	ldr	r3, [r4, #4]
 8002e46:	bf08      	it	eq
 8002e48:	f8c8 1000 	streq.w	r1, [r8]
 8002e4c:	5162      	str	r2, [r4, r5]
 8002e4e:	604b      	str	r3, [r1, #4]
 8002e50:	4638      	mov	r0, r7
 8002e52:	f104 060b 	add.w	r6, r4, #11
 8002e56:	f000 f829 	bl	8002eac <__malloc_unlock>
 8002e5a:	f026 0607 	bic.w	r6, r6, #7
 8002e5e:	1d23      	adds	r3, r4, #4
 8002e60:	1af2      	subs	r2, r6, r3
 8002e62:	d0ae      	beq.n	8002dc2 <_malloc_r+0x22>
 8002e64:	1b9b      	subs	r3, r3, r6
 8002e66:	50a3      	str	r3, [r4, r2]
 8002e68:	e7ab      	b.n	8002dc2 <_malloc_r+0x22>
 8002e6a:	42a3      	cmp	r3, r4
 8002e6c:	6862      	ldr	r2, [r4, #4]
 8002e6e:	d1dd      	bne.n	8002e2c <_malloc_r+0x8c>
 8002e70:	f8c8 2000 	str.w	r2, [r8]
 8002e74:	e7ec      	b.n	8002e50 <_malloc_r+0xb0>
 8002e76:	4623      	mov	r3, r4
 8002e78:	6864      	ldr	r4, [r4, #4]
 8002e7a:	e7ac      	b.n	8002dd6 <_malloc_r+0x36>
 8002e7c:	4634      	mov	r4, r6
 8002e7e:	6876      	ldr	r6, [r6, #4]
 8002e80:	e7b4      	b.n	8002dec <_malloc_r+0x4c>
 8002e82:	4613      	mov	r3, r2
 8002e84:	e7cc      	b.n	8002e20 <_malloc_r+0x80>
 8002e86:	230c      	movs	r3, #12
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	4638      	mov	r0, r7
 8002e8c:	f000 f80e 	bl	8002eac <__malloc_unlock>
 8002e90:	e797      	b.n	8002dc2 <_malloc_r+0x22>
 8002e92:	6025      	str	r5, [r4, #0]
 8002e94:	e7dc      	b.n	8002e50 <_malloc_r+0xb0>
 8002e96:	605b      	str	r3, [r3, #4]
 8002e98:	deff      	udf	#255	; 0xff
 8002e9a:	bf00      	nop
 8002e9c:	20000254 	.word	0x20000254

08002ea0 <__malloc_lock>:
 8002ea0:	4801      	ldr	r0, [pc, #4]	; (8002ea8 <__malloc_lock+0x8>)
 8002ea2:	f7ff bee8 	b.w	8002c76 <__retarget_lock_acquire_recursive>
 8002ea6:	bf00      	nop
 8002ea8:	20000250 	.word	0x20000250

08002eac <__malloc_unlock>:
 8002eac:	4801      	ldr	r0, [pc, #4]	; (8002eb4 <__malloc_unlock+0x8>)
 8002eae:	f7ff bee3 	b.w	8002c78 <__retarget_lock_release_recursive>
 8002eb2:	bf00      	nop
 8002eb4:	20000250 	.word	0x20000250

08002eb8 <__sfputc_r>:
 8002eb8:	6893      	ldr	r3, [r2, #8]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	b410      	push	{r4}
 8002ec0:	6093      	str	r3, [r2, #8]
 8002ec2:	da08      	bge.n	8002ed6 <__sfputc_r+0x1e>
 8002ec4:	6994      	ldr	r4, [r2, #24]
 8002ec6:	42a3      	cmp	r3, r4
 8002ec8:	db01      	blt.n	8002ece <__sfputc_r+0x16>
 8002eca:	290a      	cmp	r1, #10
 8002ecc:	d103      	bne.n	8002ed6 <__sfputc_r+0x1e>
 8002ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ed2:	f000 bb85 	b.w	80035e0 <__swbuf_r>
 8002ed6:	6813      	ldr	r3, [r2, #0]
 8002ed8:	1c58      	adds	r0, r3, #1
 8002eda:	6010      	str	r0, [r2, #0]
 8002edc:	7019      	strb	r1, [r3, #0]
 8002ede:	4608      	mov	r0, r1
 8002ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <__sfputs_r>:
 8002ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee8:	4606      	mov	r6, r0
 8002eea:	460f      	mov	r7, r1
 8002eec:	4614      	mov	r4, r2
 8002eee:	18d5      	adds	r5, r2, r3
 8002ef0:	42ac      	cmp	r4, r5
 8002ef2:	d101      	bne.n	8002ef8 <__sfputs_r+0x12>
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	e007      	b.n	8002f08 <__sfputs_r+0x22>
 8002ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002efc:	463a      	mov	r2, r7
 8002efe:	4630      	mov	r0, r6
 8002f00:	f7ff ffda 	bl	8002eb8 <__sfputc_r>
 8002f04:	1c43      	adds	r3, r0, #1
 8002f06:	d1f3      	bne.n	8002ef0 <__sfputs_r+0xa>
 8002f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002f0c <_vfiprintf_r>:
 8002f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f10:	460d      	mov	r5, r1
 8002f12:	b09d      	sub	sp, #116	; 0x74
 8002f14:	4614      	mov	r4, r2
 8002f16:	4698      	mov	r8, r3
 8002f18:	4606      	mov	r6, r0
 8002f1a:	b118      	cbz	r0, 8002f24 <_vfiprintf_r+0x18>
 8002f1c:	6a03      	ldr	r3, [r0, #32]
 8002f1e:	b90b      	cbnz	r3, 8002f24 <_vfiprintf_r+0x18>
 8002f20:	f7ff fd78 	bl	8002a14 <__sinit>
 8002f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f26:	07d9      	lsls	r1, r3, #31
 8002f28:	d405      	bmi.n	8002f36 <_vfiprintf_r+0x2a>
 8002f2a:	89ab      	ldrh	r3, [r5, #12]
 8002f2c:	059a      	lsls	r2, r3, #22
 8002f2e:	d402      	bmi.n	8002f36 <_vfiprintf_r+0x2a>
 8002f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f32:	f7ff fea0 	bl	8002c76 <__retarget_lock_acquire_recursive>
 8002f36:	89ab      	ldrh	r3, [r5, #12]
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	d501      	bpl.n	8002f40 <_vfiprintf_r+0x34>
 8002f3c:	692b      	ldr	r3, [r5, #16]
 8002f3e:	b99b      	cbnz	r3, 8002f68 <_vfiprintf_r+0x5c>
 8002f40:	4629      	mov	r1, r5
 8002f42:	4630      	mov	r0, r6
 8002f44:	f000 fb8a 	bl	800365c <__swsetup_r>
 8002f48:	b170      	cbz	r0, 8002f68 <_vfiprintf_r+0x5c>
 8002f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f4c:	07dc      	lsls	r4, r3, #31
 8002f4e:	d504      	bpl.n	8002f5a <_vfiprintf_r+0x4e>
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f54:	b01d      	add	sp, #116	; 0x74
 8002f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f5a:	89ab      	ldrh	r3, [r5, #12]
 8002f5c:	0598      	lsls	r0, r3, #22
 8002f5e:	d4f7      	bmi.n	8002f50 <_vfiprintf_r+0x44>
 8002f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f62:	f7ff fe89 	bl	8002c78 <__retarget_lock_release_recursive>
 8002f66:	e7f3      	b.n	8002f50 <_vfiprintf_r+0x44>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8002f6c:	2320      	movs	r3, #32
 8002f6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f76:	2330      	movs	r3, #48	; 0x30
 8002f78:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800312c <_vfiprintf_r+0x220>
 8002f7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f80:	f04f 0901 	mov.w	r9, #1
 8002f84:	4623      	mov	r3, r4
 8002f86:	469a      	mov	sl, r3
 8002f88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f8c:	b10a      	cbz	r2, 8002f92 <_vfiprintf_r+0x86>
 8002f8e:	2a25      	cmp	r2, #37	; 0x25
 8002f90:	d1f9      	bne.n	8002f86 <_vfiprintf_r+0x7a>
 8002f92:	ebba 0b04 	subs.w	fp, sl, r4
 8002f96:	d00b      	beq.n	8002fb0 <_vfiprintf_r+0xa4>
 8002f98:	465b      	mov	r3, fp
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f7ff ffa1 	bl	8002ee6 <__sfputs_r>
 8002fa4:	3001      	adds	r0, #1
 8002fa6:	f000 80a9 	beq.w	80030fc <_vfiprintf_r+0x1f0>
 8002faa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002fac:	445a      	add	r2, fp
 8002fae:	9209      	str	r2, [sp, #36]	; 0x24
 8002fb0:	f89a 3000 	ldrb.w	r3, [sl]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a1 	beq.w	80030fc <_vfiprintf_r+0x1f0>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fc4:	f10a 0a01 	add.w	sl, sl, #1
 8002fc8:	9304      	str	r3, [sp, #16]
 8002fca:	9307      	str	r3, [sp, #28]
 8002fcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fd0:	931a      	str	r3, [sp, #104]	; 0x68
 8002fd2:	4654      	mov	r4, sl
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fda:	4854      	ldr	r0, [pc, #336]	; (800312c <_vfiprintf_r+0x220>)
 8002fdc:	f7fd f908 	bl	80001f0 <memchr>
 8002fe0:	9a04      	ldr	r2, [sp, #16]
 8002fe2:	b9d8      	cbnz	r0, 800301c <_vfiprintf_r+0x110>
 8002fe4:	06d1      	lsls	r1, r2, #27
 8002fe6:	bf44      	itt	mi
 8002fe8:	2320      	movmi	r3, #32
 8002fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fee:	0713      	lsls	r3, r2, #28
 8002ff0:	bf44      	itt	mi
 8002ff2:	232b      	movmi	r3, #43	; 0x2b
 8002ff4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8002ffc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ffe:	d015      	beq.n	800302c <_vfiprintf_r+0x120>
 8003000:	9a07      	ldr	r2, [sp, #28]
 8003002:	4654      	mov	r4, sl
 8003004:	2000      	movs	r0, #0
 8003006:	f04f 0c0a 	mov.w	ip, #10
 800300a:	4621      	mov	r1, r4
 800300c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003010:	3b30      	subs	r3, #48	; 0x30
 8003012:	2b09      	cmp	r3, #9
 8003014:	d94d      	bls.n	80030b2 <_vfiprintf_r+0x1a6>
 8003016:	b1b0      	cbz	r0, 8003046 <_vfiprintf_r+0x13a>
 8003018:	9207      	str	r2, [sp, #28]
 800301a:	e014      	b.n	8003046 <_vfiprintf_r+0x13a>
 800301c:	eba0 0308 	sub.w	r3, r0, r8
 8003020:	fa09 f303 	lsl.w	r3, r9, r3
 8003024:	4313      	orrs	r3, r2
 8003026:	9304      	str	r3, [sp, #16]
 8003028:	46a2      	mov	sl, r4
 800302a:	e7d2      	b.n	8002fd2 <_vfiprintf_r+0xc6>
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	1d19      	adds	r1, r3, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	9103      	str	r1, [sp, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	bfbb      	ittet	lt
 8003038:	425b      	neglt	r3, r3
 800303a:	f042 0202 	orrlt.w	r2, r2, #2
 800303e:	9307      	strge	r3, [sp, #28]
 8003040:	9307      	strlt	r3, [sp, #28]
 8003042:	bfb8      	it	lt
 8003044:	9204      	strlt	r2, [sp, #16]
 8003046:	7823      	ldrb	r3, [r4, #0]
 8003048:	2b2e      	cmp	r3, #46	; 0x2e
 800304a:	d10c      	bne.n	8003066 <_vfiprintf_r+0x15a>
 800304c:	7863      	ldrb	r3, [r4, #1]
 800304e:	2b2a      	cmp	r3, #42	; 0x2a
 8003050:	d134      	bne.n	80030bc <_vfiprintf_r+0x1b0>
 8003052:	9b03      	ldr	r3, [sp, #12]
 8003054:	1d1a      	adds	r2, r3, #4
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	9203      	str	r2, [sp, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	bfb8      	it	lt
 800305e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003062:	3402      	adds	r4, #2
 8003064:	9305      	str	r3, [sp, #20]
 8003066:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800313c <_vfiprintf_r+0x230>
 800306a:	7821      	ldrb	r1, [r4, #0]
 800306c:	2203      	movs	r2, #3
 800306e:	4650      	mov	r0, sl
 8003070:	f7fd f8be 	bl	80001f0 <memchr>
 8003074:	b138      	cbz	r0, 8003086 <_vfiprintf_r+0x17a>
 8003076:	9b04      	ldr	r3, [sp, #16]
 8003078:	eba0 000a 	sub.w	r0, r0, sl
 800307c:	2240      	movs	r2, #64	; 0x40
 800307e:	4082      	lsls	r2, r0
 8003080:	4313      	orrs	r3, r2
 8003082:	3401      	adds	r4, #1
 8003084:	9304      	str	r3, [sp, #16]
 8003086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800308a:	4829      	ldr	r0, [pc, #164]	; (8003130 <_vfiprintf_r+0x224>)
 800308c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003090:	2206      	movs	r2, #6
 8003092:	f7fd f8ad 	bl	80001f0 <memchr>
 8003096:	2800      	cmp	r0, #0
 8003098:	d03f      	beq.n	800311a <_vfiprintf_r+0x20e>
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <_vfiprintf_r+0x228>)
 800309c:	bb1b      	cbnz	r3, 80030e6 <_vfiprintf_r+0x1da>
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	3307      	adds	r3, #7
 80030a2:	f023 0307 	bic.w	r3, r3, #7
 80030a6:	3308      	adds	r3, #8
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ac:	443b      	add	r3, r7
 80030ae:	9309      	str	r3, [sp, #36]	; 0x24
 80030b0:	e768      	b.n	8002f84 <_vfiprintf_r+0x78>
 80030b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80030b6:	460c      	mov	r4, r1
 80030b8:	2001      	movs	r0, #1
 80030ba:	e7a6      	b.n	800300a <_vfiprintf_r+0xfe>
 80030bc:	2300      	movs	r3, #0
 80030be:	3401      	adds	r4, #1
 80030c0:	9305      	str	r3, [sp, #20]
 80030c2:	4619      	mov	r1, r3
 80030c4:	f04f 0c0a 	mov.w	ip, #10
 80030c8:	4620      	mov	r0, r4
 80030ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030ce:	3a30      	subs	r2, #48	; 0x30
 80030d0:	2a09      	cmp	r2, #9
 80030d2:	d903      	bls.n	80030dc <_vfiprintf_r+0x1d0>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0c6      	beq.n	8003066 <_vfiprintf_r+0x15a>
 80030d8:	9105      	str	r1, [sp, #20]
 80030da:	e7c4      	b.n	8003066 <_vfiprintf_r+0x15a>
 80030dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80030e0:	4604      	mov	r4, r0
 80030e2:	2301      	movs	r3, #1
 80030e4:	e7f0      	b.n	80030c8 <_vfiprintf_r+0x1bc>
 80030e6:	ab03      	add	r3, sp, #12
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	462a      	mov	r2, r5
 80030ec:	4b12      	ldr	r3, [pc, #72]	; (8003138 <_vfiprintf_r+0x22c>)
 80030ee:	a904      	add	r1, sp, #16
 80030f0:	4630      	mov	r0, r6
 80030f2:	f3af 8000 	nop.w
 80030f6:	4607      	mov	r7, r0
 80030f8:	1c78      	adds	r0, r7, #1
 80030fa:	d1d6      	bne.n	80030aa <_vfiprintf_r+0x19e>
 80030fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80030fe:	07d9      	lsls	r1, r3, #31
 8003100:	d405      	bmi.n	800310e <_vfiprintf_r+0x202>
 8003102:	89ab      	ldrh	r3, [r5, #12]
 8003104:	059a      	lsls	r2, r3, #22
 8003106:	d402      	bmi.n	800310e <_vfiprintf_r+0x202>
 8003108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800310a:	f7ff fdb5 	bl	8002c78 <__retarget_lock_release_recursive>
 800310e:	89ab      	ldrh	r3, [r5, #12]
 8003110:	065b      	lsls	r3, r3, #25
 8003112:	f53f af1d 	bmi.w	8002f50 <_vfiprintf_r+0x44>
 8003116:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003118:	e71c      	b.n	8002f54 <_vfiprintf_r+0x48>
 800311a:	ab03      	add	r3, sp, #12
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	462a      	mov	r2, r5
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <_vfiprintf_r+0x22c>)
 8003122:	a904      	add	r1, sp, #16
 8003124:	4630      	mov	r0, r6
 8003126:	f000 f879 	bl	800321c <_printf_i>
 800312a:	e7e4      	b.n	80030f6 <_vfiprintf_r+0x1ea>
 800312c:	08003ab3 	.word	0x08003ab3
 8003130:	08003abd 	.word	0x08003abd
 8003134:	00000000 	.word	0x00000000
 8003138:	08002ee7 	.word	0x08002ee7
 800313c:	08003ab9 	.word	0x08003ab9

08003140 <_printf_common>:
 8003140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003144:	4616      	mov	r6, r2
 8003146:	4699      	mov	r9, r3
 8003148:	688a      	ldr	r2, [r1, #8]
 800314a:	690b      	ldr	r3, [r1, #16]
 800314c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003150:	4293      	cmp	r3, r2
 8003152:	bfb8      	it	lt
 8003154:	4613      	movlt	r3, r2
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800315c:	4607      	mov	r7, r0
 800315e:	460c      	mov	r4, r1
 8003160:	b10a      	cbz	r2, 8003166 <_printf_common+0x26>
 8003162:	3301      	adds	r3, #1
 8003164:	6033      	str	r3, [r6, #0]
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	0699      	lsls	r1, r3, #26
 800316a:	bf42      	ittt	mi
 800316c:	6833      	ldrmi	r3, [r6, #0]
 800316e:	3302      	addmi	r3, #2
 8003170:	6033      	strmi	r3, [r6, #0]
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	f015 0506 	ands.w	r5, r5, #6
 8003178:	d106      	bne.n	8003188 <_printf_common+0x48>
 800317a:	f104 0a19 	add.w	sl, r4, #25
 800317e:	68e3      	ldr	r3, [r4, #12]
 8003180:	6832      	ldr	r2, [r6, #0]
 8003182:	1a9b      	subs	r3, r3, r2
 8003184:	42ab      	cmp	r3, r5
 8003186:	dc26      	bgt.n	80031d6 <_printf_common+0x96>
 8003188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800318c:	1e13      	subs	r3, r2, #0
 800318e:	6822      	ldr	r2, [r4, #0]
 8003190:	bf18      	it	ne
 8003192:	2301      	movne	r3, #1
 8003194:	0692      	lsls	r2, r2, #26
 8003196:	d42b      	bmi.n	80031f0 <_printf_common+0xb0>
 8003198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800319c:	4649      	mov	r1, r9
 800319e:	4638      	mov	r0, r7
 80031a0:	47c0      	blx	r8
 80031a2:	3001      	adds	r0, #1
 80031a4:	d01e      	beq.n	80031e4 <_printf_common+0xa4>
 80031a6:	6823      	ldr	r3, [r4, #0]
 80031a8:	6922      	ldr	r2, [r4, #16]
 80031aa:	f003 0306 	and.w	r3, r3, #6
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	bf02      	ittt	eq
 80031b2:	68e5      	ldreq	r5, [r4, #12]
 80031b4:	6833      	ldreq	r3, [r6, #0]
 80031b6:	1aed      	subeq	r5, r5, r3
 80031b8:	68a3      	ldr	r3, [r4, #8]
 80031ba:	bf0c      	ite	eq
 80031bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031c0:	2500      	movne	r5, #0
 80031c2:	4293      	cmp	r3, r2
 80031c4:	bfc4      	itt	gt
 80031c6:	1a9b      	subgt	r3, r3, r2
 80031c8:	18ed      	addgt	r5, r5, r3
 80031ca:	2600      	movs	r6, #0
 80031cc:	341a      	adds	r4, #26
 80031ce:	42b5      	cmp	r5, r6
 80031d0:	d11a      	bne.n	8003208 <_printf_common+0xc8>
 80031d2:	2000      	movs	r0, #0
 80031d4:	e008      	b.n	80031e8 <_printf_common+0xa8>
 80031d6:	2301      	movs	r3, #1
 80031d8:	4652      	mov	r2, sl
 80031da:	4649      	mov	r1, r9
 80031dc:	4638      	mov	r0, r7
 80031de:	47c0      	blx	r8
 80031e0:	3001      	adds	r0, #1
 80031e2:	d103      	bne.n	80031ec <_printf_common+0xac>
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	3501      	adds	r5, #1
 80031ee:	e7c6      	b.n	800317e <_printf_common+0x3e>
 80031f0:	18e1      	adds	r1, r4, r3
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	2030      	movs	r0, #48	; 0x30
 80031f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031fa:	4422      	add	r2, r4
 80031fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003204:	3302      	adds	r3, #2
 8003206:	e7c7      	b.n	8003198 <_printf_common+0x58>
 8003208:	2301      	movs	r3, #1
 800320a:	4622      	mov	r2, r4
 800320c:	4649      	mov	r1, r9
 800320e:	4638      	mov	r0, r7
 8003210:	47c0      	blx	r8
 8003212:	3001      	adds	r0, #1
 8003214:	d0e6      	beq.n	80031e4 <_printf_common+0xa4>
 8003216:	3601      	adds	r6, #1
 8003218:	e7d9      	b.n	80031ce <_printf_common+0x8e>
	...

0800321c <_printf_i>:
 800321c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003220:	7e0f      	ldrb	r7, [r1, #24]
 8003222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003224:	2f78      	cmp	r7, #120	; 0x78
 8003226:	4691      	mov	r9, r2
 8003228:	4680      	mov	r8, r0
 800322a:	460c      	mov	r4, r1
 800322c:	469a      	mov	sl, r3
 800322e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003232:	d807      	bhi.n	8003244 <_printf_i+0x28>
 8003234:	2f62      	cmp	r7, #98	; 0x62
 8003236:	d80a      	bhi.n	800324e <_printf_i+0x32>
 8003238:	2f00      	cmp	r7, #0
 800323a:	f000 80d4 	beq.w	80033e6 <_printf_i+0x1ca>
 800323e:	2f58      	cmp	r7, #88	; 0x58
 8003240:	f000 80c0 	beq.w	80033c4 <_printf_i+0x1a8>
 8003244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800324c:	e03a      	b.n	80032c4 <_printf_i+0xa8>
 800324e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003252:	2b15      	cmp	r3, #21
 8003254:	d8f6      	bhi.n	8003244 <_printf_i+0x28>
 8003256:	a101      	add	r1, pc, #4	; (adr r1, 800325c <_printf_i+0x40>)
 8003258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800325c:	080032b5 	.word	0x080032b5
 8003260:	080032c9 	.word	0x080032c9
 8003264:	08003245 	.word	0x08003245
 8003268:	08003245 	.word	0x08003245
 800326c:	08003245 	.word	0x08003245
 8003270:	08003245 	.word	0x08003245
 8003274:	080032c9 	.word	0x080032c9
 8003278:	08003245 	.word	0x08003245
 800327c:	08003245 	.word	0x08003245
 8003280:	08003245 	.word	0x08003245
 8003284:	08003245 	.word	0x08003245
 8003288:	080033cd 	.word	0x080033cd
 800328c:	080032f5 	.word	0x080032f5
 8003290:	08003387 	.word	0x08003387
 8003294:	08003245 	.word	0x08003245
 8003298:	08003245 	.word	0x08003245
 800329c:	080033ef 	.word	0x080033ef
 80032a0:	08003245 	.word	0x08003245
 80032a4:	080032f5 	.word	0x080032f5
 80032a8:	08003245 	.word	0x08003245
 80032ac:	08003245 	.word	0x08003245
 80032b0:	0800338f 	.word	0x0800338f
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	1d1a      	adds	r2, r3, #4
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	602a      	str	r2, [r5, #0]
 80032bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032c4:	2301      	movs	r3, #1
 80032c6:	e09f      	b.n	8003408 <_printf_i+0x1ec>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	0607      	lsls	r7, r0, #24
 80032ce:	f103 0104 	add.w	r1, r3, #4
 80032d2:	6029      	str	r1, [r5, #0]
 80032d4:	d501      	bpl.n	80032da <_printf_i+0xbe>
 80032d6:	681e      	ldr	r6, [r3, #0]
 80032d8:	e003      	b.n	80032e2 <_printf_i+0xc6>
 80032da:	0646      	lsls	r6, r0, #25
 80032dc:	d5fb      	bpl.n	80032d6 <_printf_i+0xba>
 80032de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032e2:	2e00      	cmp	r6, #0
 80032e4:	da03      	bge.n	80032ee <_printf_i+0xd2>
 80032e6:	232d      	movs	r3, #45	; 0x2d
 80032e8:	4276      	negs	r6, r6
 80032ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ee:	485a      	ldr	r0, [pc, #360]	; (8003458 <_printf_i+0x23c>)
 80032f0:	230a      	movs	r3, #10
 80032f2:	e012      	b.n	800331a <_printf_i+0xfe>
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	6820      	ldr	r0, [r4, #0]
 80032f8:	1d19      	adds	r1, r3, #4
 80032fa:	6029      	str	r1, [r5, #0]
 80032fc:	0605      	lsls	r5, r0, #24
 80032fe:	d501      	bpl.n	8003304 <_printf_i+0xe8>
 8003300:	681e      	ldr	r6, [r3, #0]
 8003302:	e002      	b.n	800330a <_printf_i+0xee>
 8003304:	0641      	lsls	r1, r0, #25
 8003306:	d5fb      	bpl.n	8003300 <_printf_i+0xe4>
 8003308:	881e      	ldrh	r6, [r3, #0]
 800330a:	4853      	ldr	r0, [pc, #332]	; (8003458 <_printf_i+0x23c>)
 800330c:	2f6f      	cmp	r7, #111	; 0x6f
 800330e:	bf0c      	ite	eq
 8003310:	2308      	moveq	r3, #8
 8003312:	230a      	movne	r3, #10
 8003314:	2100      	movs	r1, #0
 8003316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800331a:	6865      	ldr	r5, [r4, #4]
 800331c:	60a5      	str	r5, [r4, #8]
 800331e:	2d00      	cmp	r5, #0
 8003320:	bfa2      	ittt	ge
 8003322:	6821      	ldrge	r1, [r4, #0]
 8003324:	f021 0104 	bicge.w	r1, r1, #4
 8003328:	6021      	strge	r1, [r4, #0]
 800332a:	b90e      	cbnz	r6, 8003330 <_printf_i+0x114>
 800332c:	2d00      	cmp	r5, #0
 800332e:	d04b      	beq.n	80033c8 <_printf_i+0x1ac>
 8003330:	4615      	mov	r5, r2
 8003332:	fbb6 f1f3 	udiv	r1, r6, r3
 8003336:	fb03 6711 	mls	r7, r3, r1, r6
 800333a:	5dc7      	ldrb	r7, [r0, r7]
 800333c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003340:	4637      	mov	r7, r6
 8003342:	42bb      	cmp	r3, r7
 8003344:	460e      	mov	r6, r1
 8003346:	d9f4      	bls.n	8003332 <_printf_i+0x116>
 8003348:	2b08      	cmp	r3, #8
 800334a:	d10b      	bne.n	8003364 <_printf_i+0x148>
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	07de      	lsls	r6, r3, #31
 8003350:	d508      	bpl.n	8003364 <_printf_i+0x148>
 8003352:	6923      	ldr	r3, [r4, #16]
 8003354:	6861      	ldr	r1, [r4, #4]
 8003356:	4299      	cmp	r1, r3
 8003358:	bfde      	ittt	le
 800335a:	2330      	movle	r3, #48	; 0x30
 800335c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003360:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003364:	1b52      	subs	r2, r2, r5
 8003366:	6122      	str	r2, [r4, #16]
 8003368:	f8cd a000 	str.w	sl, [sp]
 800336c:	464b      	mov	r3, r9
 800336e:	aa03      	add	r2, sp, #12
 8003370:	4621      	mov	r1, r4
 8003372:	4640      	mov	r0, r8
 8003374:	f7ff fee4 	bl	8003140 <_printf_common>
 8003378:	3001      	adds	r0, #1
 800337a:	d14a      	bne.n	8003412 <_printf_i+0x1f6>
 800337c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003380:	b004      	add	sp, #16
 8003382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	f043 0320 	orr.w	r3, r3, #32
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	4833      	ldr	r0, [pc, #204]	; (800345c <_printf_i+0x240>)
 8003390:	2778      	movs	r7, #120	; 0x78
 8003392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	6829      	ldr	r1, [r5, #0]
 800339a:	061f      	lsls	r7, r3, #24
 800339c:	f851 6b04 	ldr.w	r6, [r1], #4
 80033a0:	d402      	bmi.n	80033a8 <_printf_i+0x18c>
 80033a2:	065f      	lsls	r7, r3, #25
 80033a4:	bf48      	it	mi
 80033a6:	b2b6      	uxthmi	r6, r6
 80033a8:	07df      	lsls	r7, r3, #31
 80033aa:	bf48      	it	mi
 80033ac:	f043 0320 	orrmi.w	r3, r3, #32
 80033b0:	6029      	str	r1, [r5, #0]
 80033b2:	bf48      	it	mi
 80033b4:	6023      	strmi	r3, [r4, #0]
 80033b6:	b91e      	cbnz	r6, 80033c0 <_printf_i+0x1a4>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	f023 0320 	bic.w	r3, r3, #32
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	2310      	movs	r3, #16
 80033c2:	e7a7      	b.n	8003314 <_printf_i+0xf8>
 80033c4:	4824      	ldr	r0, [pc, #144]	; (8003458 <_printf_i+0x23c>)
 80033c6:	e7e4      	b.n	8003392 <_printf_i+0x176>
 80033c8:	4615      	mov	r5, r2
 80033ca:	e7bd      	b.n	8003348 <_printf_i+0x12c>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	6826      	ldr	r6, [r4, #0]
 80033d0:	6961      	ldr	r1, [r4, #20]
 80033d2:	1d18      	adds	r0, r3, #4
 80033d4:	6028      	str	r0, [r5, #0]
 80033d6:	0635      	lsls	r5, r6, #24
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	d501      	bpl.n	80033e0 <_printf_i+0x1c4>
 80033dc:	6019      	str	r1, [r3, #0]
 80033de:	e002      	b.n	80033e6 <_printf_i+0x1ca>
 80033e0:	0670      	lsls	r0, r6, #25
 80033e2:	d5fb      	bpl.n	80033dc <_printf_i+0x1c0>
 80033e4:	8019      	strh	r1, [r3, #0]
 80033e6:	2300      	movs	r3, #0
 80033e8:	6123      	str	r3, [r4, #16]
 80033ea:	4615      	mov	r5, r2
 80033ec:	e7bc      	b.n	8003368 <_printf_i+0x14c>
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	1d1a      	adds	r2, r3, #4
 80033f2:	602a      	str	r2, [r5, #0]
 80033f4:	681d      	ldr	r5, [r3, #0]
 80033f6:	6862      	ldr	r2, [r4, #4]
 80033f8:	2100      	movs	r1, #0
 80033fa:	4628      	mov	r0, r5
 80033fc:	f7fc fef8 	bl	80001f0 <memchr>
 8003400:	b108      	cbz	r0, 8003406 <_printf_i+0x1ea>
 8003402:	1b40      	subs	r0, r0, r5
 8003404:	6060      	str	r0, [r4, #4]
 8003406:	6863      	ldr	r3, [r4, #4]
 8003408:	6123      	str	r3, [r4, #16]
 800340a:	2300      	movs	r3, #0
 800340c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003410:	e7aa      	b.n	8003368 <_printf_i+0x14c>
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	462a      	mov	r2, r5
 8003416:	4649      	mov	r1, r9
 8003418:	4640      	mov	r0, r8
 800341a:	47d0      	blx	sl
 800341c:	3001      	adds	r0, #1
 800341e:	d0ad      	beq.n	800337c <_printf_i+0x160>
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	079b      	lsls	r3, r3, #30
 8003424:	d413      	bmi.n	800344e <_printf_i+0x232>
 8003426:	68e0      	ldr	r0, [r4, #12]
 8003428:	9b03      	ldr	r3, [sp, #12]
 800342a:	4298      	cmp	r0, r3
 800342c:	bfb8      	it	lt
 800342e:	4618      	movlt	r0, r3
 8003430:	e7a6      	b.n	8003380 <_printf_i+0x164>
 8003432:	2301      	movs	r3, #1
 8003434:	4632      	mov	r2, r6
 8003436:	4649      	mov	r1, r9
 8003438:	4640      	mov	r0, r8
 800343a:	47d0      	blx	sl
 800343c:	3001      	adds	r0, #1
 800343e:	d09d      	beq.n	800337c <_printf_i+0x160>
 8003440:	3501      	adds	r5, #1
 8003442:	68e3      	ldr	r3, [r4, #12]
 8003444:	9903      	ldr	r1, [sp, #12]
 8003446:	1a5b      	subs	r3, r3, r1
 8003448:	42ab      	cmp	r3, r5
 800344a:	dcf2      	bgt.n	8003432 <_printf_i+0x216>
 800344c:	e7eb      	b.n	8003426 <_printf_i+0x20a>
 800344e:	2500      	movs	r5, #0
 8003450:	f104 0619 	add.w	r6, r4, #25
 8003454:	e7f5      	b.n	8003442 <_printf_i+0x226>
 8003456:	bf00      	nop
 8003458:	08003ac4 	.word	0x08003ac4
 800345c:	08003ad5 	.word	0x08003ad5

08003460 <__sflush_r>:
 8003460:	898a      	ldrh	r2, [r1, #12]
 8003462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003466:	4605      	mov	r5, r0
 8003468:	0710      	lsls	r0, r2, #28
 800346a:	460c      	mov	r4, r1
 800346c:	d458      	bmi.n	8003520 <__sflush_r+0xc0>
 800346e:	684b      	ldr	r3, [r1, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	dc05      	bgt.n	8003480 <__sflush_r+0x20>
 8003474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003476:	2b00      	cmp	r3, #0
 8003478:	dc02      	bgt.n	8003480 <__sflush_r+0x20>
 800347a:	2000      	movs	r0, #0
 800347c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003482:	2e00      	cmp	r6, #0
 8003484:	d0f9      	beq.n	800347a <__sflush_r+0x1a>
 8003486:	2300      	movs	r3, #0
 8003488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800348c:	682f      	ldr	r7, [r5, #0]
 800348e:	6a21      	ldr	r1, [r4, #32]
 8003490:	602b      	str	r3, [r5, #0]
 8003492:	d032      	beq.n	80034fa <__sflush_r+0x9a>
 8003494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	075a      	lsls	r2, r3, #29
 800349a:	d505      	bpl.n	80034a8 <__sflush_r+0x48>
 800349c:	6863      	ldr	r3, [r4, #4]
 800349e:	1ac0      	subs	r0, r0, r3
 80034a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034a2:	b10b      	cbz	r3, 80034a8 <__sflush_r+0x48>
 80034a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034a6:	1ac0      	subs	r0, r0, r3
 80034a8:	2300      	movs	r3, #0
 80034aa:	4602      	mov	r2, r0
 80034ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034ae:	6a21      	ldr	r1, [r4, #32]
 80034b0:	4628      	mov	r0, r5
 80034b2:	47b0      	blx	r6
 80034b4:	1c43      	adds	r3, r0, #1
 80034b6:	89a3      	ldrh	r3, [r4, #12]
 80034b8:	d106      	bne.n	80034c8 <__sflush_r+0x68>
 80034ba:	6829      	ldr	r1, [r5, #0]
 80034bc:	291d      	cmp	r1, #29
 80034be:	d82b      	bhi.n	8003518 <__sflush_r+0xb8>
 80034c0:	4a29      	ldr	r2, [pc, #164]	; (8003568 <__sflush_r+0x108>)
 80034c2:	410a      	asrs	r2, r1
 80034c4:	07d6      	lsls	r6, r2, #31
 80034c6:	d427      	bmi.n	8003518 <__sflush_r+0xb8>
 80034c8:	2200      	movs	r2, #0
 80034ca:	6062      	str	r2, [r4, #4]
 80034cc:	04d9      	lsls	r1, r3, #19
 80034ce:	6922      	ldr	r2, [r4, #16]
 80034d0:	6022      	str	r2, [r4, #0]
 80034d2:	d504      	bpl.n	80034de <__sflush_r+0x7e>
 80034d4:	1c42      	adds	r2, r0, #1
 80034d6:	d101      	bne.n	80034dc <__sflush_r+0x7c>
 80034d8:	682b      	ldr	r3, [r5, #0]
 80034da:	b903      	cbnz	r3, 80034de <__sflush_r+0x7e>
 80034dc:	6560      	str	r0, [r4, #84]	; 0x54
 80034de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e0:	602f      	str	r7, [r5, #0]
 80034e2:	2900      	cmp	r1, #0
 80034e4:	d0c9      	beq.n	800347a <__sflush_r+0x1a>
 80034e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034ea:	4299      	cmp	r1, r3
 80034ec:	d002      	beq.n	80034f4 <__sflush_r+0x94>
 80034ee:	4628      	mov	r0, r5
 80034f0:	f7ff fbe2 	bl	8002cb8 <_free_r>
 80034f4:	2000      	movs	r0, #0
 80034f6:	6360      	str	r0, [r4, #52]	; 0x34
 80034f8:	e7c0      	b.n	800347c <__sflush_r+0x1c>
 80034fa:	2301      	movs	r3, #1
 80034fc:	4628      	mov	r0, r5
 80034fe:	47b0      	blx	r6
 8003500:	1c41      	adds	r1, r0, #1
 8003502:	d1c8      	bne.n	8003496 <__sflush_r+0x36>
 8003504:	682b      	ldr	r3, [r5, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0c5      	beq.n	8003496 <__sflush_r+0x36>
 800350a:	2b1d      	cmp	r3, #29
 800350c:	d001      	beq.n	8003512 <__sflush_r+0xb2>
 800350e:	2b16      	cmp	r3, #22
 8003510:	d101      	bne.n	8003516 <__sflush_r+0xb6>
 8003512:	602f      	str	r7, [r5, #0]
 8003514:	e7b1      	b.n	800347a <__sflush_r+0x1a>
 8003516:	89a3      	ldrh	r3, [r4, #12]
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	81a3      	strh	r3, [r4, #12]
 800351e:	e7ad      	b.n	800347c <__sflush_r+0x1c>
 8003520:	690f      	ldr	r7, [r1, #16]
 8003522:	2f00      	cmp	r7, #0
 8003524:	d0a9      	beq.n	800347a <__sflush_r+0x1a>
 8003526:	0793      	lsls	r3, r2, #30
 8003528:	680e      	ldr	r6, [r1, #0]
 800352a:	bf08      	it	eq
 800352c:	694b      	ldreq	r3, [r1, #20]
 800352e:	600f      	str	r7, [r1, #0]
 8003530:	bf18      	it	ne
 8003532:	2300      	movne	r3, #0
 8003534:	eba6 0807 	sub.w	r8, r6, r7
 8003538:	608b      	str	r3, [r1, #8]
 800353a:	f1b8 0f00 	cmp.w	r8, #0
 800353e:	dd9c      	ble.n	800347a <__sflush_r+0x1a>
 8003540:	6a21      	ldr	r1, [r4, #32]
 8003542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003544:	4643      	mov	r3, r8
 8003546:	463a      	mov	r2, r7
 8003548:	4628      	mov	r0, r5
 800354a:	47b0      	blx	r6
 800354c:	2800      	cmp	r0, #0
 800354e:	dc06      	bgt.n	800355e <__sflush_r+0xfe>
 8003550:	89a3      	ldrh	r3, [r4, #12]
 8003552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003556:	81a3      	strh	r3, [r4, #12]
 8003558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800355c:	e78e      	b.n	800347c <__sflush_r+0x1c>
 800355e:	4407      	add	r7, r0
 8003560:	eba8 0800 	sub.w	r8, r8, r0
 8003564:	e7e9      	b.n	800353a <__sflush_r+0xda>
 8003566:	bf00      	nop
 8003568:	dfbffffe 	.word	0xdfbffffe

0800356c <_fflush_r>:
 800356c:	b538      	push	{r3, r4, r5, lr}
 800356e:	690b      	ldr	r3, [r1, #16]
 8003570:	4605      	mov	r5, r0
 8003572:	460c      	mov	r4, r1
 8003574:	b913      	cbnz	r3, 800357c <_fflush_r+0x10>
 8003576:	2500      	movs	r5, #0
 8003578:	4628      	mov	r0, r5
 800357a:	bd38      	pop	{r3, r4, r5, pc}
 800357c:	b118      	cbz	r0, 8003586 <_fflush_r+0x1a>
 800357e:	6a03      	ldr	r3, [r0, #32]
 8003580:	b90b      	cbnz	r3, 8003586 <_fflush_r+0x1a>
 8003582:	f7ff fa47 	bl	8002a14 <__sinit>
 8003586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d0f3      	beq.n	8003576 <_fflush_r+0xa>
 800358e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003590:	07d0      	lsls	r0, r2, #31
 8003592:	d404      	bmi.n	800359e <_fflush_r+0x32>
 8003594:	0599      	lsls	r1, r3, #22
 8003596:	d402      	bmi.n	800359e <_fflush_r+0x32>
 8003598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800359a:	f7ff fb6c 	bl	8002c76 <__retarget_lock_acquire_recursive>
 800359e:	4628      	mov	r0, r5
 80035a0:	4621      	mov	r1, r4
 80035a2:	f7ff ff5d 	bl	8003460 <__sflush_r>
 80035a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a8:	07da      	lsls	r2, r3, #31
 80035aa:	4605      	mov	r5, r0
 80035ac:	d4e4      	bmi.n	8003578 <_fflush_r+0xc>
 80035ae:	89a3      	ldrh	r3, [r4, #12]
 80035b0:	059b      	lsls	r3, r3, #22
 80035b2:	d4e1      	bmi.n	8003578 <_fflush_r+0xc>
 80035b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035b6:	f7ff fb5f 	bl	8002c78 <__retarget_lock_release_recursive>
 80035ba:	e7dd      	b.n	8003578 <_fflush_r+0xc>

080035bc <fiprintf>:
 80035bc:	b40e      	push	{r1, r2, r3}
 80035be:	b503      	push	{r0, r1, lr}
 80035c0:	4601      	mov	r1, r0
 80035c2:	ab03      	add	r3, sp, #12
 80035c4:	4805      	ldr	r0, [pc, #20]	; (80035dc <fiprintf+0x20>)
 80035c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ca:	6800      	ldr	r0, [r0, #0]
 80035cc:	9301      	str	r3, [sp, #4]
 80035ce:	f7ff fc9d 	bl	8002f0c <_vfiprintf_r>
 80035d2:	b002      	add	sp, #8
 80035d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80035d8:	b003      	add	sp, #12
 80035da:	4770      	bx	lr
 80035dc:	2000007c 	.word	0x2000007c

080035e0 <__swbuf_r>:
 80035e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035e2:	460e      	mov	r6, r1
 80035e4:	4614      	mov	r4, r2
 80035e6:	4605      	mov	r5, r0
 80035e8:	b118      	cbz	r0, 80035f2 <__swbuf_r+0x12>
 80035ea:	6a03      	ldr	r3, [r0, #32]
 80035ec:	b90b      	cbnz	r3, 80035f2 <__swbuf_r+0x12>
 80035ee:	f7ff fa11 	bl	8002a14 <__sinit>
 80035f2:	69a3      	ldr	r3, [r4, #24]
 80035f4:	60a3      	str	r3, [r4, #8]
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	071a      	lsls	r2, r3, #28
 80035fa:	d525      	bpl.n	8003648 <__swbuf_r+0x68>
 80035fc:	6923      	ldr	r3, [r4, #16]
 80035fe:	b31b      	cbz	r3, 8003648 <__swbuf_r+0x68>
 8003600:	6823      	ldr	r3, [r4, #0]
 8003602:	6922      	ldr	r2, [r4, #16]
 8003604:	1a98      	subs	r0, r3, r2
 8003606:	6963      	ldr	r3, [r4, #20]
 8003608:	b2f6      	uxtb	r6, r6
 800360a:	4283      	cmp	r3, r0
 800360c:	4637      	mov	r7, r6
 800360e:	dc04      	bgt.n	800361a <__swbuf_r+0x3a>
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f7ff ffaa 	bl	800356c <_fflush_r>
 8003618:	b9e0      	cbnz	r0, 8003654 <__swbuf_r+0x74>
 800361a:	68a3      	ldr	r3, [r4, #8]
 800361c:	3b01      	subs	r3, #1
 800361e:	60a3      	str	r3, [r4, #8]
 8003620:	6823      	ldr	r3, [r4, #0]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	6022      	str	r2, [r4, #0]
 8003626:	701e      	strb	r6, [r3, #0]
 8003628:	6962      	ldr	r2, [r4, #20]
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	429a      	cmp	r2, r3
 800362e:	d004      	beq.n	800363a <__swbuf_r+0x5a>
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	07db      	lsls	r3, r3, #31
 8003634:	d506      	bpl.n	8003644 <__swbuf_r+0x64>
 8003636:	2e0a      	cmp	r6, #10
 8003638:	d104      	bne.n	8003644 <__swbuf_r+0x64>
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff ff95 	bl	800356c <_fflush_r>
 8003642:	b938      	cbnz	r0, 8003654 <__swbuf_r+0x74>
 8003644:	4638      	mov	r0, r7
 8003646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003648:	4621      	mov	r1, r4
 800364a:	4628      	mov	r0, r5
 800364c:	f000 f806 	bl	800365c <__swsetup_r>
 8003650:	2800      	cmp	r0, #0
 8003652:	d0d5      	beq.n	8003600 <__swbuf_r+0x20>
 8003654:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003658:	e7f4      	b.n	8003644 <__swbuf_r+0x64>
	...

0800365c <__swsetup_r>:
 800365c:	b538      	push	{r3, r4, r5, lr}
 800365e:	4b2a      	ldr	r3, [pc, #168]	; (8003708 <__swsetup_r+0xac>)
 8003660:	4605      	mov	r5, r0
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	460c      	mov	r4, r1
 8003666:	b118      	cbz	r0, 8003670 <__swsetup_r+0x14>
 8003668:	6a03      	ldr	r3, [r0, #32]
 800366a:	b90b      	cbnz	r3, 8003670 <__swsetup_r+0x14>
 800366c:	f7ff f9d2 	bl	8002a14 <__sinit>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003676:	0718      	lsls	r0, r3, #28
 8003678:	d422      	bmi.n	80036c0 <__swsetup_r+0x64>
 800367a:	06d9      	lsls	r1, r3, #27
 800367c:	d407      	bmi.n	800368e <__swsetup_r+0x32>
 800367e:	2309      	movs	r3, #9
 8003680:	602b      	str	r3, [r5, #0]
 8003682:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003686:	81a3      	strh	r3, [r4, #12]
 8003688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800368c:	e034      	b.n	80036f8 <__swsetup_r+0x9c>
 800368e:	0758      	lsls	r0, r3, #29
 8003690:	d512      	bpl.n	80036b8 <__swsetup_r+0x5c>
 8003692:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003694:	b141      	cbz	r1, 80036a8 <__swsetup_r+0x4c>
 8003696:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800369a:	4299      	cmp	r1, r3
 800369c:	d002      	beq.n	80036a4 <__swsetup_r+0x48>
 800369e:	4628      	mov	r0, r5
 80036a0:	f7ff fb0a 	bl	8002cb8 <_free_r>
 80036a4:	2300      	movs	r3, #0
 80036a6:	6363      	str	r3, [r4, #52]	; 0x34
 80036a8:	89a3      	ldrh	r3, [r4, #12]
 80036aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80036ae:	81a3      	strh	r3, [r4, #12]
 80036b0:	2300      	movs	r3, #0
 80036b2:	6063      	str	r3, [r4, #4]
 80036b4:	6923      	ldr	r3, [r4, #16]
 80036b6:	6023      	str	r3, [r4, #0]
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	f043 0308 	orr.w	r3, r3, #8
 80036be:	81a3      	strh	r3, [r4, #12]
 80036c0:	6923      	ldr	r3, [r4, #16]
 80036c2:	b94b      	cbnz	r3, 80036d8 <__swsetup_r+0x7c>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80036ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ce:	d003      	beq.n	80036d8 <__swsetup_r+0x7c>
 80036d0:	4621      	mov	r1, r4
 80036d2:	4628      	mov	r0, r5
 80036d4:	f000 f857 	bl	8003786 <__smakebuf_r>
 80036d8:	89a0      	ldrh	r0, [r4, #12]
 80036da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80036de:	f010 0301 	ands.w	r3, r0, #1
 80036e2:	d00a      	beq.n	80036fa <__swsetup_r+0x9e>
 80036e4:	2300      	movs	r3, #0
 80036e6:	60a3      	str	r3, [r4, #8]
 80036e8:	6963      	ldr	r3, [r4, #20]
 80036ea:	425b      	negs	r3, r3
 80036ec:	61a3      	str	r3, [r4, #24]
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	b943      	cbnz	r3, 8003704 <__swsetup_r+0xa8>
 80036f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80036f6:	d1c4      	bne.n	8003682 <__swsetup_r+0x26>
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
 80036fa:	0781      	lsls	r1, r0, #30
 80036fc:	bf58      	it	pl
 80036fe:	6963      	ldrpl	r3, [r4, #20]
 8003700:	60a3      	str	r3, [r4, #8]
 8003702:	e7f4      	b.n	80036ee <__swsetup_r+0x92>
 8003704:	2000      	movs	r0, #0
 8003706:	e7f7      	b.n	80036f8 <__swsetup_r+0x9c>
 8003708:	2000007c 	.word	0x2000007c

0800370c <_sbrk_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4d06      	ldr	r5, [pc, #24]	; (8003728 <_sbrk_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4604      	mov	r4, r0
 8003714:	4608      	mov	r0, r1
 8003716:	602b      	str	r3, [r5, #0]
 8003718:	f7fd fab8 	bl	8000c8c <_sbrk>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_sbrk_r+0x1a>
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	b103      	cbz	r3, 8003726 <_sbrk_r+0x1a>
 8003724:	6023      	str	r3, [r4, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	2000024c 	.word	0x2000024c

0800372c <abort>:
 800372c:	b508      	push	{r3, lr}
 800372e:	2006      	movs	r0, #6
 8003730:	f000 f88e 	bl	8003850 <raise>
 8003734:	2001      	movs	r0, #1
 8003736:	f7fd fa31 	bl	8000b9c <_exit>

0800373a <__swhatbuf_r>:
 800373a:	b570      	push	{r4, r5, r6, lr}
 800373c:	460c      	mov	r4, r1
 800373e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003742:	2900      	cmp	r1, #0
 8003744:	b096      	sub	sp, #88	; 0x58
 8003746:	4615      	mov	r5, r2
 8003748:	461e      	mov	r6, r3
 800374a:	da0d      	bge.n	8003768 <__swhatbuf_r+0x2e>
 800374c:	89a3      	ldrh	r3, [r4, #12]
 800374e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	bf0c      	ite	eq
 8003758:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800375c:	2340      	movne	r3, #64	; 0x40
 800375e:	2000      	movs	r0, #0
 8003760:	6031      	str	r1, [r6, #0]
 8003762:	602b      	str	r3, [r5, #0]
 8003764:	b016      	add	sp, #88	; 0x58
 8003766:	bd70      	pop	{r4, r5, r6, pc}
 8003768:	466a      	mov	r2, sp
 800376a:	f000 f879 	bl	8003860 <_fstat_r>
 800376e:	2800      	cmp	r0, #0
 8003770:	dbec      	blt.n	800374c <__swhatbuf_r+0x12>
 8003772:	9901      	ldr	r1, [sp, #4]
 8003774:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003778:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800377c:	4259      	negs	r1, r3
 800377e:	4159      	adcs	r1, r3
 8003780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003784:	e7eb      	b.n	800375e <__swhatbuf_r+0x24>

08003786 <__smakebuf_r>:
 8003786:	898b      	ldrh	r3, [r1, #12]
 8003788:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800378a:	079d      	lsls	r5, r3, #30
 800378c:	4606      	mov	r6, r0
 800378e:	460c      	mov	r4, r1
 8003790:	d507      	bpl.n	80037a2 <__smakebuf_r+0x1c>
 8003792:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003796:	6023      	str	r3, [r4, #0]
 8003798:	6123      	str	r3, [r4, #16]
 800379a:	2301      	movs	r3, #1
 800379c:	6163      	str	r3, [r4, #20]
 800379e:	b002      	add	sp, #8
 80037a0:	bd70      	pop	{r4, r5, r6, pc}
 80037a2:	ab01      	add	r3, sp, #4
 80037a4:	466a      	mov	r2, sp
 80037a6:	f7ff ffc8 	bl	800373a <__swhatbuf_r>
 80037aa:	9900      	ldr	r1, [sp, #0]
 80037ac:	4605      	mov	r5, r0
 80037ae:	4630      	mov	r0, r6
 80037b0:	f7ff faf6 	bl	8002da0 <_malloc_r>
 80037b4:	b948      	cbnz	r0, 80037ca <__smakebuf_r+0x44>
 80037b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ba:	059a      	lsls	r2, r3, #22
 80037bc:	d4ef      	bmi.n	800379e <__smakebuf_r+0x18>
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	81a3      	strh	r3, [r4, #12]
 80037c8:	e7e3      	b.n	8003792 <__smakebuf_r+0xc>
 80037ca:	89a3      	ldrh	r3, [r4, #12]
 80037cc:	6020      	str	r0, [r4, #0]
 80037ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d2:	81a3      	strh	r3, [r4, #12]
 80037d4:	9b00      	ldr	r3, [sp, #0]
 80037d6:	6163      	str	r3, [r4, #20]
 80037d8:	9b01      	ldr	r3, [sp, #4]
 80037da:	6120      	str	r0, [r4, #16]
 80037dc:	b15b      	cbz	r3, 80037f6 <__smakebuf_r+0x70>
 80037de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80037e2:	4630      	mov	r0, r6
 80037e4:	f000 f84e 	bl	8003884 <_isatty_r>
 80037e8:	b128      	cbz	r0, 80037f6 <__smakebuf_r+0x70>
 80037ea:	89a3      	ldrh	r3, [r4, #12]
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	431d      	orrs	r5, r3
 80037fa:	81a5      	strh	r5, [r4, #12]
 80037fc:	e7cf      	b.n	800379e <__smakebuf_r+0x18>

080037fe <_raise_r>:
 80037fe:	291f      	cmp	r1, #31
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	460d      	mov	r5, r1
 8003806:	d904      	bls.n	8003812 <_raise_r+0x14>
 8003808:	2316      	movs	r3, #22
 800380a:	6003      	str	r3, [r0, #0]
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003810:	bd38      	pop	{r3, r4, r5, pc}
 8003812:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003814:	b112      	cbz	r2, 800381c <_raise_r+0x1e>
 8003816:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800381a:	b94b      	cbnz	r3, 8003830 <_raise_r+0x32>
 800381c:	4620      	mov	r0, r4
 800381e:	f000 f853 	bl	80038c8 <_getpid_r>
 8003822:	462a      	mov	r2, r5
 8003824:	4601      	mov	r1, r0
 8003826:	4620      	mov	r0, r4
 8003828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800382c:	f000 b83a 	b.w	80038a4 <_kill_r>
 8003830:	2b01      	cmp	r3, #1
 8003832:	d00a      	beq.n	800384a <_raise_r+0x4c>
 8003834:	1c59      	adds	r1, r3, #1
 8003836:	d103      	bne.n	8003840 <_raise_r+0x42>
 8003838:	2316      	movs	r3, #22
 800383a:	6003      	str	r3, [r0, #0]
 800383c:	2001      	movs	r0, #1
 800383e:	e7e7      	b.n	8003810 <_raise_r+0x12>
 8003840:	2400      	movs	r4, #0
 8003842:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003846:	4628      	mov	r0, r5
 8003848:	4798      	blx	r3
 800384a:	2000      	movs	r0, #0
 800384c:	e7e0      	b.n	8003810 <_raise_r+0x12>
	...

08003850 <raise>:
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <raise+0xc>)
 8003852:	4601      	mov	r1, r0
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f7ff bfd2 	b.w	80037fe <_raise_r>
 800385a:	bf00      	nop
 800385c:	2000007c 	.word	0x2000007c

08003860 <_fstat_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4d07      	ldr	r5, [pc, #28]	; (8003880 <_fstat_r+0x20>)
 8003864:	2300      	movs	r3, #0
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f7fd f9e4 	bl	8000c3a <_fstat>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d102      	bne.n	800387c <_fstat_r+0x1c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	b103      	cbz	r3, 800387c <_fstat_r+0x1c>
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	2000024c 	.word	0x2000024c

08003884 <_isatty_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	4d06      	ldr	r5, [pc, #24]	; (80038a0 <_isatty_r+0x1c>)
 8003888:	2300      	movs	r3, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd f9e3 	bl	8000c5a <_isatty>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_isatty_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_isatty_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	2000024c 	.word	0x2000024c

080038a4 <_kill_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	4d07      	ldr	r5, [pc, #28]	; (80038c4 <_kill_r+0x20>)
 80038a8:	2300      	movs	r3, #0
 80038aa:	4604      	mov	r4, r0
 80038ac:	4608      	mov	r0, r1
 80038ae:	4611      	mov	r1, r2
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	f7fd f963 	bl	8000b7c <_kill>
 80038b6:	1c43      	adds	r3, r0, #1
 80038b8:	d102      	bne.n	80038c0 <_kill_r+0x1c>
 80038ba:	682b      	ldr	r3, [r5, #0]
 80038bc:	b103      	cbz	r3, 80038c0 <_kill_r+0x1c>
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	bd38      	pop	{r3, r4, r5, pc}
 80038c2:	bf00      	nop
 80038c4:	2000024c 	.word	0x2000024c

080038c8 <_getpid_r>:
 80038c8:	f7fd b950 	b.w	8000b6c <_getpid>

080038cc <_gettimeofday>:
 80038cc:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <_gettimeofday+0xc>)
 80038ce:	2258      	movs	r2, #88	; 0x58
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d6:	4770      	bx	lr
 80038d8:	2000024c 	.word	0x2000024c

080038dc <_init>:
 80038dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038de:	bf00      	nop
 80038e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e2:	bc08      	pop	{r3}
 80038e4:	469e      	mov	lr, r3
 80038e6:	4770      	bx	lr

080038e8 <_fini>:
 80038e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ea:	bf00      	nop
 80038ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ee:	bc08      	pop	{r3}
 80038f0:	469e      	mov	lr, r3
 80038f2:	4770      	bx	lr
