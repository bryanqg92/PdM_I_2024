
PRACTICA 4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e00  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002fb0  08002fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b0  080030b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080030b0  080030b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030b8  080030b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080030c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000198  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000218  20000218  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00005757  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000175e  00000000  00000000  0002584a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000628  00000000  00000000  00026fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000465  00000000  00000000  000275d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026285  00000000  00000000  00027a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000093d4  00000000  00000000  0004dcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e2f14  00000000  00000000  0005708e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002000  00000000  00000000  00139fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0013bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002f98 	.word	0x08002f98

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002f98 	.word	0x08002f98

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <Error_Handler>:
#include "stm32f4xx_nucleo_144.h"
#include <API_Delay.h>



static void Error_Handler(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	BSP_LED_On(LED2);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 f96d 	bl	8000870 <BSP_LED_On>
	while (1){}
 8000596:	e7fe      	b.n	8000596 <Error_Handler+0xa>

08000598 <delayInit>:
}

void delayInit(delay_t *delay, tick_t duration) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]

	if (duration <= 0){
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <delayInit+0x16>
		Error_Handler();
 80005a8:	f7ff fff0 	bl	800058c <Error_Handler>
	}
	else{
		delay->duration = duration;
		delay->running = false;
	}
}
 80005ac:	e005      	b.n	80005ba <delayInit+0x22>
		delay->duration = duration;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	605a      	str	r2, [r3, #4]
		delay->running = false;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	721a      	strb	r2, [r3, #8]
}
 80005ba:	bf00      	nop
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <delayRead>:

bool_t delayRead(delay_t *delay) {
 80005c2:	b580      	push	{r7, lr}
 80005c4:	b084      	sub	sp, #16
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]

	bool state = false;
 80005ca:	2300      	movs	r3, #0
 80005cc:	73fb      	strb	r3, [r7, #15]
	if(delay != NULL){
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d020      	beq.n	8000616 <delayRead+0x54>

		if (!delay->running) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7a1b      	ldrb	r3, [r3, #8]
 80005d8:	f083 0301 	eor.w	r3, r3, #1
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d008      	beq.n	80005f4 <delayRead+0x32>
			delay->startTime = HAL_GetTick();
 80005e2:	f000 fb89 	bl	8000cf8 <HAL_GetTick>
 80005e6:	4602      	mov	r2, r0
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2201      	movs	r2, #1
 80005f0:	721a      	strb	r2, [r3, #8]
 80005f2:	e012      	b.n	800061a <delayRead+0x58>
		}

		else {

			tick_t currentTime = HAL_GetTick();
 80005f4:	f000 fb80 	bl	8000cf8 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]

			if (currentTime - delay->startTime >= delay->duration) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	68ba      	ldr	r2, [r7, #8]
 8000600:	1ad2      	subs	r2, r2, r3
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	429a      	cmp	r2, r3
 8000608:	d307      	bcc.n	800061a <delayRead+0x58>
				delay->running = false;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	721a      	strb	r2, [r3, #8]
				state = true;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
 8000614:	e001      	b.n	800061a <delayRead+0x58>
			}
		}
	}
	else{
		Error_Handler();
 8000616:	f7ff ffb9 	bl	800058c <Error_Handler>
	}

	return state;
 800061a:	7bfb      	ldrb	r3, [r7, #15]
}
 800061c:	4618      	mov	r0, r3
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <delayWrite>:

void delayWrite(delay_t *delay, tick_t duration) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	if(delay!=NULL && duration > 0){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d006      	beq.n	8000642 <delayWrite+0x1e>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <delayWrite+0x1e>
		delay->duration = duration;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	683a      	ldr	r2, [r7, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	e002      	b.n	8000648 <delayWrite+0x24>
	}
	else{
		Error_Handler();
 8000642:	f7ff ffa3 	bl	800058c <Error_Handler>
	}
}
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <FSM_error_handler>:
bool_t buttonState;

delay_t debounceInit;


static void FSM_error_handler(void){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	if (buttonState == GPIO_PIN_RESET){
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <FSM_error_handler+0x34>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	f083 0301 	eor.w	r3, r3, #1
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <FSM_error_handler+0x26>
		isKeyPressed = false;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <FSM_error_handler+0x38>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
		fsmState = BUTTON_UP;
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <FSM_error_handler+0x3c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
		{
			BSP_LED_On(LED2);
		}
	}

}
 800066e:	e006      	b.n	800067e <FSM_error_handler+0x2e>
			BSP_LED_On(LED2);
 8000670:	2001      	movs	r0, #1
 8000672:	f000 f8fd 	bl	8000870 <BSP_LED_On>
		while (buttonState == GPIO_PIN_SET)
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <FSM_error_handler+0x34>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1f8      	bne.n	8000670 <FSM_error_handler+0x20>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	2000009e 	.word	0x2000009e
 8000688:	2000009d 	.word	0x2000009d
 800068c:	2000009c 	.word	0x2000009c

08000690 <debounceFSM_init>:

void debounceFSM_init(uint32_t debounceTime) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	fsmState = BUTTON_UP;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <debounceFSM_init+0x20>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	delayInit(&debounceInit, debounceTime);
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4804      	ldr	r0, [pc, #16]	; (80006b4 <debounceFSM_init+0x24>)
 80006a2:	f7ff ff79 	bl	8000598 <delayInit>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000009c 	.word	0x2000009c
 80006b4:	200000a0 	.word	0x200000a0

080006b8 <debounceFSM_update>:

void debounceFSM_update() {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	buttonState = BSP_PB_GetState(BUTTON_USER);
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 f97b 	bl	80009b8 <BSP_PB_GetState>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b2c      	ldr	r3, [pc, #176]	; (8000780 <debounceFSM_update+0xc8>)
 80006d0:	701a      	strb	r2, [r3, #0]


	switch(fsmState) {
 80006d2:	4b2c      	ldr	r3, [pc, #176]	; (8000784 <debounceFSM_update+0xcc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	d84a      	bhi.n	8000770 <debounceFSM_update+0xb8>
 80006da:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <debounceFSM_update+0x28>)
 80006dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e0:	080006f1 	.word	0x080006f1
 80006e4:	08000707 	.word	0x08000707
 80006e8:	0800072d 	.word	0x0800072d
 80006ec:	0800074b 	.word	0x0800074b

	case BUTTON_UP:
		if (buttonState == GPIO_PIN_SET){
 80006f0:	4b23      	ldr	r3, [pc, #140]	; (8000780 <debounceFSM_update+0xc8>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <debounceFSM_update+0xbe>
			fsmState = BUTTON_FALLING;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <debounceFSM_update+0xcc>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			isKeyPressed = false;
 80006fe:	4b22      	ldr	r3, [pc, #136]	; (8000788 <debounceFSM_update+0xd0>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000704:	e037      	b.n	8000776 <debounceFSM_update+0xbe>

	case BUTTON_FALLING:
		if (delayRead(&debounceInit)) {
 8000706:	4821      	ldr	r0, [pc, #132]	; (800078c <debounceFSM_update+0xd4>)
 8000708:	f7ff ff5b 	bl	80005c2 <delayRead>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <debounceFSM_update+0x6c>
			fsmState = BUTTON_DOWN;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <debounceFSM_update+0xcc>)
 8000714:	2202      	movs	r2, #2
 8000716:	701a      	strb	r2, [r3, #0]
			isKeyPressed = true;
 8000718:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <debounceFSM_update+0xd0>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
			buttonPressed();
 800071e:	f000 f849 	bl	80007b4 <buttonPressed>
		}
		else {
			fsmState = BUTTON_UP;

		}
		break;
 8000722:	e02b      	b.n	800077c <debounceFSM_update+0xc4>
			fsmState = BUTTON_UP;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <debounceFSM_update+0xcc>)
 8000726:	2200      	movs	r2, #0
 8000728:	701a      	strb	r2, [r3, #0]
		break;
 800072a:	e027      	b.n	800077c <debounceFSM_update+0xc4>

	case BUTTON_DOWN:
		if (buttonState == GPIO_PIN_SET){}
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <debounceFSM_update+0xc8>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d122      	bne.n	800077a <debounceFSM_update+0xc2>
		else if (buttonState == GPIO_PIN_RESET){
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <debounceFSM_update+0xc8>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f083 0301 	eor.w	r3, r3, #1
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d01b      	beq.n	800077a <debounceFSM_update+0xc2>
			fsmState = BUTTON_RAISING;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <debounceFSM_update+0xcc>)
 8000744:	2203      	movs	r2, #3
 8000746:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000748:	e017      	b.n	800077a <debounceFSM_update+0xc2>

	case BUTTON_RAISING:

		if (delayRead(&debounceInit)) {
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <debounceFSM_update+0xd4>)
 800074c:	f7ff ff39 	bl	80005c2 <delayRead>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d008      	beq.n	8000768 <debounceFSM_update+0xb0>
			fsmState = BUTTON_UP;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <debounceFSM_update+0xcc>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
			isKeyPressed = false;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <debounceFSM_update+0xd0>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
			buttonReleased();
 8000762:	f000 f82e 	bl	80007c2 <buttonReleased>
		else {
			fsmState = BUTTON_DOWN;

		}

		break;
 8000766:	e009      	b.n	800077c <debounceFSM_update+0xc4>
			fsmState = BUTTON_DOWN;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <debounceFSM_update+0xcc>)
 800076a:	2202      	movs	r2, #2
 800076c:	701a      	strb	r2, [r3, #0]
		break;
 800076e:	e005      	b.n	800077c <debounceFSM_update+0xc4>


	default:
		FSM_error_handler();
 8000770:	f7ff ff6e 	bl	8000650 <FSM_error_handler>
		break;
 8000774:	e002      	b.n	800077c <debounceFSM_update+0xc4>
		break;
 8000776:	bf00      	nop
 8000778:	e000      	b.n	800077c <debounceFSM_update+0xc4>
		break;
 800077a:	bf00      	nop
	}
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000009e 	.word	0x2000009e
 8000784:	2000009c 	.word	0x2000009c
 8000788:	2000009d 	.word	0x2000009d
 800078c:	200000a0 	.word	0x200000a0

08000790 <readKey>:

bool_t readKey() {
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
	bool_t read = isKeyPressed;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <readKey+0x20>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
	isKeyPressed = false;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <readKey+0x20>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
	return read;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	2000009d 	.word	0x2000009d

080007b4 <buttonPressed>:

void buttonPressed() {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	BSP_LED_On(LED3);
 80007b8:	2002      	movs	r0, #2
 80007ba:	f000 f859 	bl	8000870 <BSP_LED_On>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <buttonReleased>:

void buttonReleased() {
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
	BSP_LED_Off(LED3);
 80007c6:	2002      	movs	r0, #2
 80007c8:	f000 f86c 	bl	80008a4 <BSP_LED_Off>
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d10e      	bne.n	80007fe <BSP_LED_Init+0x2e>
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <BSP_LED_Init+0x94>)
 80007e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e8:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <BSP_LED_Init+0x94>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	6313      	str	r3, [r2, #48]	; 0x30
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <BSP_LED_Init+0x94>)
 80007f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f4:	f003 0302 	and.w	r3, r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	e00d      	b.n	800081a <BSP_LED_Init+0x4a>
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	4b18      	ldr	r3, [pc, #96]	; (8000864 <BSP_LED_Init+0x94>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <BSP_LED_Init+0x94>)
 8000808:	f043 0302 	orr.w	r3, r3, #2
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <BSP_LED_Init+0x94>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0302 	and.w	r3, r3, #2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	4a12      	ldr	r2, [pc, #72]	; (8000868 <BSP_LED_Init+0x98>)
 800081e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800082c:	2302      	movs	r3, #2
 800082e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <BSP_LED_Init+0x9c>)
 8000834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000838:	f107 0214 	add.w	r2, r7, #20
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fb78 	bl	8000f34 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <BSP_LED_Init+0x9c>)
 8000848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	4a06      	ldr	r2, [pc, #24]	; (8000868 <BSP_LED_Init+0x98>)
 8000850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	f000 fd30 	bl	80012bc <HAL_GPIO_WritePin>
}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	08002fb8 	.word	0x08002fb8
 800086c:	20000000 	.word	0x20000000

08000870 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	4a07      	ldr	r2, [pc, #28]	; (800089c <BSP_LED_On+0x2c>)
 800087e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	4a06      	ldr	r2, [pc, #24]	; (80008a0 <BSP_LED_On+0x30>)
 8000886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800088a:	2201      	movs	r2, #1
 800088c:	4619      	mov	r1, r3
 800088e:	f000 fd15 	bl	80012bc <HAL_GPIO_WritePin>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000000 	.word	0x20000000
 80008a0:	08002fb8 	.word	0x08002fb8

080008a4 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <BSP_LED_Off+0x2c>)
 80008b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <BSP_LED_Off+0x30>)
 80008ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008be:	2200      	movs	r2, #0
 80008c0:	4619      	mov	r1, r3
 80008c2:	f000 fcfb 	bl	80012bc <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000000 	.word	0x20000000
 80008d4:	08002fb8 	.word	0x08002fb8

080008d8 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <BSP_LED_Toggle+0x2c>)
 80008e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <BSP_LED_Toggle+0x30>)
 80008ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80008f2:	4619      	mov	r1, r3
 80008f4:	4610      	mov	r0, r2
 80008f6:	f000 fcfa 	bl	80012ee <HAL_GPIO_TogglePin>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000000 	.word	0x20000000
 8000908:	08002fb8 	.word	0x08002fb8

0800090c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	460a      	mov	r2, r1
 8000916:	71fb      	strb	r3, [r7, #7]
 8000918:	4613      	mov	r3, r2
 800091a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800091c:	2300      	movs	r3, #0
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <BSP_PB_Init+0xa4>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <BSP_PB_Init+0xa4>)
 8000926:	f043 0304 	orr.w	r3, r3, #4
 800092a:	6313      	str	r3, [r2, #48]	; 0x30
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <BSP_PB_Init+0xa4>)
 800092e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000930:	f003 0304 	and.w	r3, r3, #4
 8000934:	60bb      	str	r3, [r7, #8]
 8000936:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8000938:	79bb      	ldrb	r3, [r7, #6]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d112      	bne.n	8000964 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800093e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000942:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	2300      	movs	r3, #0
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000948:	2302      	movs	r3, #2
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800094c:	2302      	movs	r3, #2
 800094e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <BSP_PB_Init+0xa8>)
 8000954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000958:	f107 020c 	add.w	r2, r7, #12
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f000 fae8 	bl	8000f34 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d11d      	bne.n	80009a6 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800096a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800096e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8000974:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000978:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <BSP_PB_Init+0xa8>)
 800097e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000982:	f107 020c 	add.w	r2, r7, #12
 8000986:	4611      	mov	r1, r2
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fad3 	bl	8000f34 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800098e:	2328      	movs	r3, #40	; 0x28
 8000990:	b25b      	sxtb	r3, r3
 8000992:	2200      	movs	r2, #0
 8000994:	210f      	movs	r1, #15
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fa95 	bl	8000ec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800099c:	2328      	movs	r3, #40	; 0x28
 800099e:	b25b      	sxtb	r3, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 faac 	bl	8000efe <HAL_NVIC_EnableIRQ>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3720      	adds	r7, #32
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	2000000c 	.word	0x2000000c

080009b8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a06      	ldr	r2, [pc, #24]	; (80009e0 <BSP_PB_GetState+0x28>)
 80009c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 fc5b 	bl	800128c <HAL_GPIO_ReadPin>
 80009d6:	4603      	mov	r3, r0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000000c 	.word	0x2000000c

080009e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <SystemInit+0x60>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a15      	ldr	r2, [pc, #84]	; (8000a44 <SystemInit+0x60>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <SystemInit+0x64>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <SystemInit+0x64>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a04:	4b10      	ldr	r3, [pc, #64]	; (8000a48 <SystemInit+0x64>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <SystemInit+0x64>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <SystemInit+0x64>)
 8000a10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <SystemInit+0x64>)
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <SystemInit+0x68>)
 8000a1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <SystemInit+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a08      	ldr	r2, [pc, #32]	; (8000a48 <SystemInit+0x64>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <SystemInit+0x60>)
 8000a34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a38:	609a      	str	r2, [r3, #8]
#endif
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	24003010 	.word	0x24003010

08000a50 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000aa4:	f000 f914 	bl	8000cd0 <HAL_IncTick>
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	return 1;
 8000ab0:	2301      	movs	r3, #1
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_kill>:

int _kill(int pid, int sig)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ac6:	f001 fc09 	bl	80022dc <__errno>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2216      	movs	r2, #22
 8000ace:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <_exit>:

void _exit (int status)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff ffe7 	bl	8000abc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000aee:	e7fe      	b.n	8000aee <_exit+0x12>

08000af0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e00a      	b.n	8000b18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b02:	f3af 8000 	nop.w
 8000b06:	4601      	mov	r1, r0
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	1c5a      	adds	r2, r3, #1
 8000b0c:	60ba      	str	r2, [r7, #8]
 8000b0e:	b2ca      	uxtb	r2, r1
 8000b10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	3301      	adds	r3, #1
 8000b16:	617b      	str	r3, [r7, #20]
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	dbf0      	blt.n	8000b02 <_read+0x12>
	}

return len;
 8000b20:	687b      	ldr	r3, [r7, #4]
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	60f8      	str	r0, [r7, #12]
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b36:	2300      	movs	r3, #0
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	e009      	b.n	8000b50 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	60ba      	str	r2, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf1      	blt.n	8000b3c <_write+0x12>
	}
	return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_close>:

int _close(int file)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b8c:	2300      	movs	r3, #0
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <_isatty>:

int _isatty(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
	return 1;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <_sbrk+0x5c>)
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <_sbrk+0x60>)
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <_sbrk+0x64>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d102      	bne.n	8000bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <_sbrk+0x64>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <_sbrk+0x68>)
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d207      	bcs.n	8000c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bfc:	f001 fb6e 	bl	80022dc <__errno>
 8000c00:	4603      	mov	r3, r0
 8000c02:	220c      	movs	r2, #12
 8000c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c0a:	e009      	b.n	8000c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c12:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <_sbrk+0x64>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <_sbrk+0x64>)
 8000c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20030000 	.word	0x20030000
 8000c2c:	00000400 	.word	0x00000400
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	20000218 	.word	0x20000218

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_Init+0x34>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <HAL_Init+0x34>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x34>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x34>)
 8000c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f92b 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f000 fb5f 	bl	8001322 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023c00 	.word	0x40023c00

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f943 	bl	8000f1a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 f90b 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000010 	.word	0x20000010
 8000cc8:	20000018 	.word	0x20000018
 8000ccc:	20000014 	.word	0x20000014

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000018 	.word	0x20000018
 8000cf4:	200000b0 	.word	0x200000b0

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200000b0 	.word	0x200000b0

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	db0b      	blt.n	8000d9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	f003 021f 	and.w	r2, r3, #31
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <__NVIC_EnableIRQ+0x38>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	2001      	movs	r0, #1
 8000d96:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000e100 	.word	0xe000e100

08000db0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	6039      	str	r1, [r7, #0]
 8000dba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db0a      	blt.n	8000dda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	490c      	ldr	r1, [pc, #48]	; (8000dfc <__NVIC_SetPriority+0x4c>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	0112      	lsls	r2, r2, #4
 8000dd0:	b2d2      	uxtb	r2, r2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd8:	e00a      	b.n	8000df0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4908      	ldr	r1, [pc, #32]	; (8000e00 <__NVIC_SetPriority+0x50>)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	3b04      	subs	r3, #4
 8000de8:	0112      	lsls	r2, r2, #4
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	440b      	add	r3, r1
 8000dee:	761a      	strb	r2, [r3, #24]
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b089      	sub	sp, #36	; 0x24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f003 0307 	and.w	r3, r3, #7
 8000e16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	f1c3 0307 	rsb	r3, r3, #7
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	bf28      	it	cs
 8000e22:	2304      	movcs	r3, #4
 8000e24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3304      	adds	r3, #4
 8000e2a:	2b06      	cmp	r3, #6
 8000e2c:	d902      	bls.n	8000e34 <NVIC_EncodePriority+0x30>
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	3b03      	subs	r3, #3
 8000e32:	e000      	b.n	8000e36 <NVIC_EncodePriority+0x32>
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	401a      	ands	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa01 f303 	lsl.w	r3, r1, r3
 8000e56:	43d9      	mvns	r1, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	4313      	orrs	r3, r2
         );
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3724      	adds	r7, #36	; 0x24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e90:	f7ff ff8e 	bl	8000db0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff29 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff3e 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff8e 	bl	8000e04 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5d 	bl	8000db0 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff31 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ffa2 	bl	8000e6c <SysTick_Config>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e177      	b.n	8001240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f50:	2201      	movs	r2, #1
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8166 	bne.w	800123a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d005      	beq.n	8000f86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d130      	bne.n	8000fe8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	68da      	ldr	r2, [r3, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	091b      	lsrs	r3, r3, #4
 8000fd2:	f003 0201 	and.w	r2, r3, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f003 0303 	and.w	r3, r3, #3
 8000ff0:	2b03      	cmp	r3, #3
 8000ff2:	d017      	beq.n	8001024 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d123      	bne.n	8001078 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	08da      	lsrs	r2, r3, #3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3208      	adds	r2, #8
 8001038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	f003 0307 	and.w	r3, r3, #7
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	4013      	ands	r3, r2
 8001052:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	08da      	lsrs	r2, r3, #3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3208      	adds	r2, #8
 8001072:	69b9      	ldr	r1, [r7, #24]
 8001074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0203 	and.w	r2, r3, #3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80c0 	beq.w	800123a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b66      	ldr	r3, [pc, #408]	; (8001258 <HAL_GPIO_Init+0x324>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a65      	ldr	r2, [pc, #404]	; (8001258 <HAL_GPIO_Init+0x324>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b63      	ldr	r3, [pc, #396]	; (8001258 <HAL_GPIO_Init+0x324>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010d6:	4a61      	ldr	r2, [pc, #388]	; (800125c <HAL_GPIO_Init+0x328>)
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	089b      	lsrs	r3, r3, #2
 80010dc:	3302      	adds	r3, #2
 80010de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	220f      	movs	r2, #15
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a58      	ldr	r2, [pc, #352]	; (8001260 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d037      	beq.n	8001172 <HAL_GPIO_Init+0x23e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a57      	ldr	r2, [pc, #348]	; (8001264 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d031      	beq.n	800116e <HAL_GPIO_Init+0x23a>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a56      	ldr	r2, [pc, #344]	; (8001268 <HAL_GPIO_Init+0x334>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d02b      	beq.n	800116a <HAL_GPIO_Init+0x236>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a55      	ldr	r2, [pc, #340]	; (800126c <HAL_GPIO_Init+0x338>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d025      	beq.n	8001166 <HAL_GPIO_Init+0x232>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_GPIO_Init+0x33c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d01f      	beq.n	8001162 <HAL_GPIO_Init+0x22e>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a53      	ldr	r2, [pc, #332]	; (8001274 <HAL_GPIO_Init+0x340>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d019      	beq.n	800115e <HAL_GPIO_Init+0x22a>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a52      	ldr	r2, [pc, #328]	; (8001278 <HAL_GPIO_Init+0x344>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0x226>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a51      	ldr	r2, [pc, #324]	; (800127c <HAL_GPIO_Init+0x348>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00d      	beq.n	8001156 <HAL_GPIO_Init+0x222>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a50      	ldr	r2, [pc, #320]	; (8001280 <HAL_GPIO_Init+0x34c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d007      	beq.n	8001152 <HAL_GPIO_Init+0x21e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4f      	ldr	r2, [pc, #316]	; (8001284 <HAL_GPIO_Init+0x350>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d101      	bne.n	800114e <HAL_GPIO_Init+0x21a>
 800114a:	2309      	movs	r3, #9
 800114c:	e012      	b.n	8001174 <HAL_GPIO_Init+0x240>
 800114e:	230a      	movs	r3, #10
 8001150:	e010      	b.n	8001174 <HAL_GPIO_Init+0x240>
 8001152:	2308      	movs	r3, #8
 8001154:	e00e      	b.n	8001174 <HAL_GPIO_Init+0x240>
 8001156:	2307      	movs	r3, #7
 8001158:	e00c      	b.n	8001174 <HAL_GPIO_Init+0x240>
 800115a:	2306      	movs	r3, #6
 800115c:	e00a      	b.n	8001174 <HAL_GPIO_Init+0x240>
 800115e:	2305      	movs	r3, #5
 8001160:	e008      	b.n	8001174 <HAL_GPIO_Init+0x240>
 8001162:	2304      	movs	r3, #4
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x240>
 8001166:	2303      	movs	r3, #3
 8001168:	e004      	b.n	8001174 <HAL_GPIO_Init+0x240>
 800116a:	2302      	movs	r3, #2
 800116c:	e002      	b.n	8001174 <HAL_GPIO_Init+0x240>
 800116e:	2301      	movs	r3, #1
 8001170:	e000      	b.n	8001174 <HAL_GPIO_Init+0x240>
 8001172:	2300      	movs	r3, #0
 8001174:	69fa      	ldr	r2, [r7, #28]
 8001176:	f002 0203 	and.w	r2, r2, #3
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	4093      	lsls	r3, r2
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001184:	4935      	ldr	r1, [pc, #212]	; (800125c <HAL_GPIO_Init+0x328>)
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001192:	4b3d      	ldr	r3, [pc, #244]	; (8001288 <HAL_GPIO_Init+0x354>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011b6:	4a34      	ldr	r2, [pc, #208]	; (8001288 <HAL_GPIO_Init+0x354>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011bc:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_GPIO_Init+0x354>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011e0:	4a29      	ldr	r2, [pc, #164]	; (8001288 <HAL_GPIO_Init+0x354>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b28      	ldr	r3, [pc, #160]	; (8001288 <HAL_GPIO_Init+0x354>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a1f      	ldr	r2, [pc, #124]	; (8001288 <HAL_GPIO_Init+0x354>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_GPIO_Init+0x354>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_GPIO_Init+0x354>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3301      	adds	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0f      	cmp	r3, #15
 8001244:	f67f ae84 	bls.w	8000f50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40013800 	.word	0x40013800
 8001260:	40020000 	.word	0x40020000
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	40021000 	.word	0x40021000
 8001274:	40021400 	.word	0x40021400
 8001278:	40021800 	.word	0x40021800
 800127c:	40021c00 	.word	0x40021c00
 8001280:	40022000 	.word	0x40022000
 8001284:	40022400 	.word	0x40022400
 8001288:	40013c00 	.word	0x40013c00

0800128c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012d8:	e003      	b.n	80012e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	041a      	lsls	r2, r3, #16
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	619a      	str	r2, [r3, #24]
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b085      	sub	sp, #20
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001300:	887a      	ldrh	r2, [r7, #2]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	041a      	lsls	r2, r3, #16
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43d9      	mvns	r1, r3
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	400b      	ands	r3, r1
 8001310:	431a      	orrs	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	619a      	str	r2, [r3, #24]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001322:	b480      	push	{r7}
 8001324:	af00      	add	r7, sp, #0

}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	4a1f      	ldr	r2, [pc, #124]	; (80013c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	; 0x40
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001358:	2201      	movs	r2, #1
 800135a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800135c:	f7ff fccc 	bl	8000cf8 <HAL_GetTick>
 8001360:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001362:	e009      	b.n	8001378 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001364:	f7ff fcc8 	bl	8000cf8 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001372:	d901      	bls.n	8001378 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e01f      	b.n	80013b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001384:	d1ee      	bne.n	8001364 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001388:	2201      	movs	r2, #1
 800138a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138c:	f7ff fcb4 	bl	8000cf8 <HAL_GetTick>
 8001390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001392:	e009      	b.n	80013a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001394:	f7ff fcb0 	bl	8000cf8 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a2:	d901      	bls.n	80013a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e007      	b.n	80013b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013b4:	d1ee      	bne.n	8001394 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	420e0040 	.word	0x420e0040
 80013c8:	40007000 	.word	0x40007000
 80013cc:	420e0044 	.word	0x420e0044

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e267      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	4b88      	ldr	r3, [pc, #544]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4b85      	ldr	r3, [pc, #532]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b82      	ldr	r3, [pc, #520]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b7e      	ldr	r3, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e242      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b76      	ldr	r3, [pc, #472]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a75      	ldr	r2, [pc, #468]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b70      	ldr	r3, [pc, #448]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a6f      	ldr	r2, [pc, #444]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6c      	ldr	r2, [pc, #432]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b69      	ldr	r3, [pc, #420]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a68      	ldr	r2, [pc, #416]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fc36 	bl	8000cf8 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fc32 	bl	8000cf8 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e207      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fc22 	bl	8000cf8 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fc1e 	bl	8000cf8 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1f3      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b51      	ldr	r3, [pc, #324]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b44      	ldr	r3, [pc, #272]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b41      	ldr	r3, [pc, #260]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1c7      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4937      	ldr	r1, [pc, #220]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fbd7 	bl	8000cf8 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fbd3 	bl	8000cf8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e1a8      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4925      	ldr	r1, [pc, #148]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x244>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fbb6 	bl	8000cf8 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fbb2 	bl	8000cf8 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e187      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d036      	beq.n	8001628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb96 	bl	8000cf8 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb92 	bl	8000cf8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e167      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_OscConfig+0x240>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e01b      	b.n	8001628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x248>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fb7f 	bl	8000cf8 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e00e      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb7b 	bl	8000cf8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d907      	bls.n	800161c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e150      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001610:	40023800 	.word	0x40023800
 8001614:	42470000 	.word	0x42470000
 8001618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161c:	4b88      	ldr	r3, [pc, #544]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1ea      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8097 	beq.w	8001764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800163a:	4b81      	ldr	r3, [pc, #516]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10f      	bne.n	8001666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a7c      	ldr	r2, [pc, #496]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b7a      	ldr	r3, [pc, #488]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001662:	2301      	movs	r3, #1
 8001664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001666:	4b77      	ldr	r3, [pc, #476]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d118      	bne.n	80016a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001672:	4b74      	ldr	r3, [pc, #464]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a73      	ldr	r2, [pc, #460]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167e:	f7ff fb3b 	bl	8000cf8 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001686:	f7ff fb37 	bl	8000cf8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e10c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001698:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x474>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x2ea>
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b0:	4a63      	ldr	r2, [pc, #396]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6713      	str	r3, [r2, #112]	; 0x70
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x30c>
 80016c2:	4b5f      	ldr	r3, [pc, #380]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c6:	4a5e      	ldr	r2, [pc, #376]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	4b5c      	ldr	r3, [pc, #368]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d2:	4a5b      	ldr	r2, [pc, #364]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6713      	str	r3, [r2, #112]	; 0x70
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x324>
 80016dc:	4b58      	ldr	r3, [pc, #352]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e0:	4a57      	ldr	r2, [pc, #348]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6713      	str	r3, [r2, #112]	; 0x70
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ec:	4a54      	ldr	r2, [pc, #336]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d015      	beq.n	8001728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fafc 	bl	8000cf8 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001702:	e00a      	b.n	800171a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001704:	f7ff faf8 	bl	8000cf8 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001712:	4293      	cmp	r3, r2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0cb      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4b49      	ldr	r3, [pc, #292]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0ee      	beq.n	8001704 <HAL_RCC_OscConfig+0x334>
 8001726:	e014      	b.n	8001752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001728:	f7ff fae6 	bl	8000cf8 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172e:	e00a      	b.n	8001746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001730:	f7ff fae2 	bl	8000cf8 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e0b5      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001746:	4b3e      	ldr	r3, [pc, #248]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1ee      	bne.n	8001730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d105      	bne.n	8001764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001758:	4b39      	ldr	r3, [pc, #228]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a38      	ldr	r2, [pc, #224]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 800175e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a1 	beq.w	80018b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176e:	4b34      	ldr	r3, [pc, #208]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d05c      	beq.n	8001834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d141      	bne.n	8001806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b31      	ldr	r3, [pc, #196]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fab6 	bl	8000cf8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001790:	f7ff fab2 	bl	8000cf8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e087      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	019b      	lsls	r3, r3, #6
 80017be:	431a      	orrs	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	085b      	lsrs	r3, r3, #1
 80017c6:	3b01      	subs	r3, #1
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	061b      	lsls	r3, r3, #24
 80017d2:	491b      	ldr	r1, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff fa8b 	bl	8000cf8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e6:	f7ff fa87 	bl	8000cf8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x416>
 8001804:	e054      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fa74 	bl	8000cf8 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fa70 	bl	8000cf8 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e045      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
 8001832:	e03d      	b.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e038      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
 8001840:	40023800 	.word	0x40023800
 8001844:	40007000 	.word	0x40007000
 8001848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <HAL_RCC_OscConfig+0x4ec>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d028      	beq.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d121      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d11a      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800187c:	4013      	ands	r3, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001884:	4293      	cmp	r3, r2
 8001886:	d111      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001892:	085b      	lsrs	r3, r3, #1
 8001894:	3b01      	subs	r3, #1
 8001896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d001      	beq.n	80018b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e000      	b.n	80018b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff f9a2 	bl	8000cf8 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff f99e 	bl	8000cf8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 f821 	bl	8001a8c <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	; (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f902 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08002fc0 	.word	0x08002fc0
 8001a84:	20000010 	.word	0x20000010
 8001a88:	20000014 	.word	0x20000014

08001a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a90:	b094      	sub	sp, #80	; 0x50
 8001a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	647b      	str	r3, [r7, #68]	; 0x44
 8001a98:	2300      	movs	r3, #0
 8001a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aa4:	4b79      	ldr	r3, [pc, #484]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d00d      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x40>
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f200 80e1 	bhi.w	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001abe:	e0db      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ac0:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ac4:	e0db      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ac6:	4b73      	ldr	r3, [pc, #460]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e0d8      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001acc:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad6:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d063      	beq.n	8001baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	4b6a      	ldr	r3, [pc, #424]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	099b      	lsrs	r3, r3, #6
 8001ae8:	2200      	movs	r2, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
 8001afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001afe:	4622      	mov	r2, r4
 8001b00:	462b      	mov	r3, r5
 8001b02:	f04f 0000 	mov.w	r0, #0
 8001b06:	f04f 0100 	mov.w	r1, #0
 8001b0a:	0159      	lsls	r1, r3, #5
 8001b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b10:	0150      	lsls	r0, r2, #5
 8001b12:	4602      	mov	r2, r0
 8001b14:	460b      	mov	r3, r1
 8001b16:	4621      	mov	r1, r4
 8001b18:	1a51      	subs	r1, r2, r1
 8001b1a:	6139      	str	r1, [r7, #16]
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	f04f 0300 	mov.w	r3, #0
 8001b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b30:	4659      	mov	r1, fp
 8001b32:	018b      	lsls	r3, r1, #6
 8001b34:	4651      	mov	r1, sl
 8001b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b3a:	4651      	mov	r1, sl
 8001b3c:	018a      	lsls	r2, r1, #6
 8001b3e:	4651      	mov	r1, sl
 8001b40:	ebb2 0801 	subs.w	r8, r2, r1
 8001b44:	4659      	mov	r1, fp
 8001b46:	eb63 0901 	sbc.w	r9, r3, r1
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b5e:	4690      	mov	r8, r2
 8001b60:	4699      	mov	r9, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	eb18 0303 	adds.w	r3, r8, r3
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	eb49 0303 	adc.w	r3, r9, r3
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	f04f 0300 	mov.w	r3, #0
 8001b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b7e:	4629      	mov	r1, r5
 8001b80:	024b      	lsls	r3, r1, #9
 8001b82:	4621      	mov	r1, r4
 8001b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b88:	4621      	mov	r1, r4
 8001b8a:	024a      	lsls	r2, r1, #9
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b92:	2200      	movs	r2, #0
 8001b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b9c:	f7fe fb78 	bl	8000290 <__aeabi_uldivmod>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba8:	e058      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	099b      	lsrs	r3, r3, #6
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4611      	mov	r1, r2
 8001bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bba:	623b      	str	r3, [r7, #32]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bc4:	4642      	mov	r2, r8
 8001bc6:	464b      	mov	r3, r9
 8001bc8:	f04f 0000 	mov.w	r0, #0
 8001bcc:	f04f 0100 	mov.w	r1, #0
 8001bd0:	0159      	lsls	r1, r3, #5
 8001bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bd6:	0150      	lsls	r0, r2, #5
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4641      	mov	r1, r8
 8001bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8001be2:	4649      	mov	r1, r9
 8001be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8001c00:	eb63 050b 	sbc.w	r5, r3, fp
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	00eb      	lsls	r3, r5, #3
 8001c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c12:	00e2      	lsls	r2, r4, #3
 8001c14:	4614      	mov	r4, r2
 8001c16:	461d      	mov	r5, r3
 8001c18:	4643      	mov	r3, r8
 8001c1a:	18e3      	adds	r3, r4, r3
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	464b      	mov	r3, r9
 8001c20:	eb45 0303 	adc.w	r3, r5, r3
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c32:	4629      	mov	r1, r5
 8001c34:	028b      	lsls	r3, r1, #10
 8001c36:	4621      	mov	r1, r4
 8001c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c3c:	4621      	mov	r1, r4
 8001c3e:	028a      	lsls	r2, r1, #10
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c46:	2200      	movs	r2, #0
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	61fa      	str	r2, [r7, #28]
 8001c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c50:	f7fe fb1e 	bl	8000290 <__aeabi_uldivmod>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4613      	mov	r3, r2
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	3301      	adds	r3, #1
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c76:	e002      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3750      	adds	r7, #80	; 0x50
 8001c84:	46bd      	mov	sp, r7
 8001c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <timeIntervalCalc>:

/*
 * @brief Calculate a randomly value between two delay time
 * @return Calculate value
 */
int timeIntervalCalc(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

	int InternalCal = (rand() % (BLINKY_DELAY_MAX - BLINKY_DELAY_MIN + 1)) + BLINKY_DELAY_MIN;
 8001c9e:	f000 f94d 	bl	8001f3c <rand>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <timeIntervalCalc+0x30>)
 8001ca6:	fb83 1302 	smull	r1, r3, r3, r2
 8001caa:	1199      	asrs	r1, r3, #6
 8001cac:	17d3      	asrs	r3, r2, #31
 8001cae:	1acb      	subs	r3, r1, r3
 8001cb0:	f240 1191 	movw	r1, #401	; 0x191
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	3364      	adds	r3, #100	; 0x64
 8001cbc:	607b      	str	r3, [r7, #4]
	return InternalCal;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	28db9c69 	.word	0x28db9c69

08001ccc <blinkLeds>:

void blinkLeds(){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0

	if (delayRead(&delay_led1)) {
 8001cd0:	4809      	ldr	r0, [pc, #36]	; (8001cf8 <blinkLeds+0x2c>)
 8001cd2:	f7fe fc76 	bl	80005c2 <delayRead>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <blinkLeds+0x16>
		BSP_LED_Toggle(LED1);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f7fe fdfb 	bl	80008d8 <BSP_LED_Toggle>
	}
	if (delayRead(&delay_led2)) {
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <blinkLeds+0x30>)
 8001ce4:	f7fe fc6d 	bl	80005c2 <delayRead>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <blinkLeds+0x28>
		BSP_LED_Toggle(LED2);
 8001cee:	2001      	movs	r0, #1
 8001cf0:	f7fe fdf2 	bl	80008d8 <BSP_LED_Toggle>
	}

}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200000b4 	.word	0x200000b4
 8001cfc:	200000c0 	.word	0x200000c0

08001d00 <main>:

int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

	HAL_Init();
 8001d04:	f7fe ff98 	bl	8000c38 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8001d08:	f000 f858 	bl	8001dbc <SystemClock_Config>

	/* Initialize BSP Led for LED2 */
	BSP_LED_Init(LED1);
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	f7fe fd5f 	bl	80007d0 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7fe fd5c 	bl	80007d0 <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7fe fd59 	bl	80007d0 <BSP_LED_Init>

	BSP_PB_Init(BUTTON_USER,BUTTON_MODE_GPIO);
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2000      	movs	r0, #0
 8001d22:	f7fe fdf3 	bl	800090c <BSP_PB_Init>

	delayInit(&delay_led1,calcDelayLed1);
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <main+0xa8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	481f      	ldr	r0, [pc, #124]	; (8001dac <main+0xac>)
 8001d2e:	f7fe fc33 	bl	8000598 <delayInit>
	delayInit(&delay_led2,calcDelayLed2);
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <main+0xb0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	481e      	ldr	r0, [pc, #120]	; (8001db4 <main+0xb4>)
 8001d3a:	f7fe fc2d 	bl	8000598 <delayInit>
	debounceFSM_init(DelayDebounce);
 8001d3e:	2014      	movs	r0, #20
 8001d40:	f7fe fca6 	bl	8000690 <debounceFSM_init>

	srand(time(NULL));  // Seed to initialize random function, without it function timeIntervalCalc() will be return the same value.
 8001d44:	2000      	movs	r0, #0
 8001d46:	f000 fa57 	bl	80021f8 <time>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4613      	mov	r3, r2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f8c5 	bl	8001ee0 <srand>

	while (1) {

		debounceFSM_update();
 8001d56:	f7fe fcaf 	bl	80006b8 <debounceFSM_update>

		if(readKey()){
 8001d5a:	f7fe fd19 	bl	8000790 <readKey>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01d      	beq.n	8001da0 <main+0xa0>

			calcDelayLed1 = timeIntervalCalc();
 8001d64:	f7ff ff98 	bl	8001c98 <timeIntervalCalc>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <main+0xa8>)
 8001d6c:	6013      	str	r3, [r2, #0]
			calcDelayLed2 = timeIntervalCalc();
 8001d6e:	f7ff ff93 	bl	8001c98 <timeIntervalCalc>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <main+0xb0>)
 8001d76:	6013      	str	r3, [r2, #0]

			printf("%d %d", calcDelayLed1,calcDelayLed2);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <main+0xa8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	; (8001db0 <main+0xb0>)
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <main+0xb8>)
 8001d84:	f000 f9da 	bl	800213c <iprintf>

			delayWrite(&delay_led1, calcDelayLed1);
 8001d88:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <main+0xa8>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4807      	ldr	r0, [pc, #28]	; (8001dac <main+0xac>)
 8001d90:	f7fe fc48 	bl	8000624 <delayWrite>
			delayWrite(&delay_led2, calcDelayLed2);
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <main+0xb0>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	; (8001db4 <main+0xb4>)
 8001d9c:	f7fe fc42 	bl	8000624 <delayWrite>

		}
		blinkLeds();
 8001da0:	f7ff ff94 	bl	8001ccc <blinkLeds>
		debounceFSM_update();
 8001da4:	e7d7      	b.n	8001d56 <main+0x56>
 8001da6:	bf00      	nop
 8001da8:	2000001c 	.word	0x2000001c
 8001dac:	200000b4 	.word	0x200000b4
 8001db0:	20000020 	.word	0x20000020
 8001db4:	200000c0 	.word	0x200000c0
 8001db8:	08002fb0 	.word	0x08002fb0

08001dbc <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b094      	sub	sp, #80	; 0x50
 8001dc0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	4b2c      	ldr	r3, [pc, #176]	; (8001e78 <SystemClock_Config+0xbc>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4a2b      	ldr	r2, [pc, #172]	; (8001e78 <SystemClock_Config+0xbc>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd2:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <SystemClock_Config+0xbc>)
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dde:	2300      	movs	r3, #0
 8001de0:	607b      	str	r3, [r7, #4]
 8001de2:	4b26      	ldr	r3, [pc, #152]	; (8001e7c <SystemClock_Config+0xc0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a25      	ldr	r2, [pc, #148]	; (8001e7c <SystemClock_Config+0xc0>)
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <SystemClock_Config+0xc0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dfe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e02:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e04:	2302      	movs	r3, #2
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e0c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001e0e:	2308      	movs	r3, #8
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8001e12:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fad3 	bl	80013d0 <HAL_RCC_OscConfig>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8001e30:	f000 f826 	bl	8001e80 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e34:	f7ff fa7c 	bl	8001330 <HAL_PWREx_EnableOverDrive>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8001e3e:	f000 f81f 	bl	8001e80 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8001e42:	230f      	movs	r3, #15
 8001e44:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e46:	2302      	movs	r3, #2
 8001e48:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e4e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e5e:	2105      	movs	r1, #5
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fd2d 	bl	80018c0 <HAL_RCC_ClockConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8001e6c:	f000 f808 	bl	8001e80 <Error_Handler>
	}
}
 8001e70:	bf00      	nop
 8001e72:	3750      	adds	r7, #80	; 0x50
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40007000 	.word	0x40007000

08001e80 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8001e84:	2001      	movs	r0, #1
 8001e86:	f7fe fcf3 	bl	8000870 <BSP_LED_On>
	while (1)
 8001e8a:	e7fe      	b.n	8001e8a <Error_Handler+0xa>

08001e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e92:	e003      	b.n	8001e9c <LoopCopyDataInit>

08001e94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9a:	3104      	adds	r1, #4

08001e9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e9c:	480b      	ldr	r0, [pc, #44]	; (8001ecc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea4:	d3f6      	bcc.n	8001e94 <CopyDataInit>
  ldr  r2, =_sbss
 8001ea6:	4a0b      	ldr	r2, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ea8:	e002      	b.n	8001eb0 <LoopFillZerobss>

08001eaa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eaa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eac:	f842 3b04 	str.w	r3, [r2], #4

08001eb0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb4:	d3f9      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eb6:	f7fe fd95 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f000 fa15 	bl	80022e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ebe:	f7ff ff1f 	bl	8001d00 <main>
  bx  lr    
 8001ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ec8:	080030c0 	.word	0x080030c0
  ldr  r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed0:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001ed4:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001ed8:	20000218 	.word	0x20000218

08001edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC_IRQHandler>
	...

08001ee0 <srand>:
 8001ee0:	b538      	push	{r3, r4, r5, lr}
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <srand+0x44>)
 8001ee4:	681d      	ldr	r5, [r3, #0]
 8001ee6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001ee8:	4604      	mov	r4, r0
 8001eea:	b9b3      	cbnz	r3, 8001f1a <srand+0x3a>
 8001eec:	2018      	movs	r0, #24
 8001eee:	f000 fa8d 	bl	800240c <malloc>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6328      	str	r0, [r5, #48]	; 0x30
 8001ef6:	b920      	cbnz	r0, 8001f02 <srand+0x22>
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <srand+0x48>)
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <srand+0x4c>)
 8001efc:	2146      	movs	r1, #70	; 0x46
 8001efe:	f000 fa1b 	bl	8002338 <__assert_func>
 8001f02:	490b      	ldr	r1, [pc, #44]	; (8001f30 <srand+0x50>)
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <srand+0x54>)
 8001f06:	e9c0 1300 	strd	r1, r3, [r0]
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <srand+0x58>)
 8001f0c:	6083      	str	r3, [r0, #8]
 8001f0e:	230b      	movs	r3, #11
 8001f10:	8183      	strh	r3, [r0, #12]
 8001f12:	2100      	movs	r1, #0
 8001f14:	2001      	movs	r0, #1
 8001f16:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001f1a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611c      	str	r4, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	bd38      	pop	{r3, r4, r5, pc}
 8001f24:	2000007c 	.word	0x2000007c
 8001f28:	08002fd0 	.word	0x08002fd0
 8001f2c:	08002fe7 	.word	0x08002fe7
 8001f30:	abcd330e 	.word	0xabcd330e
 8001f34:	e66d1234 	.word	0xe66d1234
 8001f38:	0005deec 	.word	0x0005deec

08001f3c <rand>:
 8001f3c:	4b16      	ldr	r3, [pc, #88]	; (8001f98 <rand+0x5c>)
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	681c      	ldr	r4, [r3, #0]
 8001f42:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f44:	b9b3      	cbnz	r3, 8001f74 <rand+0x38>
 8001f46:	2018      	movs	r0, #24
 8001f48:	f000 fa60 	bl	800240c <malloc>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	6320      	str	r0, [r4, #48]	; 0x30
 8001f50:	b920      	cbnz	r0, 8001f5c <rand+0x20>
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <rand+0x60>)
 8001f54:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <rand+0x64>)
 8001f56:	2152      	movs	r1, #82	; 0x52
 8001f58:	f000 f9ee 	bl	8002338 <__assert_func>
 8001f5c:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <rand+0x68>)
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <rand+0x6c>)
 8001f60:	e9c0 1300 	strd	r1, r3, [r0]
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <rand+0x70>)
 8001f66:	6083      	str	r3, [r0, #8]
 8001f68:	230b      	movs	r3, #11
 8001f6a:	8183      	strh	r3, [r0, #12]
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2001      	movs	r0, #1
 8001f70:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001f74:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001f76:	480e      	ldr	r0, [pc, #56]	; (8001fb0 <rand+0x74>)
 8001f78:	690b      	ldr	r3, [r1, #16]
 8001f7a:	694c      	ldr	r4, [r1, #20]
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <rand+0x78>)
 8001f7e:	4358      	muls	r0, r3
 8001f80:	fb02 0004 	mla	r0, r2, r4, r0
 8001f84:	fba3 3202 	umull	r3, r2, r3, r2
 8001f88:	3301      	adds	r3, #1
 8001f8a:	eb40 0002 	adc.w	r0, r0, r2
 8001f8e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001f92:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001f96:	bd10      	pop	{r4, pc}
 8001f98:	2000007c 	.word	0x2000007c
 8001f9c:	08002fd0 	.word	0x08002fd0
 8001fa0:	08002fe7 	.word	0x08002fe7
 8001fa4:	abcd330e 	.word	0xabcd330e
 8001fa8:	e66d1234 	.word	0xe66d1234
 8001fac:	0005deec 	.word	0x0005deec
 8001fb0:	5851f42d 	.word	0x5851f42d
 8001fb4:	4c957f2d 	.word	0x4c957f2d

08001fb8 <std>:
 8001fb8:	2300      	movs	r3, #0
 8001fba:	b510      	push	{r4, lr}
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8001fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001fc6:	6083      	str	r3, [r0, #8]
 8001fc8:	8181      	strh	r1, [r0, #12]
 8001fca:	6643      	str	r3, [r0, #100]	; 0x64
 8001fcc:	81c2      	strh	r2, [r0, #14]
 8001fce:	6183      	str	r3, [r0, #24]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	2208      	movs	r2, #8
 8001fd4:	305c      	adds	r0, #92	; 0x5c
 8001fd6:	f000 f906 	bl	80021e6 <memset>
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <std+0x58>)
 8001fdc:	6263      	str	r3, [r4, #36]	; 0x24
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <std+0x5c>)
 8001fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <std+0x60>)
 8001fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <std+0x64>)
 8001fe8:	6323      	str	r3, [r4, #48]	; 0x30
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <std+0x68>)
 8001fec:	6224      	str	r4, [r4, #32]
 8001fee:	429c      	cmp	r4, r3
 8001ff0:	d006      	beq.n	8002000 <std+0x48>
 8001ff2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001ff6:	4294      	cmp	r4, r2
 8001ff8:	d002      	beq.n	8002000 <std+0x48>
 8001ffa:	33d0      	adds	r3, #208	; 0xd0
 8001ffc:	429c      	cmp	r4, r3
 8001ffe:	d105      	bne.n	800200c <std+0x54>
 8002000:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002008:	f000 b992 	b.w	8002330 <__retarget_lock_init_recursive>
 800200c:	bd10      	pop	{r4, pc}
 800200e:	bf00      	nop
 8002010:	08002161 	.word	0x08002161
 8002014:	08002183 	.word	0x08002183
 8002018:	080021bb 	.word	0x080021bb
 800201c:	080021df 	.word	0x080021df
 8002020:	200000cc 	.word	0x200000cc

08002024 <stdio_exit_handler>:
 8002024:	4a02      	ldr	r2, [pc, #8]	; (8002030 <stdio_exit_handler+0xc>)
 8002026:	4903      	ldr	r1, [pc, #12]	; (8002034 <stdio_exit_handler+0x10>)
 8002028:	4803      	ldr	r0, [pc, #12]	; (8002038 <stdio_exit_handler+0x14>)
 800202a:	f000 b869 	b.w	8002100 <_fwalk_sglue>
 800202e:	bf00      	nop
 8002030:	20000024 	.word	0x20000024
 8002034:	08002c29 	.word	0x08002c29
 8002038:	20000030 	.word	0x20000030

0800203c <cleanup_stdio>:
 800203c:	6841      	ldr	r1, [r0, #4]
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <cleanup_stdio+0x34>)
 8002040:	4299      	cmp	r1, r3
 8002042:	b510      	push	{r4, lr}
 8002044:	4604      	mov	r4, r0
 8002046:	d001      	beq.n	800204c <cleanup_stdio+0x10>
 8002048:	f000 fdee 	bl	8002c28 <_fflush_r>
 800204c:	68a1      	ldr	r1, [r4, #8]
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <cleanup_stdio+0x38>)
 8002050:	4299      	cmp	r1, r3
 8002052:	d002      	beq.n	800205a <cleanup_stdio+0x1e>
 8002054:	4620      	mov	r0, r4
 8002056:	f000 fde7 	bl	8002c28 <_fflush_r>
 800205a:	68e1      	ldr	r1, [r4, #12]
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <cleanup_stdio+0x3c>)
 800205e:	4299      	cmp	r1, r3
 8002060:	d004      	beq.n	800206c <cleanup_stdio+0x30>
 8002062:	4620      	mov	r0, r4
 8002064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002068:	f000 bdde 	b.w	8002c28 <_fflush_r>
 800206c:	bd10      	pop	{r4, pc}
 800206e:	bf00      	nop
 8002070:	200000cc 	.word	0x200000cc
 8002074:	20000134 	.word	0x20000134
 8002078:	2000019c 	.word	0x2000019c

0800207c <global_stdio_init.part.0>:
 800207c:	b510      	push	{r4, lr}
 800207e:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <global_stdio_init.part.0+0x30>)
 8002080:	4c0b      	ldr	r4, [pc, #44]	; (80020b0 <global_stdio_init.part.0+0x34>)
 8002082:	4a0c      	ldr	r2, [pc, #48]	; (80020b4 <global_stdio_init.part.0+0x38>)
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	4620      	mov	r0, r4
 8002088:	2200      	movs	r2, #0
 800208a:	2104      	movs	r1, #4
 800208c:	f7ff ff94 	bl	8001fb8 <std>
 8002090:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002094:	2201      	movs	r2, #1
 8002096:	2109      	movs	r1, #9
 8002098:	f7ff ff8e 	bl	8001fb8 <std>
 800209c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80020a0:	2202      	movs	r2, #2
 80020a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a6:	2112      	movs	r1, #18
 80020a8:	f7ff bf86 	b.w	8001fb8 <std>
 80020ac:	20000204 	.word	0x20000204
 80020b0:	200000cc 	.word	0x200000cc
 80020b4:	08002025 	.word	0x08002025

080020b8 <__sfp_lock_acquire>:
 80020b8:	4801      	ldr	r0, [pc, #4]	; (80020c0 <__sfp_lock_acquire+0x8>)
 80020ba:	f000 b93a 	b.w	8002332 <__retarget_lock_acquire_recursive>
 80020be:	bf00      	nop
 80020c0:	2000020d 	.word	0x2000020d

080020c4 <__sfp_lock_release>:
 80020c4:	4801      	ldr	r0, [pc, #4]	; (80020cc <__sfp_lock_release+0x8>)
 80020c6:	f000 b935 	b.w	8002334 <__retarget_lock_release_recursive>
 80020ca:	bf00      	nop
 80020cc:	2000020d 	.word	0x2000020d

080020d0 <__sinit>:
 80020d0:	b510      	push	{r4, lr}
 80020d2:	4604      	mov	r4, r0
 80020d4:	f7ff fff0 	bl	80020b8 <__sfp_lock_acquire>
 80020d8:	6a23      	ldr	r3, [r4, #32]
 80020da:	b11b      	cbz	r3, 80020e4 <__sinit+0x14>
 80020dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020e0:	f7ff bff0 	b.w	80020c4 <__sfp_lock_release>
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__sinit+0x28>)
 80020e6:	6223      	str	r3, [r4, #32]
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__sinit+0x2c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f5      	bne.n	80020dc <__sinit+0xc>
 80020f0:	f7ff ffc4 	bl	800207c <global_stdio_init.part.0>
 80020f4:	e7f2      	b.n	80020dc <__sinit+0xc>
 80020f6:	bf00      	nop
 80020f8:	0800203d 	.word	0x0800203d
 80020fc:	20000204 	.word	0x20000204

08002100 <_fwalk_sglue>:
 8002100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002104:	4607      	mov	r7, r0
 8002106:	4688      	mov	r8, r1
 8002108:	4614      	mov	r4, r2
 800210a:	2600      	movs	r6, #0
 800210c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002110:	f1b9 0901 	subs.w	r9, r9, #1
 8002114:	d505      	bpl.n	8002122 <_fwalk_sglue+0x22>
 8002116:	6824      	ldr	r4, [r4, #0]
 8002118:	2c00      	cmp	r4, #0
 800211a:	d1f7      	bne.n	800210c <_fwalk_sglue+0xc>
 800211c:	4630      	mov	r0, r6
 800211e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002122:	89ab      	ldrh	r3, [r5, #12]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d907      	bls.n	8002138 <_fwalk_sglue+0x38>
 8002128:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800212c:	3301      	adds	r3, #1
 800212e:	d003      	beq.n	8002138 <_fwalk_sglue+0x38>
 8002130:	4629      	mov	r1, r5
 8002132:	4638      	mov	r0, r7
 8002134:	47c0      	blx	r8
 8002136:	4306      	orrs	r6, r0
 8002138:	3568      	adds	r5, #104	; 0x68
 800213a:	e7e9      	b.n	8002110 <_fwalk_sglue+0x10>

0800213c <iprintf>:
 800213c:	b40f      	push	{r0, r1, r2, r3}
 800213e:	b507      	push	{r0, r1, r2, lr}
 8002140:	4906      	ldr	r1, [pc, #24]	; (800215c <iprintf+0x20>)
 8002142:	ab04      	add	r3, sp, #16
 8002144:	6808      	ldr	r0, [r1, #0]
 8002146:	f853 2b04 	ldr.w	r2, [r3], #4
 800214a:	6881      	ldr	r1, [r0, #8]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	f000 fa3b 	bl	80025c8 <_vfiprintf_r>
 8002152:	b003      	add	sp, #12
 8002154:	f85d eb04 	ldr.w	lr, [sp], #4
 8002158:	b004      	add	sp, #16
 800215a:	4770      	bx	lr
 800215c:	2000007c 	.word	0x2000007c

08002160 <__sread>:
 8002160:	b510      	push	{r4, lr}
 8002162:	460c      	mov	r4, r1
 8002164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002168:	f000 f894 	bl	8002294 <_read_r>
 800216c:	2800      	cmp	r0, #0
 800216e:	bfab      	itete	ge
 8002170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002172:	89a3      	ldrhlt	r3, [r4, #12]
 8002174:	181b      	addge	r3, r3, r0
 8002176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800217a:	bfac      	ite	ge
 800217c:	6563      	strge	r3, [r4, #84]	; 0x54
 800217e:	81a3      	strhlt	r3, [r4, #12]
 8002180:	bd10      	pop	{r4, pc}

08002182 <__swrite>:
 8002182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	461f      	mov	r7, r3
 8002188:	898b      	ldrh	r3, [r1, #12]
 800218a:	05db      	lsls	r3, r3, #23
 800218c:	4605      	mov	r5, r0
 800218e:	460c      	mov	r4, r1
 8002190:	4616      	mov	r6, r2
 8002192:	d505      	bpl.n	80021a0 <__swrite+0x1e>
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	2302      	movs	r3, #2
 800219a:	2200      	movs	r2, #0
 800219c:	f000 f868 	bl	8002270 <_lseek_r>
 80021a0:	89a3      	ldrh	r3, [r4, #12]
 80021a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021aa:	81a3      	strh	r3, [r4, #12]
 80021ac:	4632      	mov	r2, r6
 80021ae:	463b      	mov	r3, r7
 80021b0:	4628      	mov	r0, r5
 80021b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021b6:	f000 b87f 	b.w	80022b8 <_write_r>

080021ba <__sseek>:
 80021ba:	b510      	push	{r4, lr}
 80021bc:	460c      	mov	r4, r1
 80021be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021c2:	f000 f855 	bl	8002270 <_lseek_r>
 80021c6:	1c43      	adds	r3, r0, #1
 80021c8:	89a3      	ldrh	r3, [r4, #12]
 80021ca:	bf15      	itete	ne
 80021cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021d6:	81a3      	strheq	r3, [r4, #12]
 80021d8:	bf18      	it	ne
 80021da:	81a3      	strhne	r3, [r4, #12]
 80021dc:	bd10      	pop	{r4, pc}

080021de <__sclose>:
 80021de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021e2:	f000 b823 	b.w	800222c <_close_r>

080021e6 <memset>:
 80021e6:	4402      	add	r2, r0
 80021e8:	4603      	mov	r3, r0
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d100      	bne.n	80021f0 <memset+0xa>
 80021ee:	4770      	bx	lr
 80021f0:	f803 1b01 	strb.w	r1, [r3], #1
 80021f4:	e7f9      	b.n	80021ea <memset+0x4>
	...

080021f8 <time>:
 80021f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80021fa:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <time+0x30>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	4669      	mov	r1, sp
 8002200:	4604      	mov	r4, r0
 8002202:	6818      	ldr	r0, [r3, #0]
 8002204:	f000 f822 	bl	800224c <_gettimeofday_r>
 8002208:	2800      	cmp	r0, #0
 800220a:	bfbe      	ittt	lt
 800220c:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 8002210:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002214:	e9cd 2300 	strdlt	r2, r3, [sp]
 8002218:	e9dd 0100 	ldrd	r0, r1, [sp]
 800221c:	b10c      	cbz	r4, 8002222 <time+0x2a>
 800221e:	e9c4 0100 	strd	r0, r1, [r4]
 8002222:	b004      	add	sp, #16
 8002224:	bd10      	pop	{r4, pc}
 8002226:	bf00      	nop
 8002228:	2000007c 	.word	0x2000007c

0800222c <_close_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4d06      	ldr	r5, [pc, #24]	; (8002248 <_close_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4604      	mov	r4, r0
 8002234:	4608      	mov	r0, r1
 8002236:	602b      	str	r3, [r5, #0]
 8002238:	f7fe fc93 	bl	8000b62 <_close>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_close_r+0x1a>
 8002240:	682b      	ldr	r3, [r5, #0]
 8002242:	b103      	cbz	r3, 8002246 <_close_r+0x1a>
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000208 	.word	0x20000208

0800224c <_gettimeofday_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4d07      	ldr	r5, [pc, #28]	; (800226c <_gettimeofday_r+0x20>)
 8002250:	2300      	movs	r3, #0
 8002252:	4604      	mov	r4, r0
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	602b      	str	r3, [r5, #0]
 800225a:	f000 fe95 	bl	8002f88 <_gettimeofday>
 800225e:	1c43      	adds	r3, r0, #1
 8002260:	d102      	bne.n	8002268 <_gettimeofday_r+0x1c>
 8002262:	682b      	ldr	r3, [r5, #0]
 8002264:	b103      	cbz	r3, 8002268 <_gettimeofday_r+0x1c>
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	bd38      	pop	{r3, r4, r5, pc}
 800226a:	bf00      	nop
 800226c:	20000208 	.word	0x20000208

08002270 <_lseek_r>:
 8002270:	b538      	push	{r3, r4, r5, lr}
 8002272:	4d07      	ldr	r5, [pc, #28]	; (8002290 <_lseek_r+0x20>)
 8002274:	4604      	mov	r4, r0
 8002276:	4608      	mov	r0, r1
 8002278:	4611      	mov	r1, r2
 800227a:	2200      	movs	r2, #0
 800227c:	602a      	str	r2, [r5, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	f7fe fc96 	bl	8000bb0 <_lseek>
 8002284:	1c43      	adds	r3, r0, #1
 8002286:	d102      	bne.n	800228e <_lseek_r+0x1e>
 8002288:	682b      	ldr	r3, [r5, #0]
 800228a:	b103      	cbz	r3, 800228e <_lseek_r+0x1e>
 800228c:	6023      	str	r3, [r4, #0]
 800228e:	bd38      	pop	{r3, r4, r5, pc}
 8002290:	20000208 	.word	0x20000208

08002294 <_read_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4d07      	ldr	r5, [pc, #28]	; (80022b4 <_read_r+0x20>)
 8002298:	4604      	mov	r4, r0
 800229a:	4608      	mov	r0, r1
 800229c:	4611      	mov	r1, r2
 800229e:	2200      	movs	r2, #0
 80022a0:	602a      	str	r2, [r5, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f7fe fc24 	bl	8000af0 <_read>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_read_r+0x1e>
 80022ac:	682b      	ldr	r3, [r5, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_read_r+0x1e>
 80022b0:	6023      	str	r3, [r4, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	20000208 	.word	0x20000208

080022b8 <_write_r>:
 80022b8:	b538      	push	{r3, r4, r5, lr}
 80022ba:	4d07      	ldr	r5, [pc, #28]	; (80022d8 <_write_r+0x20>)
 80022bc:	4604      	mov	r4, r0
 80022be:	4608      	mov	r0, r1
 80022c0:	4611      	mov	r1, r2
 80022c2:	2200      	movs	r2, #0
 80022c4:	602a      	str	r2, [r5, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	f7fe fc2f 	bl	8000b2a <_write>
 80022cc:	1c43      	adds	r3, r0, #1
 80022ce:	d102      	bne.n	80022d6 <_write_r+0x1e>
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	b103      	cbz	r3, 80022d6 <_write_r+0x1e>
 80022d4:	6023      	str	r3, [r4, #0]
 80022d6:	bd38      	pop	{r3, r4, r5, pc}
 80022d8:	20000208 	.word	0x20000208

080022dc <__errno>:
 80022dc:	4b01      	ldr	r3, [pc, #4]	; (80022e4 <__errno+0x8>)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	2000007c 	.word	0x2000007c

080022e8 <__libc_init_array>:
 80022e8:	b570      	push	{r4, r5, r6, lr}
 80022ea:	4d0d      	ldr	r5, [pc, #52]	; (8002320 <__libc_init_array+0x38>)
 80022ec:	4c0d      	ldr	r4, [pc, #52]	; (8002324 <__libc_init_array+0x3c>)
 80022ee:	1b64      	subs	r4, r4, r5
 80022f0:	10a4      	asrs	r4, r4, #2
 80022f2:	2600      	movs	r6, #0
 80022f4:	42a6      	cmp	r6, r4
 80022f6:	d109      	bne.n	800230c <__libc_init_array+0x24>
 80022f8:	4d0b      	ldr	r5, [pc, #44]	; (8002328 <__libc_init_array+0x40>)
 80022fa:	4c0c      	ldr	r4, [pc, #48]	; (800232c <__libc_init_array+0x44>)
 80022fc:	f000 fe4c 	bl	8002f98 <_init>
 8002300:	1b64      	subs	r4, r4, r5
 8002302:	10a4      	asrs	r4, r4, #2
 8002304:	2600      	movs	r6, #0
 8002306:	42a6      	cmp	r6, r4
 8002308:	d105      	bne.n	8002316 <__libc_init_array+0x2e>
 800230a:	bd70      	pop	{r4, r5, r6, pc}
 800230c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002310:	4798      	blx	r3
 8002312:	3601      	adds	r6, #1
 8002314:	e7ee      	b.n	80022f4 <__libc_init_array+0xc>
 8002316:	f855 3b04 	ldr.w	r3, [r5], #4
 800231a:	4798      	blx	r3
 800231c:	3601      	adds	r6, #1
 800231e:	e7f2      	b.n	8002306 <__libc_init_array+0x1e>
 8002320:	080030b8 	.word	0x080030b8
 8002324:	080030b8 	.word	0x080030b8
 8002328:	080030b8 	.word	0x080030b8
 800232c:	080030bc 	.word	0x080030bc

08002330 <__retarget_lock_init_recursive>:
 8002330:	4770      	bx	lr

08002332 <__retarget_lock_acquire_recursive>:
 8002332:	4770      	bx	lr

08002334 <__retarget_lock_release_recursive>:
 8002334:	4770      	bx	lr
	...

08002338 <__assert_func>:
 8002338:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800233a:	4614      	mov	r4, r2
 800233c:	461a      	mov	r2, r3
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <__assert_func+0x2c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4605      	mov	r5, r0
 8002344:	68d8      	ldr	r0, [r3, #12]
 8002346:	b14c      	cbz	r4, 800235c <__assert_func+0x24>
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <__assert_func+0x30>)
 800234a:	9100      	str	r1, [sp, #0]
 800234c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002350:	4906      	ldr	r1, [pc, #24]	; (800236c <__assert_func+0x34>)
 8002352:	462b      	mov	r3, r5
 8002354:	f000 fc90 	bl	8002c78 <fiprintf>
 8002358:	f000 fd46 	bl	8002de8 <abort>
 800235c:	4b04      	ldr	r3, [pc, #16]	; (8002370 <__assert_func+0x38>)
 800235e:	461c      	mov	r4, r3
 8002360:	e7f3      	b.n	800234a <__assert_func+0x12>
 8002362:	bf00      	nop
 8002364:	2000007c 	.word	0x2000007c
 8002368:	0800303f 	.word	0x0800303f
 800236c:	0800304c 	.word	0x0800304c
 8002370:	0800307a 	.word	0x0800307a

08002374 <_free_r>:
 8002374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002376:	2900      	cmp	r1, #0
 8002378:	d044      	beq.n	8002404 <_free_r+0x90>
 800237a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800237e:	9001      	str	r0, [sp, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f1a1 0404 	sub.w	r4, r1, #4
 8002386:	bfb8      	it	lt
 8002388:	18e4      	addlt	r4, r4, r3
 800238a:	f000 f8e7 	bl	800255c <__malloc_lock>
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <_free_r+0x94>)
 8002390:	9801      	ldr	r0, [sp, #4]
 8002392:	6813      	ldr	r3, [r2, #0]
 8002394:	b933      	cbnz	r3, 80023a4 <_free_r+0x30>
 8002396:	6063      	str	r3, [r4, #4]
 8002398:	6014      	str	r4, [r2, #0]
 800239a:	b003      	add	sp, #12
 800239c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80023a0:	f000 b8e2 	b.w	8002568 <__malloc_unlock>
 80023a4:	42a3      	cmp	r3, r4
 80023a6:	d908      	bls.n	80023ba <_free_r+0x46>
 80023a8:	6825      	ldr	r5, [r4, #0]
 80023aa:	1961      	adds	r1, r4, r5
 80023ac:	428b      	cmp	r3, r1
 80023ae:	bf01      	itttt	eq
 80023b0:	6819      	ldreq	r1, [r3, #0]
 80023b2:	685b      	ldreq	r3, [r3, #4]
 80023b4:	1949      	addeq	r1, r1, r5
 80023b6:	6021      	streq	r1, [r4, #0]
 80023b8:	e7ed      	b.n	8002396 <_free_r+0x22>
 80023ba:	461a      	mov	r2, r3
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	b10b      	cbz	r3, 80023c4 <_free_r+0x50>
 80023c0:	42a3      	cmp	r3, r4
 80023c2:	d9fa      	bls.n	80023ba <_free_r+0x46>
 80023c4:	6811      	ldr	r1, [r2, #0]
 80023c6:	1855      	adds	r5, r2, r1
 80023c8:	42a5      	cmp	r5, r4
 80023ca:	d10b      	bne.n	80023e4 <_free_r+0x70>
 80023cc:	6824      	ldr	r4, [r4, #0]
 80023ce:	4421      	add	r1, r4
 80023d0:	1854      	adds	r4, r2, r1
 80023d2:	42a3      	cmp	r3, r4
 80023d4:	6011      	str	r1, [r2, #0]
 80023d6:	d1e0      	bne.n	800239a <_free_r+0x26>
 80023d8:	681c      	ldr	r4, [r3, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	6053      	str	r3, [r2, #4]
 80023de:	440c      	add	r4, r1
 80023e0:	6014      	str	r4, [r2, #0]
 80023e2:	e7da      	b.n	800239a <_free_r+0x26>
 80023e4:	d902      	bls.n	80023ec <_free_r+0x78>
 80023e6:	230c      	movs	r3, #12
 80023e8:	6003      	str	r3, [r0, #0]
 80023ea:	e7d6      	b.n	800239a <_free_r+0x26>
 80023ec:	6825      	ldr	r5, [r4, #0]
 80023ee:	1961      	adds	r1, r4, r5
 80023f0:	428b      	cmp	r3, r1
 80023f2:	bf04      	itt	eq
 80023f4:	6819      	ldreq	r1, [r3, #0]
 80023f6:	685b      	ldreq	r3, [r3, #4]
 80023f8:	6063      	str	r3, [r4, #4]
 80023fa:	bf04      	itt	eq
 80023fc:	1949      	addeq	r1, r1, r5
 80023fe:	6021      	streq	r1, [r4, #0]
 8002400:	6054      	str	r4, [r2, #4]
 8002402:	e7ca      	b.n	800239a <_free_r+0x26>
 8002404:	b003      	add	sp, #12
 8002406:	bd30      	pop	{r4, r5, pc}
 8002408:	20000210 	.word	0x20000210

0800240c <malloc>:
 800240c:	4b02      	ldr	r3, [pc, #8]	; (8002418 <malloc+0xc>)
 800240e:	4601      	mov	r1, r0
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	f000 b823 	b.w	800245c <_malloc_r>
 8002416:	bf00      	nop
 8002418:	2000007c 	.word	0x2000007c

0800241c <sbrk_aligned>:
 800241c:	b570      	push	{r4, r5, r6, lr}
 800241e:	4e0e      	ldr	r6, [pc, #56]	; (8002458 <sbrk_aligned+0x3c>)
 8002420:	460c      	mov	r4, r1
 8002422:	6831      	ldr	r1, [r6, #0]
 8002424:	4605      	mov	r5, r0
 8002426:	b911      	cbnz	r1, 800242e <sbrk_aligned+0x12>
 8002428:	f000 fcce 	bl	8002dc8 <_sbrk_r>
 800242c:	6030      	str	r0, [r6, #0]
 800242e:	4621      	mov	r1, r4
 8002430:	4628      	mov	r0, r5
 8002432:	f000 fcc9 	bl	8002dc8 <_sbrk_r>
 8002436:	1c43      	adds	r3, r0, #1
 8002438:	d00a      	beq.n	8002450 <sbrk_aligned+0x34>
 800243a:	1cc4      	adds	r4, r0, #3
 800243c:	f024 0403 	bic.w	r4, r4, #3
 8002440:	42a0      	cmp	r0, r4
 8002442:	d007      	beq.n	8002454 <sbrk_aligned+0x38>
 8002444:	1a21      	subs	r1, r4, r0
 8002446:	4628      	mov	r0, r5
 8002448:	f000 fcbe 	bl	8002dc8 <_sbrk_r>
 800244c:	3001      	adds	r0, #1
 800244e:	d101      	bne.n	8002454 <sbrk_aligned+0x38>
 8002450:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002454:	4620      	mov	r0, r4
 8002456:	bd70      	pop	{r4, r5, r6, pc}
 8002458:	20000214 	.word	0x20000214

0800245c <_malloc_r>:
 800245c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002460:	1ccd      	adds	r5, r1, #3
 8002462:	f025 0503 	bic.w	r5, r5, #3
 8002466:	3508      	adds	r5, #8
 8002468:	2d0c      	cmp	r5, #12
 800246a:	bf38      	it	cc
 800246c:	250c      	movcc	r5, #12
 800246e:	2d00      	cmp	r5, #0
 8002470:	4607      	mov	r7, r0
 8002472:	db01      	blt.n	8002478 <_malloc_r+0x1c>
 8002474:	42a9      	cmp	r1, r5
 8002476:	d905      	bls.n	8002484 <_malloc_r+0x28>
 8002478:	230c      	movs	r3, #12
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	2600      	movs	r6, #0
 800247e:	4630      	mov	r0, r6
 8002480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002484:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002558 <_malloc_r+0xfc>
 8002488:	f000 f868 	bl	800255c <__malloc_lock>
 800248c:	f8d8 3000 	ldr.w	r3, [r8]
 8002490:	461c      	mov	r4, r3
 8002492:	bb5c      	cbnz	r4, 80024ec <_malloc_r+0x90>
 8002494:	4629      	mov	r1, r5
 8002496:	4638      	mov	r0, r7
 8002498:	f7ff ffc0 	bl	800241c <sbrk_aligned>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	4604      	mov	r4, r0
 80024a0:	d155      	bne.n	800254e <_malloc_r+0xf2>
 80024a2:	f8d8 4000 	ldr.w	r4, [r8]
 80024a6:	4626      	mov	r6, r4
 80024a8:	2e00      	cmp	r6, #0
 80024aa:	d145      	bne.n	8002538 <_malloc_r+0xdc>
 80024ac:	2c00      	cmp	r4, #0
 80024ae:	d048      	beq.n	8002542 <_malloc_r+0xe6>
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	4631      	mov	r1, r6
 80024b4:	4638      	mov	r0, r7
 80024b6:	eb04 0903 	add.w	r9, r4, r3
 80024ba:	f000 fc85 	bl	8002dc8 <_sbrk_r>
 80024be:	4581      	cmp	r9, r0
 80024c0:	d13f      	bne.n	8002542 <_malloc_r+0xe6>
 80024c2:	6821      	ldr	r1, [r4, #0]
 80024c4:	1a6d      	subs	r5, r5, r1
 80024c6:	4629      	mov	r1, r5
 80024c8:	4638      	mov	r0, r7
 80024ca:	f7ff ffa7 	bl	800241c <sbrk_aligned>
 80024ce:	3001      	adds	r0, #1
 80024d0:	d037      	beq.n	8002542 <_malloc_r+0xe6>
 80024d2:	6823      	ldr	r3, [r4, #0]
 80024d4:	442b      	add	r3, r5
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	f8d8 3000 	ldr.w	r3, [r8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d038      	beq.n	8002552 <_malloc_r+0xf6>
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	42a2      	cmp	r2, r4
 80024e4:	d12b      	bne.n	800253e <_malloc_r+0xe2>
 80024e6:	2200      	movs	r2, #0
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	e00f      	b.n	800250c <_malloc_r+0xb0>
 80024ec:	6822      	ldr	r2, [r4, #0]
 80024ee:	1b52      	subs	r2, r2, r5
 80024f0:	d41f      	bmi.n	8002532 <_malloc_r+0xd6>
 80024f2:	2a0b      	cmp	r2, #11
 80024f4:	d917      	bls.n	8002526 <_malloc_r+0xca>
 80024f6:	1961      	adds	r1, r4, r5
 80024f8:	42a3      	cmp	r3, r4
 80024fa:	6025      	str	r5, [r4, #0]
 80024fc:	bf18      	it	ne
 80024fe:	6059      	strne	r1, [r3, #4]
 8002500:	6863      	ldr	r3, [r4, #4]
 8002502:	bf08      	it	eq
 8002504:	f8c8 1000 	streq.w	r1, [r8]
 8002508:	5162      	str	r2, [r4, r5]
 800250a:	604b      	str	r3, [r1, #4]
 800250c:	4638      	mov	r0, r7
 800250e:	f104 060b 	add.w	r6, r4, #11
 8002512:	f000 f829 	bl	8002568 <__malloc_unlock>
 8002516:	f026 0607 	bic.w	r6, r6, #7
 800251a:	1d23      	adds	r3, r4, #4
 800251c:	1af2      	subs	r2, r6, r3
 800251e:	d0ae      	beq.n	800247e <_malloc_r+0x22>
 8002520:	1b9b      	subs	r3, r3, r6
 8002522:	50a3      	str	r3, [r4, r2]
 8002524:	e7ab      	b.n	800247e <_malloc_r+0x22>
 8002526:	42a3      	cmp	r3, r4
 8002528:	6862      	ldr	r2, [r4, #4]
 800252a:	d1dd      	bne.n	80024e8 <_malloc_r+0x8c>
 800252c:	f8c8 2000 	str.w	r2, [r8]
 8002530:	e7ec      	b.n	800250c <_malloc_r+0xb0>
 8002532:	4623      	mov	r3, r4
 8002534:	6864      	ldr	r4, [r4, #4]
 8002536:	e7ac      	b.n	8002492 <_malloc_r+0x36>
 8002538:	4634      	mov	r4, r6
 800253a:	6876      	ldr	r6, [r6, #4]
 800253c:	e7b4      	b.n	80024a8 <_malloc_r+0x4c>
 800253e:	4613      	mov	r3, r2
 8002540:	e7cc      	b.n	80024dc <_malloc_r+0x80>
 8002542:	230c      	movs	r3, #12
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	4638      	mov	r0, r7
 8002548:	f000 f80e 	bl	8002568 <__malloc_unlock>
 800254c:	e797      	b.n	800247e <_malloc_r+0x22>
 800254e:	6025      	str	r5, [r4, #0]
 8002550:	e7dc      	b.n	800250c <_malloc_r+0xb0>
 8002552:	605b      	str	r3, [r3, #4]
 8002554:	deff      	udf	#255	; 0xff
 8002556:	bf00      	nop
 8002558:	20000210 	.word	0x20000210

0800255c <__malloc_lock>:
 800255c:	4801      	ldr	r0, [pc, #4]	; (8002564 <__malloc_lock+0x8>)
 800255e:	f7ff bee8 	b.w	8002332 <__retarget_lock_acquire_recursive>
 8002562:	bf00      	nop
 8002564:	2000020c 	.word	0x2000020c

08002568 <__malloc_unlock>:
 8002568:	4801      	ldr	r0, [pc, #4]	; (8002570 <__malloc_unlock+0x8>)
 800256a:	f7ff bee3 	b.w	8002334 <__retarget_lock_release_recursive>
 800256e:	bf00      	nop
 8002570:	2000020c 	.word	0x2000020c

08002574 <__sfputc_r>:
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	3b01      	subs	r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	b410      	push	{r4}
 800257c:	6093      	str	r3, [r2, #8]
 800257e:	da08      	bge.n	8002592 <__sfputc_r+0x1e>
 8002580:	6994      	ldr	r4, [r2, #24]
 8002582:	42a3      	cmp	r3, r4
 8002584:	db01      	blt.n	800258a <__sfputc_r+0x16>
 8002586:	290a      	cmp	r1, #10
 8002588:	d103      	bne.n	8002592 <__sfputc_r+0x1e>
 800258a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800258e:	f000 bb85 	b.w	8002c9c <__swbuf_r>
 8002592:	6813      	ldr	r3, [r2, #0]
 8002594:	1c58      	adds	r0, r3, #1
 8002596:	6010      	str	r0, [r2, #0]
 8002598:	7019      	strb	r1, [r3, #0]
 800259a:	4608      	mov	r0, r1
 800259c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <__sfputs_r>:
 80025a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a4:	4606      	mov	r6, r0
 80025a6:	460f      	mov	r7, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	18d5      	adds	r5, r2, r3
 80025ac:	42ac      	cmp	r4, r5
 80025ae:	d101      	bne.n	80025b4 <__sfputs_r+0x12>
 80025b0:	2000      	movs	r0, #0
 80025b2:	e007      	b.n	80025c4 <__sfputs_r+0x22>
 80025b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025b8:	463a      	mov	r2, r7
 80025ba:	4630      	mov	r0, r6
 80025bc:	f7ff ffda 	bl	8002574 <__sfputc_r>
 80025c0:	1c43      	adds	r3, r0, #1
 80025c2:	d1f3      	bne.n	80025ac <__sfputs_r+0xa>
 80025c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080025c8 <_vfiprintf_r>:
 80025c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025cc:	460d      	mov	r5, r1
 80025ce:	b09d      	sub	sp, #116	; 0x74
 80025d0:	4614      	mov	r4, r2
 80025d2:	4698      	mov	r8, r3
 80025d4:	4606      	mov	r6, r0
 80025d6:	b118      	cbz	r0, 80025e0 <_vfiprintf_r+0x18>
 80025d8:	6a03      	ldr	r3, [r0, #32]
 80025da:	b90b      	cbnz	r3, 80025e0 <_vfiprintf_r+0x18>
 80025dc:	f7ff fd78 	bl	80020d0 <__sinit>
 80025e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80025e2:	07d9      	lsls	r1, r3, #31
 80025e4:	d405      	bmi.n	80025f2 <_vfiprintf_r+0x2a>
 80025e6:	89ab      	ldrh	r3, [r5, #12]
 80025e8:	059a      	lsls	r2, r3, #22
 80025ea:	d402      	bmi.n	80025f2 <_vfiprintf_r+0x2a>
 80025ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80025ee:	f7ff fea0 	bl	8002332 <__retarget_lock_acquire_recursive>
 80025f2:	89ab      	ldrh	r3, [r5, #12]
 80025f4:	071b      	lsls	r3, r3, #28
 80025f6:	d501      	bpl.n	80025fc <_vfiprintf_r+0x34>
 80025f8:	692b      	ldr	r3, [r5, #16]
 80025fa:	b99b      	cbnz	r3, 8002624 <_vfiprintf_r+0x5c>
 80025fc:	4629      	mov	r1, r5
 80025fe:	4630      	mov	r0, r6
 8002600:	f000 fb8a 	bl	8002d18 <__swsetup_r>
 8002604:	b170      	cbz	r0, 8002624 <_vfiprintf_r+0x5c>
 8002606:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002608:	07dc      	lsls	r4, r3, #31
 800260a:	d504      	bpl.n	8002616 <_vfiprintf_r+0x4e>
 800260c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002610:	b01d      	add	sp, #116	; 0x74
 8002612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002616:	89ab      	ldrh	r3, [r5, #12]
 8002618:	0598      	lsls	r0, r3, #22
 800261a:	d4f7      	bmi.n	800260c <_vfiprintf_r+0x44>
 800261c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800261e:	f7ff fe89 	bl	8002334 <__retarget_lock_release_recursive>
 8002622:	e7f3      	b.n	800260c <_vfiprintf_r+0x44>
 8002624:	2300      	movs	r3, #0
 8002626:	9309      	str	r3, [sp, #36]	; 0x24
 8002628:	2320      	movs	r3, #32
 800262a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800262e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002632:	2330      	movs	r3, #48	; 0x30
 8002634:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80027e8 <_vfiprintf_r+0x220>
 8002638:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800263c:	f04f 0901 	mov.w	r9, #1
 8002640:	4623      	mov	r3, r4
 8002642:	469a      	mov	sl, r3
 8002644:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002648:	b10a      	cbz	r2, 800264e <_vfiprintf_r+0x86>
 800264a:	2a25      	cmp	r2, #37	; 0x25
 800264c:	d1f9      	bne.n	8002642 <_vfiprintf_r+0x7a>
 800264e:	ebba 0b04 	subs.w	fp, sl, r4
 8002652:	d00b      	beq.n	800266c <_vfiprintf_r+0xa4>
 8002654:	465b      	mov	r3, fp
 8002656:	4622      	mov	r2, r4
 8002658:	4629      	mov	r1, r5
 800265a:	4630      	mov	r0, r6
 800265c:	f7ff ffa1 	bl	80025a2 <__sfputs_r>
 8002660:	3001      	adds	r0, #1
 8002662:	f000 80a9 	beq.w	80027b8 <_vfiprintf_r+0x1f0>
 8002666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002668:	445a      	add	r2, fp
 800266a:	9209      	str	r2, [sp, #36]	; 0x24
 800266c:	f89a 3000 	ldrb.w	r3, [sl]
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 80a1 	beq.w	80027b8 <_vfiprintf_r+0x1f0>
 8002676:	2300      	movs	r3, #0
 8002678:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800267c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002680:	f10a 0a01 	add.w	sl, sl, #1
 8002684:	9304      	str	r3, [sp, #16]
 8002686:	9307      	str	r3, [sp, #28]
 8002688:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800268c:	931a      	str	r3, [sp, #104]	; 0x68
 800268e:	4654      	mov	r4, sl
 8002690:	2205      	movs	r2, #5
 8002692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002696:	4854      	ldr	r0, [pc, #336]	; (80027e8 <_vfiprintf_r+0x220>)
 8002698:	f7fd fdaa 	bl	80001f0 <memchr>
 800269c:	9a04      	ldr	r2, [sp, #16]
 800269e:	b9d8      	cbnz	r0, 80026d8 <_vfiprintf_r+0x110>
 80026a0:	06d1      	lsls	r1, r2, #27
 80026a2:	bf44      	itt	mi
 80026a4:	2320      	movmi	r3, #32
 80026a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026aa:	0713      	lsls	r3, r2, #28
 80026ac:	bf44      	itt	mi
 80026ae:	232b      	movmi	r3, #43	; 0x2b
 80026b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80026b4:	f89a 3000 	ldrb.w	r3, [sl]
 80026b8:	2b2a      	cmp	r3, #42	; 0x2a
 80026ba:	d015      	beq.n	80026e8 <_vfiprintf_r+0x120>
 80026bc:	9a07      	ldr	r2, [sp, #28]
 80026be:	4654      	mov	r4, sl
 80026c0:	2000      	movs	r0, #0
 80026c2:	f04f 0c0a 	mov.w	ip, #10
 80026c6:	4621      	mov	r1, r4
 80026c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026cc:	3b30      	subs	r3, #48	; 0x30
 80026ce:	2b09      	cmp	r3, #9
 80026d0:	d94d      	bls.n	800276e <_vfiprintf_r+0x1a6>
 80026d2:	b1b0      	cbz	r0, 8002702 <_vfiprintf_r+0x13a>
 80026d4:	9207      	str	r2, [sp, #28]
 80026d6:	e014      	b.n	8002702 <_vfiprintf_r+0x13a>
 80026d8:	eba0 0308 	sub.w	r3, r0, r8
 80026dc:	fa09 f303 	lsl.w	r3, r9, r3
 80026e0:	4313      	orrs	r3, r2
 80026e2:	9304      	str	r3, [sp, #16]
 80026e4:	46a2      	mov	sl, r4
 80026e6:	e7d2      	b.n	800268e <_vfiprintf_r+0xc6>
 80026e8:	9b03      	ldr	r3, [sp, #12]
 80026ea:	1d19      	adds	r1, r3, #4
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	9103      	str	r1, [sp, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bfbb      	ittet	lt
 80026f4:	425b      	neglt	r3, r3
 80026f6:	f042 0202 	orrlt.w	r2, r2, #2
 80026fa:	9307      	strge	r3, [sp, #28]
 80026fc:	9307      	strlt	r3, [sp, #28]
 80026fe:	bfb8      	it	lt
 8002700:	9204      	strlt	r2, [sp, #16]
 8002702:	7823      	ldrb	r3, [r4, #0]
 8002704:	2b2e      	cmp	r3, #46	; 0x2e
 8002706:	d10c      	bne.n	8002722 <_vfiprintf_r+0x15a>
 8002708:	7863      	ldrb	r3, [r4, #1]
 800270a:	2b2a      	cmp	r3, #42	; 0x2a
 800270c:	d134      	bne.n	8002778 <_vfiprintf_r+0x1b0>
 800270e:	9b03      	ldr	r3, [sp, #12]
 8002710:	1d1a      	adds	r2, r3, #4
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	9203      	str	r2, [sp, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	bfb8      	it	lt
 800271a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800271e:	3402      	adds	r4, #2
 8002720:	9305      	str	r3, [sp, #20]
 8002722:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80027f8 <_vfiprintf_r+0x230>
 8002726:	7821      	ldrb	r1, [r4, #0]
 8002728:	2203      	movs	r2, #3
 800272a:	4650      	mov	r0, sl
 800272c:	f7fd fd60 	bl	80001f0 <memchr>
 8002730:	b138      	cbz	r0, 8002742 <_vfiprintf_r+0x17a>
 8002732:	9b04      	ldr	r3, [sp, #16]
 8002734:	eba0 000a 	sub.w	r0, r0, sl
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	4082      	lsls	r2, r0
 800273c:	4313      	orrs	r3, r2
 800273e:	3401      	adds	r4, #1
 8002740:	9304      	str	r3, [sp, #16]
 8002742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002746:	4829      	ldr	r0, [pc, #164]	; (80027ec <_vfiprintf_r+0x224>)
 8002748:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800274c:	2206      	movs	r2, #6
 800274e:	f7fd fd4f 	bl	80001f0 <memchr>
 8002752:	2800      	cmp	r0, #0
 8002754:	d03f      	beq.n	80027d6 <_vfiprintf_r+0x20e>
 8002756:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <_vfiprintf_r+0x228>)
 8002758:	bb1b      	cbnz	r3, 80027a2 <_vfiprintf_r+0x1da>
 800275a:	9b03      	ldr	r3, [sp, #12]
 800275c:	3307      	adds	r3, #7
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	3308      	adds	r3, #8
 8002764:	9303      	str	r3, [sp, #12]
 8002766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002768:	443b      	add	r3, r7
 800276a:	9309      	str	r3, [sp, #36]	; 0x24
 800276c:	e768      	b.n	8002640 <_vfiprintf_r+0x78>
 800276e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002772:	460c      	mov	r4, r1
 8002774:	2001      	movs	r0, #1
 8002776:	e7a6      	b.n	80026c6 <_vfiprintf_r+0xfe>
 8002778:	2300      	movs	r3, #0
 800277a:	3401      	adds	r4, #1
 800277c:	9305      	str	r3, [sp, #20]
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 0c0a 	mov.w	ip, #10
 8002784:	4620      	mov	r0, r4
 8002786:	f810 2b01 	ldrb.w	r2, [r0], #1
 800278a:	3a30      	subs	r2, #48	; 0x30
 800278c:	2a09      	cmp	r2, #9
 800278e:	d903      	bls.n	8002798 <_vfiprintf_r+0x1d0>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0c6      	beq.n	8002722 <_vfiprintf_r+0x15a>
 8002794:	9105      	str	r1, [sp, #20]
 8002796:	e7c4      	b.n	8002722 <_vfiprintf_r+0x15a>
 8002798:	fb0c 2101 	mla	r1, ip, r1, r2
 800279c:	4604      	mov	r4, r0
 800279e:	2301      	movs	r3, #1
 80027a0:	e7f0      	b.n	8002784 <_vfiprintf_r+0x1bc>
 80027a2:	ab03      	add	r3, sp, #12
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	462a      	mov	r2, r5
 80027a8:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <_vfiprintf_r+0x22c>)
 80027aa:	a904      	add	r1, sp, #16
 80027ac:	4630      	mov	r0, r6
 80027ae:	f3af 8000 	nop.w
 80027b2:	4607      	mov	r7, r0
 80027b4:	1c78      	adds	r0, r7, #1
 80027b6:	d1d6      	bne.n	8002766 <_vfiprintf_r+0x19e>
 80027b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80027ba:	07d9      	lsls	r1, r3, #31
 80027bc:	d405      	bmi.n	80027ca <_vfiprintf_r+0x202>
 80027be:	89ab      	ldrh	r3, [r5, #12]
 80027c0:	059a      	lsls	r2, r3, #22
 80027c2:	d402      	bmi.n	80027ca <_vfiprintf_r+0x202>
 80027c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80027c6:	f7ff fdb5 	bl	8002334 <__retarget_lock_release_recursive>
 80027ca:	89ab      	ldrh	r3, [r5, #12]
 80027cc:	065b      	lsls	r3, r3, #25
 80027ce:	f53f af1d 	bmi.w	800260c <_vfiprintf_r+0x44>
 80027d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80027d4:	e71c      	b.n	8002610 <_vfiprintf_r+0x48>
 80027d6:	ab03      	add	r3, sp, #12
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	462a      	mov	r2, r5
 80027dc:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <_vfiprintf_r+0x22c>)
 80027de:	a904      	add	r1, sp, #16
 80027e0:	4630      	mov	r0, r6
 80027e2:	f000 f879 	bl	80028d8 <_printf_i>
 80027e6:	e7e4      	b.n	80027b2 <_vfiprintf_r+0x1ea>
 80027e8:	0800307b 	.word	0x0800307b
 80027ec:	08003085 	.word	0x08003085
 80027f0:	00000000 	.word	0x00000000
 80027f4:	080025a3 	.word	0x080025a3
 80027f8:	08003081 	.word	0x08003081

080027fc <_printf_common>:
 80027fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002800:	4616      	mov	r6, r2
 8002802:	4699      	mov	r9, r3
 8002804:	688a      	ldr	r2, [r1, #8]
 8002806:	690b      	ldr	r3, [r1, #16]
 8002808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800280c:	4293      	cmp	r3, r2
 800280e:	bfb8      	it	lt
 8002810:	4613      	movlt	r3, r2
 8002812:	6033      	str	r3, [r6, #0]
 8002814:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002818:	4607      	mov	r7, r0
 800281a:	460c      	mov	r4, r1
 800281c:	b10a      	cbz	r2, 8002822 <_printf_common+0x26>
 800281e:	3301      	adds	r3, #1
 8002820:	6033      	str	r3, [r6, #0]
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	0699      	lsls	r1, r3, #26
 8002826:	bf42      	ittt	mi
 8002828:	6833      	ldrmi	r3, [r6, #0]
 800282a:	3302      	addmi	r3, #2
 800282c:	6033      	strmi	r3, [r6, #0]
 800282e:	6825      	ldr	r5, [r4, #0]
 8002830:	f015 0506 	ands.w	r5, r5, #6
 8002834:	d106      	bne.n	8002844 <_printf_common+0x48>
 8002836:	f104 0a19 	add.w	sl, r4, #25
 800283a:	68e3      	ldr	r3, [r4, #12]
 800283c:	6832      	ldr	r2, [r6, #0]
 800283e:	1a9b      	subs	r3, r3, r2
 8002840:	42ab      	cmp	r3, r5
 8002842:	dc26      	bgt.n	8002892 <_printf_common+0x96>
 8002844:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002848:	1e13      	subs	r3, r2, #0
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	bf18      	it	ne
 800284e:	2301      	movne	r3, #1
 8002850:	0692      	lsls	r2, r2, #26
 8002852:	d42b      	bmi.n	80028ac <_printf_common+0xb0>
 8002854:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002858:	4649      	mov	r1, r9
 800285a:	4638      	mov	r0, r7
 800285c:	47c0      	blx	r8
 800285e:	3001      	adds	r0, #1
 8002860:	d01e      	beq.n	80028a0 <_printf_common+0xa4>
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	6922      	ldr	r2, [r4, #16]
 8002866:	f003 0306 	and.w	r3, r3, #6
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf02      	ittt	eq
 800286e:	68e5      	ldreq	r5, [r4, #12]
 8002870:	6833      	ldreq	r3, [r6, #0]
 8002872:	1aed      	subeq	r5, r5, r3
 8002874:	68a3      	ldr	r3, [r4, #8]
 8002876:	bf0c      	ite	eq
 8002878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800287c:	2500      	movne	r5, #0
 800287e:	4293      	cmp	r3, r2
 8002880:	bfc4      	itt	gt
 8002882:	1a9b      	subgt	r3, r3, r2
 8002884:	18ed      	addgt	r5, r5, r3
 8002886:	2600      	movs	r6, #0
 8002888:	341a      	adds	r4, #26
 800288a:	42b5      	cmp	r5, r6
 800288c:	d11a      	bne.n	80028c4 <_printf_common+0xc8>
 800288e:	2000      	movs	r0, #0
 8002890:	e008      	b.n	80028a4 <_printf_common+0xa8>
 8002892:	2301      	movs	r3, #1
 8002894:	4652      	mov	r2, sl
 8002896:	4649      	mov	r1, r9
 8002898:	4638      	mov	r0, r7
 800289a:	47c0      	blx	r8
 800289c:	3001      	adds	r0, #1
 800289e:	d103      	bne.n	80028a8 <_printf_common+0xac>
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a8:	3501      	adds	r5, #1
 80028aa:	e7c6      	b.n	800283a <_printf_common+0x3e>
 80028ac:	18e1      	adds	r1, r4, r3
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	2030      	movs	r0, #48	; 0x30
 80028b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80028b6:	4422      	add	r2, r4
 80028b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80028bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80028c0:	3302      	adds	r3, #2
 80028c2:	e7c7      	b.n	8002854 <_printf_common+0x58>
 80028c4:	2301      	movs	r3, #1
 80028c6:	4622      	mov	r2, r4
 80028c8:	4649      	mov	r1, r9
 80028ca:	4638      	mov	r0, r7
 80028cc:	47c0      	blx	r8
 80028ce:	3001      	adds	r0, #1
 80028d0:	d0e6      	beq.n	80028a0 <_printf_common+0xa4>
 80028d2:	3601      	adds	r6, #1
 80028d4:	e7d9      	b.n	800288a <_printf_common+0x8e>
	...

080028d8 <_printf_i>:
 80028d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028dc:	7e0f      	ldrb	r7, [r1, #24]
 80028de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80028e0:	2f78      	cmp	r7, #120	; 0x78
 80028e2:	4691      	mov	r9, r2
 80028e4:	4680      	mov	r8, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	469a      	mov	sl, r3
 80028ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80028ee:	d807      	bhi.n	8002900 <_printf_i+0x28>
 80028f0:	2f62      	cmp	r7, #98	; 0x62
 80028f2:	d80a      	bhi.n	800290a <_printf_i+0x32>
 80028f4:	2f00      	cmp	r7, #0
 80028f6:	f000 80d4 	beq.w	8002aa2 <_printf_i+0x1ca>
 80028fa:	2f58      	cmp	r7, #88	; 0x58
 80028fc:	f000 80c0 	beq.w	8002a80 <_printf_i+0x1a8>
 8002900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002904:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002908:	e03a      	b.n	8002980 <_printf_i+0xa8>
 800290a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800290e:	2b15      	cmp	r3, #21
 8002910:	d8f6      	bhi.n	8002900 <_printf_i+0x28>
 8002912:	a101      	add	r1, pc, #4	; (adr r1, 8002918 <_printf_i+0x40>)
 8002914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002918:	08002971 	.word	0x08002971
 800291c:	08002985 	.word	0x08002985
 8002920:	08002901 	.word	0x08002901
 8002924:	08002901 	.word	0x08002901
 8002928:	08002901 	.word	0x08002901
 800292c:	08002901 	.word	0x08002901
 8002930:	08002985 	.word	0x08002985
 8002934:	08002901 	.word	0x08002901
 8002938:	08002901 	.word	0x08002901
 800293c:	08002901 	.word	0x08002901
 8002940:	08002901 	.word	0x08002901
 8002944:	08002a89 	.word	0x08002a89
 8002948:	080029b1 	.word	0x080029b1
 800294c:	08002a43 	.word	0x08002a43
 8002950:	08002901 	.word	0x08002901
 8002954:	08002901 	.word	0x08002901
 8002958:	08002aab 	.word	0x08002aab
 800295c:	08002901 	.word	0x08002901
 8002960:	080029b1 	.word	0x080029b1
 8002964:	08002901 	.word	0x08002901
 8002968:	08002901 	.word	0x08002901
 800296c:	08002a4b 	.word	0x08002a4b
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	1d1a      	adds	r2, r3, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	602a      	str	r2, [r5, #0]
 8002978:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800297c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002980:	2301      	movs	r3, #1
 8002982:	e09f      	b.n	8002ac4 <_printf_i+0x1ec>
 8002984:	6820      	ldr	r0, [r4, #0]
 8002986:	682b      	ldr	r3, [r5, #0]
 8002988:	0607      	lsls	r7, r0, #24
 800298a:	f103 0104 	add.w	r1, r3, #4
 800298e:	6029      	str	r1, [r5, #0]
 8002990:	d501      	bpl.n	8002996 <_printf_i+0xbe>
 8002992:	681e      	ldr	r6, [r3, #0]
 8002994:	e003      	b.n	800299e <_printf_i+0xc6>
 8002996:	0646      	lsls	r6, r0, #25
 8002998:	d5fb      	bpl.n	8002992 <_printf_i+0xba>
 800299a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800299e:	2e00      	cmp	r6, #0
 80029a0:	da03      	bge.n	80029aa <_printf_i+0xd2>
 80029a2:	232d      	movs	r3, #45	; 0x2d
 80029a4:	4276      	negs	r6, r6
 80029a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029aa:	485a      	ldr	r0, [pc, #360]	; (8002b14 <_printf_i+0x23c>)
 80029ac:	230a      	movs	r3, #10
 80029ae:	e012      	b.n	80029d6 <_printf_i+0xfe>
 80029b0:	682b      	ldr	r3, [r5, #0]
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	1d19      	adds	r1, r3, #4
 80029b6:	6029      	str	r1, [r5, #0]
 80029b8:	0605      	lsls	r5, r0, #24
 80029ba:	d501      	bpl.n	80029c0 <_printf_i+0xe8>
 80029bc:	681e      	ldr	r6, [r3, #0]
 80029be:	e002      	b.n	80029c6 <_printf_i+0xee>
 80029c0:	0641      	lsls	r1, r0, #25
 80029c2:	d5fb      	bpl.n	80029bc <_printf_i+0xe4>
 80029c4:	881e      	ldrh	r6, [r3, #0]
 80029c6:	4853      	ldr	r0, [pc, #332]	; (8002b14 <_printf_i+0x23c>)
 80029c8:	2f6f      	cmp	r7, #111	; 0x6f
 80029ca:	bf0c      	ite	eq
 80029cc:	2308      	moveq	r3, #8
 80029ce:	230a      	movne	r3, #10
 80029d0:	2100      	movs	r1, #0
 80029d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80029d6:	6865      	ldr	r5, [r4, #4]
 80029d8:	60a5      	str	r5, [r4, #8]
 80029da:	2d00      	cmp	r5, #0
 80029dc:	bfa2      	ittt	ge
 80029de:	6821      	ldrge	r1, [r4, #0]
 80029e0:	f021 0104 	bicge.w	r1, r1, #4
 80029e4:	6021      	strge	r1, [r4, #0]
 80029e6:	b90e      	cbnz	r6, 80029ec <_printf_i+0x114>
 80029e8:	2d00      	cmp	r5, #0
 80029ea:	d04b      	beq.n	8002a84 <_printf_i+0x1ac>
 80029ec:	4615      	mov	r5, r2
 80029ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80029f2:	fb03 6711 	mls	r7, r3, r1, r6
 80029f6:	5dc7      	ldrb	r7, [r0, r7]
 80029f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029fc:	4637      	mov	r7, r6
 80029fe:	42bb      	cmp	r3, r7
 8002a00:	460e      	mov	r6, r1
 8002a02:	d9f4      	bls.n	80029ee <_printf_i+0x116>
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d10b      	bne.n	8002a20 <_printf_i+0x148>
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	07de      	lsls	r6, r3, #31
 8002a0c:	d508      	bpl.n	8002a20 <_printf_i+0x148>
 8002a0e:	6923      	ldr	r3, [r4, #16]
 8002a10:	6861      	ldr	r1, [r4, #4]
 8002a12:	4299      	cmp	r1, r3
 8002a14:	bfde      	ittt	le
 8002a16:	2330      	movle	r3, #48	; 0x30
 8002a18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002a20:	1b52      	subs	r2, r2, r5
 8002a22:	6122      	str	r2, [r4, #16]
 8002a24:	f8cd a000 	str.w	sl, [sp]
 8002a28:	464b      	mov	r3, r9
 8002a2a:	aa03      	add	r2, sp, #12
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	4640      	mov	r0, r8
 8002a30:	f7ff fee4 	bl	80027fc <_printf_common>
 8002a34:	3001      	adds	r0, #1
 8002a36:	d14a      	bne.n	8002ace <_printf_i+0x1f6>
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a3c:	b004      	add	sp, #16
 8002a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f043 0320 	orr.w	r3, r3, #32
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	4833      	ldr	r0, [pc, #204]	; (8002b18 <_printf_i+0x240>)
 8002a4c:	2778      	movs	r7, #120	; 0x78
 8002a4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	6829      	ldr	r1, [r5, #0]
 8002a56:	061f      	lsls	r7, r3, #24
 8002a58:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a5c:	d402      	bmi.n	8002a64 <_printf_i+0x18c>
 8002a5e:	065f      	lsls	r7, r3, #25
 8002a60:	bf48      	it	mi
 8002a62:	b2b6      	uxthmi	r6, r6
 8002a64:	07df      	lsls	r7, r3, #31
 8002a66:	bf48      	it	mi
 8002a68:	f043 0320 	orrmi.w	r3, r3, #32
 8002a6c:	6029      	str	r1, [r5, #0]
 8002a6e:	bf48      	it	mi
 8002a70:	6023      	strmi	r3, [r4, #0]
 8002a72:	b91e      	cbnz	r6, 8002a7c <_printf_i+0x1a4>
 8002a74:	6823      	ldr	r3, [r4, #0]
 8002a76:	f023 0320 	bic.w	r3, r3, #32
 8002a7a:	6023      	str	r3, [r4, #0]
 8002a7c:	2310      	movs	r3, #16
 8002a7e:	e7a7      	b.n	80029d0 <_printf_i+0xf8>
 8002a80:	4824      	ldr	r0, [pc, #144]	; (8002b14 <_printf_i+0x23c>)
 8002a82:	e7e4      	b.n	8002a4e <_printf_i+0x176>
 8002a84:	4615      	mov	r5, r2
 8002a86:	e7bd      	b.n	8002a04 <_printf_i+0x12c>
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	6826      	ldr	r6, [r4, #0]
 8002a8c:	6961      	ldr	r1, [r4, #20]
 8002a8e:	1d18      	adds	r0, r3, #4
 8002a90:	6028      	str	r0, [r5, #0]
 8002a92:	0635      	lsls	r5, r6, #24
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	d501      	bpl.n	8002a9c <_printf_i+0x1c4>
 8002a98:	6019      	str	r1, [r3, #0]
 8002a9a:	e002      	b.n	8002aa2 <_printf_i+0x1ca>
 8002a9c:	0670      	lsls	r0, r6, #25
 8002a9e:	d5fb      	bpl.n	8002a98 <_printf_i+0x1c0>
 8002aa0:	8019      	strh	r1, [r3, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	6123      	str	r3, [r4, #16]
 8002aa6:	4615      	mov	r5, r2
 8002aa8:	e7bc      	b.n	8002a24 <_printf_i+0x14c>
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	1d1a      	adds	r2, r3, #4
 8002aae:	602a      	str	r2, [r5, #0]
 8002ab0:	681d      	ldr	r5, [r3, #0]
 8002ab2:	6862      	ldr	r2, [r4, #4]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4628      	mov	r0, r5
 8002ab8:	f7fd fb9a 	bl	80001f0 <memchr>
 8002abc:	b108      	cbz	r0, 8002ac2 <_printf_i+0x1ea>
 8002abe:	1b40      	subs	r0, r0, r5
 8002ac0:	6060      	str	r0, [r4, #4]
 8002ac2:	6863      	ldr	r3, [r4, #4]
 8002ac4:	6123      	str	r3, [r4, #16]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002acc:	e7aa      	b.n	8002a24 <_printf_i+0x14c>
 8002ace:	6923      	ldr	r3, [r4, #16]
 8002ad0:	462a      	mov	r2, r5
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	4640      	mov	r0, r8
 8002ad6:	47d0      	blx	sl
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d0ad      	beq.n	8002a38 <_printf_i+0x160>
 8002adc:	6823      	ldr	r3, [r4, #0]
 8002ade:	079b      	lsls	r3, r3, #30
 8002ae0:	d413      	bmi.n	8002b0a <_printf_i+0x232>
 8002ae2:	68e0      	ldr	r0, [r4, #12]
 8002ae4:	9b03      	ldr	r3, [sp, #12]
 8002ae6:	4298      	cmp	r0, r3
 8002ae8:	bfb8      	it	lt
 8002aea:	4618      	movlt	r0, r3
 8002aec:	e7a6      	b.n	8002a3c <_printf_i+0x164>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4632      	mov	r2, r6
 8002af2:	4649      	mov	r1, r9
 8002af4:	4640      	mov	r0, r8
 8002af6:	47d0      	blx	sl
 8002af8:	3001      	adds	r0, #1
 8002afa:	d09d      	beq.n	8002a38 <_printf_i+0x160>
 8002afc:	3501      	adds	r5, #1
 8002afe:	68e3      	ldr	r3, [r4, #12]
 8002b00:	9903      	ldr	r1, [sp, #12]
 8002b02:	1a5b      	subs	r3, r3, r1
 8002b04:	42ab      	cmp	r3, r5
 8002b06:	dcf2      	bgt.n	8002aee <_printf_i+0x216>
 8002b08:	e7eb      	b.n	8002ae2 <_printf_i+0x20a>
 8002b0a:	2500      	movs	r5, #0
 8002b0c:	f104 0619 	add.w	r6, r4, #25
 8002b10:	e7f5      	b.n	8002afe <_printf_i+0x226>
 8002b12:	bf00      	nop
 8002b14:	0800308c 	.word	0x0800308c
 8002b18:	0800309d 	.word	0x0800309d

08002b1c <__sflush_r>:
 8002b1c:	898a      	ldrh	r2, [r1, #12]
 8002b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b22:	4605      	mov	r5, r0
 8002b24:	0710      	lsls	r0, r2, #28
 8002b26:	460c      	mov	r4, r1
 8002b28:	d458      	bmi.n	8002bdc <__sflush_r+0xc0>
 8002b2a:	684b      	ldr	r3, [r1, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	dc05      	bgt.n	8002b3c <__sflush_r+0x20>
 8002b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	dc02      	bgt.n	8002b3c <__sflush_r+0x20>
 8002b36:	2000      	movs	r0, #0
 8002b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b3e:	2e00      	cmp	r6, #0
 8002b40:	d0f9      	beq.n	8002b36 <__sflush_r+0x1a>
 8002b42:	2300      	movs	r3, #0
 8002b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b48:	682f      	ldr	r7, [r5, #0]
 8002b4a:	6a21      	ldr	r1, [r4, #32]
 8002b4c:	602b      	str	r3, [r5, #0]
 8002b4e:	d032      	beq.n	8002bb6 <__sflush_r+0x9a>
 8002b50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b52:	89a3      	ldrh	r3, [r4, #12]
 8002b54:	075a      	lsls	r2, r3, #29
 8002b56:	d505      	bpl.n	8002b64 <__sflush_r+0x48>
 8002b58:	6863      	ldr	r3, [r4, #4]
 8002b5a:	1ac0      	subs	r0, r0, r3
 8002b5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b5e:	b10b      	cbz	r3, 8002b64 <__sflush_r+0x48>
 8002b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b62:	1ac0      	subs	r0, r0, r3
 8002b64:	2300      	movs	r3, #0
 8002b66:	4602      	mov	r2, r0
 8002b68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b6a:	6a21      	ldr	r1, [r4, #32]
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	47b0      	blx	r6
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	d106      	bne.n	8002b84 <__sflush_r+0x68>
 8002b76:	6829      	ldr	r1, [r5, #0]
 8002b78:	291d      	cmp	r1, #29
 8002b7a:	d82b      	bhi.n	8002bd4 <__sflush_r+0xb8>
 8002b7c:	4a29      	ldr	r2, [pc, #164]	; (8002c24 <__sflush_r+0x108>)
 8002b7e:	410a      	asrs	r2, r1
 8002b80:	07d6      	lsls	r6, r2, #31
 8002b82:	d427      	bmi.n	8002bd4 <__sflush_r+0xb8>
 8002b84:	2200      	movs	r2, #0
 8002b86:	6062      	str	r2, [r4, #4]
 8002b88:	04d9      	lsls	r1, r3, #19
 8002b8a:	6922      	ldr	r2, [r4, #16]
 8002b8c:	6022      	str	r2, [r4, #0]
 8002b8e:	d504      	bpl.n	8002b9a <__sflush_r+0x7e>
 8002b90:	1c42      	adds	r2, r0, #1
 8002b92:	d101      	bne.n	8002b98 <__sflush_r+0x7c>
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	b903      	cbnz	r3, 8002b9a <__sflush_r+0x7e>
 8002b98:	6560      	str	r0, [r4, #84]	; 0x54
 8002b9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b9c:	602f      	str	r7, [r5, #0]
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	d0c9      	beq.n	8002b36 <__sflush_r+0x1a>
 8002ba2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ba6:	4299      	cmp	r1, r3
 8002ba8:	d002      	beq.n	8002bb0 <__sflush_r+0x94>
 8002baa:	4628      	mov	r0, r5
 8002bac:	f7ff fbe2 	bl	8002374 <_free_r>
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	6360      	str	r0, [r4, #52]	; 0x34
 8002bb4:	e7c0      	b.n	8002b38 <__sflush_r+0x1c>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4628      	mov	r0, r5
 8002bba:	47b0      	blx	r6
 8002bbc:	1c41      	adds	r1, r0, #1
 8002bbe:	d1c8      	bne.n	8002b52 <__sflush_r+0x36>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0c5      	beq.n	8002b52 <__sflush_r+0x36>
 8002bc6:	2b1d      	cmp	r3, #29
 8002bc8:	d001      	beq.n	8002bce <__sflush_r+0xb2>
 8002bca:	2b16      	cmp	r3, #22
 8002bcc:	d101      	bne.n	8002bd2 <__sflush_r+0xb6>
 8002bce:	602f      	str	r7, [r5, #0]
 8002bd0:	e7b1      	b.n	8002b36 <__sflush_r+0x1a>
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bd8:	81a3      	strh	r3, [r4, #12]
 8002bda:	e7ad      	b.n	8002b38 <__sflush_r+0x1c>
 8002bdc:	690f      	ldr	r7, [r1, #16]
 8002bde:	2f00      	cmp	r7, #0
 8002be0:	d0a9      	beq.n	8002b36 <__sflush_r+0x1a>
 8002be2:	0793      	lsls	r3, r2, #30
 8002be4:	680e      	ldr	r6, [r1, #0]
 8002be6:	bf08      	it	eq
 8002be8:	694b      	ldreq	r3, [r1, #20]
 8002bea:	600f      	str	r7, [r1, #0]
 8002bec:	bf18      	it	ne
 8002bee:	2300      	movne	r3, #0
 8002bf0:	eba6 0807 	sub.w	r8, r6, r7
 8002bf4:	608b      	str	r3, [r1, #8]
 8002bf6:	f1b8 0f00 	cmp.w	r8, #0
 8002bfa:	dd9c      	ble.n	8002b36 <__sflush_r+0x1a>
 8002bfc:	6a21      	ldr	r1, [r4, #32]
 8002bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c00:	4643      	mov	r3, r8
 8002c02:	463a      	mov	r2, r7
 8002c04:	4628      	mov	r0, r5
 8002c06:	47b0      	blx	r6
 8002c08:	2800      	cmp	r0, #0
 8002c0a:	dc06      	bgt.n	8002c1a <__sflush_r+0xfe>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	e78e      	b.n	8002b38 <__sflush_r+0x1c>
 8002c1a:	4407      	add	r7, r0
 8002c1c:	eba8 0800 	sub.w	r8, r8, r0
 8002c20:	e7e9      	b.n	8002bf6 <__sflush_r+0xda>
 8002c22:	bf00      	nop
 8002c24:	dfbffffe 	.word	0xdfbffffe

08002c28 <_fflush_r>:
 8002c28:	b538      	push	{r3, r4, r5, lr}
 8002c2a:	690b      	ldr	r3, [r1, #16]
 8002c2c:	4605      	mov	r5, r0
 8002c2e:	460c      	mov	r4, r1
 8002c30:	b913      	cbnz	r3, 8002c38 <_fflush_r+0x10>
 8002c32:	2500      	movs	r5, #0
 8002c34:	4628      	mov	r0, r5
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	b118      	cbz	r0, 8002c42 <_fflush_r+0x1a>
 8002c3a:	6a03      	ldr	r3, [r0, #32]
 8002c3c:	b90b      	cbnz	r3, 8002c42 <_fflush_r+0x1a>
 8002c3e:	f7ff fa47 	bl	80020d0 <__sinit>
 8002c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f3      	beq.n	8002c32 <_fflush_r+0xa>
 8002c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002c4c:	07d0      	lsls	r0, r2, #31
 8002c4e:	d404      	bmi.n	8002c5a <_fflush_r+0x32>
 8002c50:	0599      	lsls	r1, r3, #22
 8002c52:	d402      	bmi.n	8002c5a <_fflush_r+0x32>
 8002c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c56:	f7ff fb6c 	bl	8002332 <__retarget_lock_acquire_recursive>
 8002c5a:	4628      	mov	r0, r5
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	f7ff ff5d 	bl	8002b1c <__sflush_r>
 8002c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c64:	07da      	lsls	r2, r3, #31
 8002c66:	4605      	mov	r5, r0
 8002c68:	d4e4      	bmi.n	8002c34 <_fflush_r+0xc>
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	059b      	lsls	r3, r3, #22
 8002c6e:	d4e1      	bmi.n	8002c34 <_fflush_r+0xc>
 8002c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c72:	f7ff fb5f 	bl	8002334 <__retarget_lock_release_recursive>
 8002c76:	e7dd      	b.n	8002c34 <_fflush_r+0xc>

08002c78 <fiprintf>:
 8002c78:	b40e      	push	{r1, r2, r3}
 8002c7a:	b503      	push	{r0, r1, lr}
 8002c7c:	4601      	mov	r1, r0
 8002c7e:	ab03      	add	r3, sp, #12
 8002c80:	4805      	ldr	r0, [pc, #20]	; (8002c98 <fiprintf+0x20>)
 8002c82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c86:	6800      	ldr	r0, [r0, #0]
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	f7ff fc9d 	bl	80025c8 <_vfiprintf_r>
 8002c8e:	b002      	add	sp, #8
 8002c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c94:	b003      	add	sp, #12
 8002c96:	4770      	bx	lr
 8002c98:	2000007c 	.word	0x2000007c

08002c9c <__swbuf_r>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	460e      	mov	r6, r1
 8002ca0:	4614      	mov	r4, r2
 8002ca2:	4605      	mov	r5, r0
 8002ca4:	b118      	cbz	r0, 8002cae <__swbuf_r+0x12>
 8002ca6:	6a03      	ldr	r3, [r0, #32]
 8002ca8:	b90b      	cbnz	r3, 8002cae <__swbuf_r+0x12>
 8002caa:	f7ff fa11 	bl	80020d0 <__sinit>
 8002cae:	69a3      	ldr	r3, [r4, #24]
 8002cb0:	60a3      	str	r3, [r4, #8]
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	071a      	lsls	r2, r3, #28
 8002cb6:	d525      	bpl.n	8002d04 <__swbuf_r+0x68>
 8002cb8:	6923      	ldr	r3, [r4, #16]
 8002cba:	b31b      	cbz	r3, 8002d04 <__swbuf_r+0x68>
 8002cbc:	6823      	ldr	r3, [r4, #0]
 8002cbe:	6922      	ldr	r2, [r4, #16]
 8002cc0:	1a98      	subs	r0, r3, r2
 8002cc2:	6963      	ldr	r3, [r4, #20]
 8002cc4:	b2f6      	uxtb	r6, r6
 8002cc6:	4283      	cmp	r3, r0
 8002cc8:	4637      	mov	r7, r6
 8002cca:	dc04      	bgt.n	8002cd6 <__swbuf_r+0x3a>
 8002ccc:	4621      	mov	r1, r4
 8002cce:	4628      	mov	r0, r5
 8002cd0:	f7ff ffaa 	bl	8002c28 <_fflush_r>
 8002cd4:	b9e0      	cbnz	r0, 8002d10 <__swbuf_r+0x74>
 8002cd6:	68a3      	ldr	r3, [r4, #8]
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	60a3      	str	r3, [r4, #8]
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	6022      	str	r2, [r4, #0]
 8002ce2:	701e      	strb	r6, [r3, #0]
 8002ce4:	6962      	ldr	r2, [r4, #20]
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d004      	beq.n	8002cf6 <__swbuf_r+0x5a>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	07db      	lsls	r3, r3, #31
 8002cf0:	d506      	bpl.n	8002d00 <__swbuf_r+0x64>
 8002cf2:	2e0a      	cmp	r6, #10
 8002cf4:	d104      	bne.n	8002d00 <__swbuf_r+0x64>
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	f7ff ff95 	bl	8002c28 <_fflush_r>
 8002cfe:	b938      	cbnz	r0, 8002d10 <__swbuf_r+0x74>
 8002d00:	4638      	mov	r0, r7
 8002d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 f806 	bl	8002d18 <__swsetup_r>
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d0d5      	beq.n	8002cbc <__swbuf_r+0x20>
 8002d10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002d14:	e7f4      	b.n	8002d00 <__swbuf_r+0x64>
	...

08002d18 <__swsetup_r>:
 8002d18:	b538      	push	{r3, r4, r5, lr}
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <__swsetup_r+0xac>)
 8002d1c:	4605      	mov	r5, r0
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	460c      	mov	r4, r1
 8002d22:	b118      	cbz	r0, 8002d2c <__swsetup_r+0x14>
 8002d24:	6a03      	ldr	r3, [r0, #32]
 8002d26:	b90b      	cbnz	r3, 8002d2c <__swsetup_r+0x14>
 8002d28:	f7ff f9d2 	bl	80020d0 <__sinit>
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d32:	0718      	lsls	r0, r3, #28
 8002d34:	d422      	bmi.n	8002d7c <__swsetup_r+0x64>
 8002d36:	06d9      	lsls	r1, r3, #27
 8002d38:	d407      	bmi.n	8002d4a <__swsetup_r+0x32>
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	602b      	str	r3, [r5, #0]
 8002d3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002d42:	81a3      	strh	r3, [r4, #12]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d48:	e034      	b.n	8002db4 <__swsetup_r+0x9c>
 8002d4a:	0758      	lsls	r0, r3, #29
 8002d4c:	d512      	bpl.n	8002d74 <__swsetup_r+0x5c>
 8002d4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d50:	b141      	cbz	r1, 8002d64 <__swsetup_r+0x4c>
 8002d52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d56:	4299      	cmp	r1, r3
 8002d58:	d002      	beq.n	8002d60 <__swsetup_r+0x48>
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f7ff fb0a 	bl	8002374 <_free_r>
 8002d60:	2300      	movs	r3, #0
 8002d62:	6363      	str	r3, [r4, #52]	; 0x34
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d6a:	81a3      	strh	r3, [r4, #12]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	6063      	str	r3, [r4, #4]
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	6023      	str	r3, [r4, #0]
 8002d74:	89a3      	ldrh	r3, [r4, #12]
 8002d76:	f043 0308 	orr.w	r3, r3, #8
 8002d7a:	81a3      	strh	r3, [r4, #12]
 8002d7c:	6923      	ldr	r3, [r4, #16]
 8002d7e:	b94b      	cbnz	r3, 8002d94 <__swsetup_r+0x7c>
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d8a:	d003      	beq.n	8002d94 <__swsetup_r+0x7c>
 8002d8c:	4621      	mov	r1, r4
 8002d8e:	4628      	mov	r0, r5
 8002d90:	f000 f857 	bl	8002e42 <__smakebuf_r>
 8002d94:	89a0      	ldrh	r0, [r4, #12]
 8002d96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d9a:	f010 0301 	ands.w	r3, r0, #1
 8002d9e:	d00a      	beq.n	8002db6 <__swsetup_r+0x9e>
 8002da0:	2300      	movs	r3, #0
 8002da2:	60a3      	str	r3, [r4, #8]
 8002da4:	6963      	ldr	r3, [r4, #20]
 8002da6:	425b      	negs	r3, r3
 8002da8:	61a3      	str	r3, [r4, #24]
 8002daa:	6923      	ldr	r3, [r4, #16]
 8002dac:	b943      	cbnz	r3, 8002dc0 <__swsetup_r+0xa8>
 8002dae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002db2:	d1c4      	bne.n	8002d3e <__swsetup_r+0x26>
 8002db4:	bd38      	pop	{r3, r4, r5, pc}
 8002db6:	0781      	lsls	r1, r0, #30
 8002db8:	bf58      	it	pl
 8002dba:	6963      	ldrpl	r3, [r4, #20]
 8002dbc:	60a3      	str	r3, [r4, #8]
 8002dbe:	e7f4      	b.n	8002daa <__swsetup_r+0x92>
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	e7f7      	b.n	8002db4 <__swsetup_r+0x9c>
 8002dc4:	2000007c 	.word	0x2000007c

08002dc8 <_sbrk_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4d06      	ldr	r5, [pc, #24]	; (8002de4 <_sbrk_r+0x1c>)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	602b      	str	r3, [r5, #0]
 8002dd4:	f7fd fefa 	bl	8000bcc <_sbrk>
 8002dd8:	1c43      	adds	r3, r0, #1
 8002dda:	d102      	bne.n	8002de2 <_sbrk_r+0x1a>
 8002ddc:	682b      	ldr	r3, [r5, #0]
 8002dde:	b103      	cbz	r3, 8002de2 <_sbrk_r+0x1a>
 8002de0:	6023      	str	r3, [r4, #0]
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	20000208 	.word	0x20000208

08002de8 <abort>:
 8002de8:	b508      	push	{r3, lr}
 8002dea:	2006      	movs	r0, #6
 8002dec:	f000 f88e 	bl	8002f0c <raise>
 8002df0:	2001      	movs	r0, #1
 8002df2:	f7fd fe73 	bl	8000adc <_exit>

08002df6 <__swhatbuf_r>:
 8002df6:	b570      	push	{r4, r5, r6, lr}
 8002df8:	460c      	mov	r4, r1
 8002dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002dfe:	2900      	cmp	r1, #0
 8002e00:	b096      	sub	sp, #88	; 0x58
 8002e02:	4615      	mov	r5, r2
 8002e04:	461e      	mov	r6, r3
 8002e06:	da0d      	bge.n	8002e24 <__swhatbuf_r+0x2e>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002e18:	2340      	movne	r3, #64	; 0x40
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	6031      	str	r1, [r6, #0]
 8002e1e:	602b      	str	r3, [r5, #0]
 8002e20:	b016      	add	sp, #88	; 0x58
 8002e22:	bd70      	pop	{r4, r5, r6, pc}
 8002e24:	466a      	mov	r2, sp
 8002e26:	f000 f879 	bl	8002f1c <_fstat_r>
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	dbec      	blt.n	8002e08 <__swhatbuf_r+0x12>
 8002e2e:	9901      	ldr	r1, [sp, #4]
 8002e30:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002e34:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002e38:	4259      	negs	r1, r3
 8002e3a:	4159      	adcs	r1, r3
 8002e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e40:	e7eb      	b.n	8002e1a <__swhatbuf_r+0x24>

08002e42 <__smakebuf_r>:
 8002e42:	898b      	ldrh	r3, [r1, #12]
 8002e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e46:	079d      	lsls	r5, r3, #30
 8002e48:	4606      	mov	r6, r0
 8002e4a:	460c      	mov	r4, r1
 8002e4c:	d507      	bpl.n	8002e5e <__smakebuf_r+0x1c>
 8002e4e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e52:	6023      	str	r3, [r4, #0]
 8002e54:	6123      	str	r3, [r4, #16]
 8002e56:	2301      	movs	r3, #1
 8002e58:	6163      	str	r3, [r4, #20]
 8002e5a:	b002      	add	sp, #8
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
 8002e5e:	ab01      	add	r3, sp, #4
 8002e60:	466a      	mov	r2, sp
 8002e62:	f7ff ffc8 	bl	8002df6 <__swhatbuf_r>
 8002e66:	9900      	ldr	r1, [sp, #0]
 8002e68:	4605      	mov	r5, r0
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	f7ff faf6 	bl	800245c <_malloc_r>
 8002e70:	b948      	cbnz	r0, 8002e86 <__smakebuf_r+0x44>
 8002e72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e76:	059a      	lsls	r2, r3, #22
 8002e78:	d4ef      	bmi.n	8002e5a <__smakebuf_r+0x18>
 8002e7a:	f023 0303 	bic.w	r3, r3, #3
 8002e7e:	f043 0302 	orr.w	r3, r3, #2
 8002e82:	81a3      	strh	r3, [r4, #12]
 8002e84:	e7e3      	b.n	8002e4e <__smakebuf_r+0xc>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	6020      	str	r0, [r4, #0]
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	81a3      	strh	r3, [r4, #12]
 8002e90:	9b00      	ldr	r3, [sp, #0]
 8002e92:	6163      	str	r3, [r4, #20]
 8002e94:	9b01      	ldr	r3, [sp, #4]
 8002e96:	6120      	str	r0, [r4, #16]
 8002e98:	b15b      	cbz	r3, 8002eb2 <__smakebuf_r+0x70>
 8002e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	f000 f84e 	bl	8002f40 <_isatty_r>
 8002ea4:	b128      	cbz	r0, 8002eb2 <__smakebuf_r+0x70>
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	81a3      	strh	r3, [r4, #12]
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	431d      	orrs	r5, r3
 8002eb6:	81a5      	strh	r5, [r4, #12]
 8002eb8:	e7cf      	b.n	8002e5a <__smakebuf_r+0x18>

08002eba <_raise_r>:
 8002eba:	291f      	cmp	r1, #31
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	460d      	mov	r5, r1
 8002ec2:	d904      	bls.n	8002ece <_raise_r+0x14>
 8002ec4:	2316      	movs	r3, #22
 8002ec6:	6003      	str	r3, [r0, #0]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ecc:	bd38      	pop	{r3, r4, r5, pc}
 8002ece:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002ed0:	b112      	cbz	r2, 8002ed8 <_raise_r+0x1e>
 8002ed2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002ed6:	b94b      	cbnz	r3, 8002eec <_raise_r+0x32>
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f000 f853 	bl	8002f84 <_getpid_r>
 8002ede:	462a      	mov	r2, r5
 8002ee0:	4601      	mov	r1, r0
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ee8:	f000 b83a 	b.w	8002f60 <_kill_r>
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d00a      	beq.n	8002f06 <_raise_r+0x4c>
 8002ef0:	1c59      	adds	r1, r3, #1
 8002ef2:	d103      	bne.n	8002efc <_raise_r+0x42>
 8002ef4:	2316      	movs	r3, #22
 8002ef6:	6003      	str	r3, [r0, #0]
 8002ef8:	2001      	movs	r0, #1
 8002efa:	e7e7      	b.n	8002ecc <_raise_r+0x12>
 8002efc:	2400      	movs	r4, #0
 8002efe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002f02:	4628      	mov	r0, r5
 8002f04:	4798      	blx	r3
 8002f06:	2000      	movs	r0, #0
 8002f08:	e7e0      	b.n	8002ecc <_raise_r+0x12>
	...

08002f0c <raise>:
 8002f0c:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <raise+0xc>)
 8002f0e:	4601      	mov	r1, r0
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	f7ff bfd2 	b.w	8002eba <_raise_r>
 8002f16:	bf00      	nop
 8002f18:	2000007c 	.word	0x2000007c

08002f1c <_fstat_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d07      	ldr	r5, [pc, #28]	; (8002f3c <_fstat_r+0x20>)
 8002f20:	2300      	movs	r3, #0
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	602b      	str	r3, [r5, #0]
 8002f2a:	f7fd fe26 	bl	8000b7a <_fstat>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	d102      	bne.n	8002f38 <_fstat_r+0x1c>
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	b103      	cbz	r3, 8002f38 <_fstat_r+0x1c>
 8002f36:	6023      	str	r3, [r4, #0]
 8002f38:	bd38      	pop	{r3, r4, r5, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20000208 	.word	0x20000208

08002f40 <_isatty_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4d06      	ldr	r5, [pc, #24]	; (8002f5c <_isatty_r+0x1c>)
 8002f44:	2300      	movs	r3, #0
 8002f46:	4604      	mov	r4, r0
 8002f48:	4608      	mov	r0, r1
 8002f4a:	602b      	str	r3, [r5, #0]
 8002f4c:	f7fd fe25 	bl	8000b9a <_isatty>
 8002f50:	1c43      	adds	r3, r0, #1
 8002f52:	d102      	bne.n	8002f5a <_isatty_r+0x1a>
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	b103      	cbz	r3, 8002f5a <_isatty_r+0x1a>
 8002f58:	6023      	str	r3, [r4, #0]
 8002f5a:	bd38      	pop	{r3, r4, r5, pc}
 8002f5c:	20000208 	.word	0x20000208

08002f60 <_kill_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4d07      	ldr	r5, [pc, #28]	; (8002f80 <_kill_r+0x20>)
 8002f64:	2300      	movs	r3, #0
 8002f66:	4604      	mov	r4, r0
 8002f68:	4608      	mov	r0, r1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	f7fd fda5 	bl	8000abc <_kill>
 8002f72:	1c43      	adds	r3, r0, #1
 8002f74:	d102      	bne.n	8002f7c <_kill_r+0x1c>
 8002f76:	682b      	ldr	r3, [r5, #0]
 8002f78:	b103      	cbz	r3, 8002f7c <_kill_r+0x1c>
 8002f7a:	6023      	str	r3, [r4, #0]
 8002f7c:	bd38      	pop	{r3, r4, r5, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000208 	.word	0x20000208

08002f84 <_getpid_r>:
 8002f84:	f7fd bd92 	b.w	8000aac <_getpid>

08002f88 <_gettimeofday>:
 8002f88:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <_gettimeofday+0xc>)
 8002f8a:	2258      	movs	r2, #88	; 0x58
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f92:	4770      	bx	lr
 8002f94:	20000208 	.word	0x20000208

08002f98 <_init>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr

08002fa4 <_fini>:
 8002fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa6:	bf00      	nop
 8002fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002faa:	bc08      	pop	{r3}
 8002fac:	469e      	mov	lr, r3
 8002fae:	4770      	bx	lr
